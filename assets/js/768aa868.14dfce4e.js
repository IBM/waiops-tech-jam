"use strict";(self.webpackChunkswat_hub=self.webpackChunkswat_hub||[]).push([[2868],{15680:(e,t,o)=>{o.d(t,{xA:()=>g,yg:()=>h});var r=o(96540);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var i=r.createContext({}),p=function(e){var t=r.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},g=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=p(o),y=n,h=u["".concat(i,".").concat(y)]||u[y]||c[y]||a;return o?r.createElement(h,s(s({ref:t},g),{},{components:o})):r.createElement(h,s({ref:t},g))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,s=new Array(a);s[0]=y;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:n,s[1]=l;for(var p=2;p<a;p++)s[p]=o[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,o)}y.displayName="MDXCreateElement"},6416:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=o(58168),n=(o(96540),o(15680));const a={title:"4. Topology Rules",description:"Create topology rules",sidebar_position:4},s=void 0,l={unversionedId:"cloud-pak-aiops/topology-lab/topology-rules/index",id:"cloud-pak-aiops/topology-lab/topology-rules/index",title:"4. Topology Rules",description:"Create topology rules",source:"@site/labs/cloud-pak-aiops/topology-lab/4-topology-rules/index.mdx",sourceDirName:"cloud-pak-aiops/topology-lab/4-topology-rules",slug:"/cloud-pak-aiops/topology-lab/topology-rules/",permalink:"/waiops-tech-jam/labs/cloud-pak-aiops/topology-lab/topology-rules/",draft:!1,editUrl:"https://github.com/IBM/waiops-tech-jam/tree/main/labs/cloud-pak-aiops/topology-lab/4-topology-rules/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"4. Topology Rules",description:"Create topology rules",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"3. Topology in IT Operations",permalink:"/waiops-tech-jam/labs/cloud-pak-aiops/topology-lab/creating-topology/"},next:{title:"5. Topology Group Templates",permalink:"/waiops-tech-jam/labs/cloud-pak-aiops/topology-lab/topology-templates/"}},i={},p=[{value:"mergeRule",id:"mergerule",level:4},{value:"tagsRule",id:"tagsrule",level:4},{value:"matchTokensRule",id:"matchtokensrule",level:4},{value:"historyRule",id:"historyrule",level:4},{value:"4.1: Merge Rules in Action",id:"41-merge-rules-in-action",level:2},{value:"Rerun Observer Jobs to Apply the Merge Rule",id:"rerun-observer-jobs-to-apply-the-merge-rule",level:4},{value:"Finding the Merged Resource",id:"finding-the-merged-resource",level:4}],g={toc:p},u="wrapper";function c(e){let{components:t,...a}=e;return(0,n.yg)(u,(0,r.A)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"Topology Rules help streamline topologies, such as by merging different observer\nrecords of the same resource into a single composite resource, or by excluding\nspecific changes from being recorded against a resource history. You can use\ndifferent types of rules for different purposes."),(0,n.yg)("admonition",{type:"tip"},(0,n.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"In this Lab, we will only see a hands-on example of a ",(0,n.yg)("strong",{parentName:"mdxAdmonitionTitle"},"mergeRule"),"."),(0,n.yg)("p",{parentName:"admonition"},"Additional information about other rules can be found in the product\n",(0,n.yg)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/cloud-paks/cloud-pak-aiops/4.7.0?topic=elements-configuring-rules"},(0,n.yg)("strong",{parentName:"a"},"documentation")),".")),(0,n.yg)("h4",{id:"mergerule"},"mergeRule"),(0,n.yg)("p",null,"Different observers can record and then display the same resource as two (or\nmore) resources. For example, a kubernetes cluster Observer can find a ",(0,n.yg)("em",{parentName:"p"},"worker\nnode")," as a topology resource but the same resource can be found by a VMware\nvCenter Observer as ",(0,n.yg)("em",{parentName:"p"},"virtual machine"),". But its essentially the same resource. To\nprevent these situations, a merge rule can be created to ensure that these\nseparate records share values in their tokens set, which then triggers the Merge\nservice to create a single composite resource. Composite (or merged) resources\nare displayed in the Topology viewer as a single resource, which includes the\nproperties of all merged resources. Merge rules are applied to resources by an\nobserver job ",(0,n.yg)("em",{parentName:"p"},"before")," it is sent to the topology service."),(0,n.yg)("h4",{id:"tagsrule"},"tagsRule"),(0,n.yg)("p",null,"The tags rule allows the value of another field to be copied to the tags field\nso that it becomes searchable in the UI. It populates the tags of resources\nmatched by the rule. Any field that is not indexed and cannot normally be\nsearched becomes searchable when copied to the tags property. For a list of\nindexed properties, see\n",(0,n.yg)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/cloud-paks/cloud-pak-watson-aiops/4.1.0?topic=reference-properties"},"Properties"),".\nHaving the right tags in resources also enable the use of Tag Templates to group\nresources with a common tag. We will see resource grouping in the next chapter."),(0,n.yg)("h4",{id:"matchtokensrule"},"matchTokensRule"),(0,n.yg)("p",null,"A match token rule allows the value of another field to be copied to the\nmatchTokens field so that it can be used to match events to resources."),(0,n.yg)("h4",{id:"historyrule"},"historyRule"),(0,n.yg)("p",null,"Changes in topology resources are recorded. A history rule identifies properties\nthat don't indicate an important change that needs to be recorded, for example a\nhost's ",(0,n.yg)("em",{parentName:"p"},"sysUpTime")," property. In other words, a history rule can be used to\nexclude properties from being retained in history, saving resources by not\nmaintaining detailed historical records of changes to these properties."),(0,n.yg)("h2",{id:"41-merge-rules-in-action"},"4.1: Merge Rules in Action"),(0,n.yg)("p",null,"You are now ready to create a Merge Rule to tie the two topology resources that\nwe loaded in the previous chapter."),(0,n.yg)("p",null,"This is where the topology data coming from the ",(0,n.yg)("strong",{parentName:"p"},"application")," topology source\nis mapped onto the topology data coming from the ",(0,n.yg)("strong",{parentName:"p"},"infrastructure"),' topology\nsource. In our hypothetical scenario, we know we have Resources of type\n"computer" in both sets of topology, and we know that they relate to the same\nservers. Corresponding instances across the two data sets are also labelled\nconsistently and correctly, meaning that identifying the same Resource across\nthe two data sets is possible.'),(0,n.yg)("p",null,'In our case, we have a Resource called "computer1000" represented in our\ninfrastructure topology data as well as in our application data. Our goal is to\nmerge the two sets of topology together so that we can both visualize what\napplications are running on our servers, and more importantly, correlate\ninfrastructure alerts with application alerts, something that is not possible\notherwise. Note that the rule is created in a generic way so that if there were\nany other computers included in our two data sets, they too would be merged\ntogether automatically, so long as they met the criteria set out in the rule.'),(0,n.yg)("p",null,"From the burger menu in the top-left, navigate to: ",(0,n.yg)("strong",{parentName:"p"},"Operate \u2192 Resource\nmanagement"),". In the ",(0,n.yg)("strong",{parentName:"p"},"Resource management")," page, click on the ",(0,n.yg)("strong",{parentName:"p"},"Settings"),"\ngear icon in the top-right as shown below:"),(0,n.yg)("p",null,(0,n.yg)("img",{src:o(79100).A,width:"1113",height:"140"})),(0,n.yg)("p",null,"Select ",(0,n.yg)("strong",{parentName:"p"},"Topology configuration"),". From the ",(0,n.yg)("strong",{parentName:"p"},"Topology configuration")," page, in\nthe ",(0,n.yg)("strong",{parentName:"p"},"Rules")," card shown below select ",(0,n.yg)("strong",{parentName:"p"},"Configure"),"."),(0,n.yg)("p",null,(0,n.yg)("img",{src:o(69277).A,width:"989",height:"700"})),(0,n.yg)("p",null,"Note that some Merge rules are already defined out-of-the-box."),(0,n.yg)("p",null,"Click the ",(0,n.yg)("strong",{parentName:"p"},"New")," button in the top-right."),(0,n.yg)("p",null,"Select ",(0,n.yg)("strong",{parentName:"p"},"Merge rule")," from the rule type list and select ",(0,n.yg)("strong",{parentName:"p"},"Start"),"."),(0,n.yg)("p",null,"Follow these steps to create your new Merge Rule:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Rule name:")," Give your rule a name, for example\n",(0,n.yg)("strong",{parentName:"li"},"InfrastructureApplications")),(0,n.yg)("li",{parentName:"ul"},"Set ",(0,n.yg)("strong",{parentName:"li"},"Status")," to ",(0,n.yg)("strong",{parentName:"li"},"Enabled")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Tokens"),': The tokens refer to the parameters in your Resources that will be\ncompared. In our case, the parameter that stores the computer name is called\n"name" in both sets of data, therefore type ',(0,n.yg)("strong",{parentName:"li"},"${name}")," and click on ",(0,n.yg)("strong",{parentName:"li"},"Add"),".")),(0,n.yg)("p",null,(0,n.yg)("img",{src:o(39053).A,width:"424",height:"219"})),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Expand the ",(0,n.yg)("strong",{parentName:"p"},"Conditions")," drop-down."),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Observers"),": Select ",(0,n.yg)("strong",{parentName:"p"},"File")," from the list of Observers and click ",(0,n.yg)("strong",{parentName:"p"},"Add"),".\nSince both job types are of type File, this is all that is needed in this\ncase. Normally you would add all the Observer types that apply to your\nmapping. If this section was left empty, it would try to apply this rule to\ntopology data coming from ",(0,n.yg)("strong",{parentName:"p"},"all")," Observer types.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Providers"),": Add both of your jobs to the list (e.g.\n",(0,n.yg)("strong",{parentName:"p"},"FILE.OBSERVER:infrastructure.txt")," and ",(0,n.yg)("strong",{parentName:"p"},"FILE.OBSERVER:application.txt"),")\nThis specifies that this rule should only apply to these particular jobs. If\nthis section was left empty, it would try to apply this rule to topology\ndata coming from ",(0,n.yg)("strong",{parentName:"p"},"all")," File jobs defined.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Resource types"),": Add the Resource type that this rule should apply to\nwhich is ",(0,n.yg)("strong",{parentName:"p"},"computer"),". If this section was left empty, it would try to apply\nthis rule to ",(0,n.yg)("strong",{parentName:"p"},"all")," Resource types in the Observers list and Providers list\nabove.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"The ",(0,n.yg)("strong",{parentName:"p"},"Token filter mode")," and ",(0,n.yg)("strong",{parentName:"p"},"Token")," filters sections allow you to refine\nyour rule mapping even further, by allowing you to specify regular\nexpressions to either include or exclude the set of Resources from the rule.\nIn this case, we will leave both of these sections blank."))))),(0,n.yg)("p",null,"Your ",(0,n.yg)("strong",{parentName:"p"},"Conditions")," section should look like this:"),(0,n.yg)("p",null,(0,n.yg)("img",{src:o(3451).A,width:"604",height:"779"})),(0,n.yg)("admonition",{type:"note"},(0,n.yg)("p",{parentName:"admonition"},"Its good practice to specify the appropriate set of ",(0,n.yg)("strong",{parentName:"p"},"Conditions")," in the rules,\nto ensure they only get applied to the right topology resources.")),(0,n.yg)("p",null,"When finished creating your new Merge Rule, click ",(0,n.yg)("strong",{parentName:"p"},"Save")," and return to the\nObserver jobs page"),(0,n.yg)("h4",{id:"rerun-observer-jobs-to-apply-the-merge-rule"},"Rerun Observer Jobs to Apply the Merge Rule"),(0,n.yg)("p",null,"From the burger menu in the top-left navigate to: ",(0,n.yg)("strong",{parentName:"p"},"Define \u2192 Integrations")),(0,n.yg)("p",null,"Click on ",(0,n.yg)("strong",{parentName:"p"},"Manage observer jobs")," tab and click on ",(0,n.yg)("strong",{parentName:"p"},"Configure, schedule, and\nmanage observer jobs"),"."),(0,n.yg)("p",null,(0,n.yg)("img",{src:o(69058).A,width:"1117",height:"295"})),(0,n.yg)("p",null,"Click on ",(0,n.yg)("strong",{parentName:"p"},"Run")," (Play button icon) under the Operation column on ",(0,n.yg)("strong",{parentName:"p"},"each of the\ntwo jobs"),". Note that both Observer jobs must be run again. The data will be\nreprocessed in light of the new Merge rule we just created, and any Resources\nthat match the rule will have the merge operation applied against them."),(0,n.yg)("p",null,(0,n.yg)("img",{src:o(7560).A,width:"1247",height:"266"})),(0,n.yg)("admonition",{type:"info"},(0,n.yg)("p",{parentName:"admonition"},"The merge will not happen unless the affected jobs are re-run. In other words,\nyou will always have to rerun jobs to apply any defined rules.")),(0,n.yg)("h4",{id:"finding-the-merged-resource"},"Finding the Merged Resource"),(0,n.yg)("p",null,"To verify the merge was successful, navigate back to Resource management. From\nthe burger menu in the top-left, navigate to: ",(0,n.yg)("strong",{parentName:"p"},"Operate \u2192 Resource management"),"."),(0,n.yg)("p",null,"In the ",(0,n.yg)("strong",{parentName:"p"},"Resource management")," page, click on the ",(0,n.yg)("strong",{parentName:"p"},"Resources")," tab and this\ntime search for ",(0,n.yg)("strong",{parentName:"p"},"computer1000"),". Now you will see just one instance in the list\nof Resources called computer1000 whereas before you would have seen two. Click\non ",(0,n.yg)("strong",{parentName:"p"},"computer1000"),", change the hop view to ",(0,n.yg)("strong",{parentName:"p"},"2")," and click ",(0,n.yg)("strong",{parentName:"p"},"Render"),". You\nshould see something like the following, showing the combined topology segments:"),(0,n.yg)("p",null,(0,n.yg)("img",{src:o(23042).A,width:"1126",height:"780"})),(0,n.yg)("p",null,"The Resource computer1000 is only shown once in the topology, but remains\nconnected to all the resources it was connected to in both sets of topology\ndata, prior to the merge. The Merge Rule has effectively merged the two sets of\ntopology together, by merging the common Resources, according to the rule that\nwe defined."),(0,n.yg)("p",null,'You have now completed this chapter and are ready for next one about "topology\ntemplates".'))}c.isMDXComponent=!0},23042:(e,t,o)=>{o.d(t,{A:()=>r});const r=o.p+"assets/images/computer-87df3900a443dda04f48868fb759e839.png"},3451:(e,t,o)=>{o.d(t,{A:()=>r});const r=o.p+"assets/images/conditions-fe58327924a75016bf02fcbf081d5ce0.png"},79100:(e,t,o)=>{o.d(t,{A:()=>r});const r=o.p+"assets/images/gear-icon-6bf1daa9a02204266bde70110ff08180.png"},39053:(e,t,o)=>{o.d(t,{A:()=>r});const r=o.p+"assets/images/name-added-8b40ababd86802530e84b249d94df916.png"},69058:(e,t,o)=>{o.d(t,{A:()=>r});const r=o.p+"assets/images/obs-link-0e8cfa59c8e655175a52928546827855.png"},69277:(e,t,o)=>{o.d(t,{A:()=>r});const r=o.p+"assets/images/rules-card-c033a3fa51256c899c7bd254d6937682.png"},7560:(e,t,o)=>{o.d(t,{A:()=>r});const r=o.p+"assets/images/run-job-b70dac5196cfea6dc0627ca35812029b.png"}}]);