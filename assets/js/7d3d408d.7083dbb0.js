"use strict";(self.webpackChunkswat_hub=self.webpackChunkswat_hub||[]).push([[655],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||a;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const a={title:"3. Connect an on-premise Probe",description:"Discusses configuration options for AIOps components. Provide guidence on configuring Slack ChatOps, Log Connectors, Instana Connector, Topology Observers, and ServiceNow connector.",sidebar_position:3},i=void 0,s={unversionedId:"watson-aiops/connections/index",id:"watson-aiops/connections/index",title:"3. Connect an on-premise Probe",description:"Discusses configuration options for AIOps components. Provide guidence on configuring Slack ChatOps, Log Connectors, Instana Connector, Topology Observers, and ServiceNow connector.",source:"@site/labs/watson-aiops/3-connections/index.mdx",sourceDirName:"watson-aiops/3-connections",slug:"/watson-aiops/connections/",permalink:"/waiops-tech-jam/labs/watson-aiops/connections/",draft:!1,editUrl:"https://github.com/IBM/waiops-tech-jam/labs/watson-aiops/3-connections/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"3. Connect an on-premise Probe",description:"Discusses configuration options for AIOps components. Provide guidence on configuring Slack ChatOps, Log Connectors, Instana Connector, Topology Observers, and ServiceNow connector.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"2. Installation",permalink:"/waiops-tech-jam/labs/watson-aiops/installation/"},next:{title:"4. Set up a webhook integration",permalink:"/waiops-tech-jam/labs/watson-aiops/webhook/"}},l={},c=[{value:"3-1: Overview",id:"3-1-overview",level:2},{value:"3-2: Enable the nodeports",id:"3-2-enable-the-nodeports",level:2},{value:"3-3: Gather the cluster connection information",id:"3-3-gather-the-cluster-connection-information",level:2},{value:"3-4: Configure the Probe to connect to the cluster",id:"3-4-configure-the-probe-to-connect-to-the-cluster",level:2},{value:"3-5: Start the Simnet Probe",id:"3-5-start-the-simnet-probe",level:2}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"3-1-overview"},"3-1: Overview"),(0,r.kt)("p",null,"This module focuses on configuring and connecting an on-premise Netcool/Probe to\nthe Event Manager. In most scenarios, there will be an existing on-premise\nNetcool deployment present, or there will be a need to deploy some Netcool\nProbes, and so there will be a need to connect the on-premise components to the\nEvent Manager system running on OpenShift. Typically this will involve\nconnecting Probes or uni-directional ObjectServer Gateways into the Event\nManager, to provide a source of events."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," This module uses on-premise OMNIbus Probe that you will connect to\nyour Event Manager system."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," For the SWAT tech jams, Netcool/OMNIbus is pre-installed on a virtual\nmachine (",(0,r.kt)("inlineCode",{parentName:"p"},"pi-template"),") in your environment which includes a Simnet Probe.\nNetcool/OMNIbus (",(0,r.kt)("inlineCode",{parentName:"p"},"$NCHOME"),") is installed in the following location:\n",(0,r.kt)("inlineCode",{parentName:"p"},"/home/scadmin/IBM/tivoli/netcool")," You can connect to this virtual machine using\n",(0,r.kt)("inlineCode",{parentName:"p"},"ssh pi-template")," from your control node."),(0,r.kt)("p",null,"This deployment scenario will assume you are deploying onto IBM Cloud however\nthe steps would generally apply to an OpenShift cluster deployed on another\ncloud provider or on-premise."),(0,r.kt)("p",null,"By the end of this module, you will have enabled the ObjectServer nodeports on\nyour cluster, configured your on-premise Netcool/OMNIbus system to connect to\nthe ObjectServer embedded within Event Manager, and connected a Probe."),(0,r.kt)("h2",{id:"3-2-enable-the-nodeports"},"3-2: Enable the nodeports"),(0,r.kt)("p",null,"Behind the scenes, the event stores in Watson for AIOps Event Manager are\nNetcool/OMNIbus ObjectServers. These are running in containers and are not\naccessible outside the cluster by default. This first step therefore involves\nmodifying your Event Manager deployment to activate the nodeports so that the\nObjectServers can be accessed from outside the cluster."),(0,r.kt)("p",null,"Log in to your OpenShift UI and navigate to: ",(0,r.kt)("strong",{parentName:"p"},"Operators > Installed Operators >\nIBM Cloud Pak for Watson AIOps Event Manager > NOI"),"."),(0,r.kt)("p",null,"Next, click on your deployment - for example: ",(0,r.kt)("strong",{parentName:"p"},"evtmanager")," - and then click on\nthe ",(0,r.kt)("strong",{parentName:"p"},"YAML")," tab."),(0,r.kt)("p",null,"Add a new sub-section to the ",(0,r.kt)("strong",{parentName:"p"},"spec"),": section in your configuration with the\nfollowing text:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"  helmValuesNOI:\n    global.service.nodePort.enable: true\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE"),": the spacing and indentation is important here."),(0,r.kt)("p",null,"After you have added this sub-section and clicked Save, the resulting\nconfiguration should look something like the following:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(32077).Z,width:"933",height:"939"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," In this screenshot, other properties have also been added. The key\nadded lines are only lines ",(0,r.kt)("strong",{parentName:"p"},"196")," and ",(0,r.kt)("strong",{parentName:"p"},"198"),"."),(0,r.kt)("p",null,"After you have saved the configuration, OpenShift will detect the change, and\nredeploy the relevant services."),(0,r.kt)("p",null,"For more information on this step, see the following documentation link:\n",(0,r.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/noi/1.6.5?topic=service-identifying-proxy-listening-port"},"https://www.ibm.com/docs/en/noi/1.6.5?topic=service-identifying-proxy-listening-port")),(0,r.kt)("h2",{id:"3-3-gather-the-cluster-connection-information"},"3-3: Gather the cluster connection information"),(0,r.kt)("p",null,"This step involves compiling information about the cluster's certificate common\nname (CN) and downloading the cluster certificate so that it can be imported\ninto the Probe server's trusted key store."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"a) Find the IP address of the cluster Ingress subdomain")),(0,r.kt)("p",null,"In the previous module 2-6, you identified the ",(0,r.kt)("strong",{parentName:"p"},"Ingress subdomain")," from the\nIBM Cloud UI. Execute following command from your terminal session. Ping the\nIngress subdomain to find the ",(0,r.kt)("strong",{parentName:"p"},"IP address")," to use to communicate with the\ncluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\nping swat01-4693fb98e216XXXXXXXXXXX-0000.us-east.containers.appdomain.cloud\n\nPING swat01-4693fb98e21XXXXXXXXXXXXx-0000.us-east.containers.appdomain.cloud (5X.XXX.XX.XXX) 56(84) bytes of data.\n64 bytes from evtmanager-proxy.noi.svc (10.20.30.40): icmp_seq=1 ttl=46 time=89.2 ms\n^C\n--- swat01-4693fb98e216d6XXXXXXXXXXXXXX-0000.us-east.containers.appdomain.cloud ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1001ms\nrtt min/avg/max/mdev = 89.216/93.100/96.985/3.896 ms\n")),(0,r.kt)("p",null,"In this example, we would use the IP address: 10.20.30.40 (from the above\noutput) to communicate with the cluster."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"b) Find the Nodeports for proxy server running in the OCP cluster")),(0,r.kt)("p",null,"Next, log in to the OpenShift cluster via the terminal session (using\n",(0,r.kt)("inlineCode",{parentName:"p"},"oc login"),"), as you did in the previous module. To check that the nodeports have\nbeen successfully deployed, you can query the Proxy Service, and check its\noutput for the nodeport values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"oc get service -o yaml evtmanager-proxy -n noi | grep nodePort\n")),(0,r.kt)("p",null,"The output will look something like :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"    nodePort: 30846\n    nodePort: 31746\n")),(0,r.kt)("p",null,"From the output above, you can see that the nodeports have been deployed on\nports ",(0,r.kt)("strong",{parentName:"p"},"30846")," for the primary ObjectServer and ",(0,r.kt)("strong",{parentName:"p"},"31846")," for the backup. These\nare the port numbers that are externally accessible to the cluster and are what\nyour Netcool Probe (or in-bound Netcool Gateway) will use to connect."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"c) Extract the Openshift cluster certificate")),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"openssl")," command to retrieve the x.509 certificate that is returned by\nthe proxy and verify the certificate common name (CN). To do this, you again\nneed to use the Ingress subdomain value in conjunction with the nodeport value\nyou discovered in Step 1 - for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"openssl s_client -showcerts -connect swat01-469XXXXXXXXXXXXXXXXXXXXXXXXXc049-0000.us-east.containers.appdomain.cloud:32767\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CONNECTED(00000003) depth=1 CN = openshift-service-serving-signer@1645115959 verify return:1 depth=1 CN = openshift-service-serving-signer@1645115959 verify return:1 depth=0 CN = evtmanager-proxy.noi.svc verify return:1 Certificate chain 0 s:CN = evtmanager-proxy.noi.svc ... ")),(0,r.kt)("p",null,"Here you can see the proxy service name ",(0,r.kt)("strong",{parentName:"p"},"evtmanager-proxy.noi.svc")," being used\nby the server at depth=0 is associated with the certificate, and that it matches\nthe hostname returned by the ping command earlier. This is important because the\nhostname we use to connect to the cluster must match that referred to in the\ncertificate in order for the SSL connection to work correctly."),(0,r.kt)("p",null,"Finally, download the certificate from the cluster using the ",(0,r.kt)("inlineCode",{parentName:"p"},"oc")," utility:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"oc get secrets/signing-key -n openshift-service-ca -o template='{{index .data \"tls.crt\"}}' | base64 --decode > cluster-ca-cert.pem\n")),(0,r.kt)("p",null,"Copy this file (cluster-ca-cert.pem) to the server where your Netcool/Probe is\ninstalled in preparation for the next step."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"scp cluster-ca-cert.pem jammer@pi-template:/tmp/\n")),(0,r.kt)("p",null,"For more information on this step, see the following documentation link:\n",(0,r.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/noi/1.6.5?topic=service-configuring-tls-encryption-red-hat-openshift"},"https://www.ibm.com/docs/en/noi/1.6.5?topic=service-configuring-tls-encryption-red-hat-openshift")),(0,r.kt)("h2",{id:"3-4-configure-the-probe-to-connect-to-the-cluster"},"3-4: Configure the Probe to connect to the cluster"),(0,r.kt)("p",null,"Now that we have the proxy service hostname, the nodeport of the primary\nObjectServer, and the cluster's certificate, we are ready to configure the\non-premise Netcool/OMNIbus Probe to connect to the Event Manager running in OCP."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"a) Log in to the Netcool/OMNIbus Probe server from your Control Node:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"ssh pi-template\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"b) Add an entry to the ",(0,r.kt)("inlineCode",{parentName:"strong"},"/etc/hosts")," file with the cluster IP address and the\nproxy service hostname obtained previously:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo vi /etc/hosts\n")),(0,r.kt)("p",null,"Append following entry:\n",(0,r.kt)("inlineCode",{parentName:"p"},"<cluster IP address from 3.3(a)> evtmanager-proxy.noi.svc")),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"10.20.30.40 evtmanager-proxy.noi.svc\n")),(0,r.kt)("p",null,"This is the hostname (evtmanager-proxy.noi.svc) that we are going to use in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"omni.dat")," interfaces file shortly."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"c) Add the following entry to the interfaces file")),(0,r.kt)("p",null,"Switch to user scadmin to perform the following tasks."),(0,r.kt)("p",null,"Edit the interfaces file located in: ",(0,r.kt)("inlineCode",{parentName:"p"},"$NCHOME/etc/omni.dat")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo su - scadmin\nexport NCHOME=/home/scadmin/IBM/tivoli/netcool\nvi $NCHOME/etc/omni.dat\n")),(0,r.kt)("p",null,"Add the following entry to the end of the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"[ROKS_AGG_P]\n{\n Primary: evtmanager-proxy.noi.svc ssl <nodeport from section 3.3 (b)>\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," The entry contains the string ssl which indicates that an encrypted\nconnection should be used."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"d) Run nco_igen to update the interfaces file information")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$NCHOME/bin/nco_igen\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"e) Create a keystore for the cluster cerificate","*")),(0,r.kt)("p",null,"If you haven't already created one previously, create a keystore on your Probe\nserver to import the certificate into:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'export NCHOME=/home/scadmin/IBM/tivoli/netcool\n$NCHOME/bin/nc_gskcmd -keydb -create -db "$NCHOME/etc/security/keys/omni.kdb" -pw password -stash -expire 1000\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"f) Copy the certificate you downloaded in Step 2 to the Probe server, and\nimport it into your newly created keystore")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$NCHOME/bin/nc_gskcmd -cert -add -file /tmp/cluster-ca-cert.pem -db $NCHOME/etc/security/keys/omni.kdb -stashed\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"g) Use the nco_ping utility to test the connection the ObjectServer")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$NCHOME/omnibus/bin/nco_ping ROKS_AGG_P\n")),(0,r.kt)("p",null,"Output: ",(0,r.kt)("inlineCode",{parentName:"p"},"NCO_PING: Server available.")),(0,r.kt)("p",null,"You are now ready to connect your Probe."),(0,r.kt)("p",null,"For more information on this step, see the following documentation link:\n",(0,r.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/noi/1.6.5?topic=service-configuring-tls-encryption-red-hat-openshift"},"https://www.ibm.com/docs/en/noi/1.6.5?topic=service-configuring-tls-encryption-red-hat-openshift")),(0,r.kt)("h2",{id:"3-5-start-the-simnet-probe"},"3-5: Start the Simnet Probe"),(0,r.kt)("p",null,"The final step is to start the Probe and connect it to the primary ObjectServer\nrunning in OpenShift."),(0,r.kt)("p",null,"Using the Simnet Probe as an example, run the Probe in debug mode to ensure that\nthe Probe can connect to the ObjectServer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"export OMNIHOME=/home/scadmin/IBM/tivoli/netcool/omnibus\n$OMNIHOME/probes/nco_p_simnet -server ROKS_AGG_P -messagelevel debug -messagelog stdout\n")),(0,r.kt)("p",null,"You can check events in Event Viewer sent via the Simnet Probe."),(0,r.kt)("p",null,"After verifying a successful connection to the ObjectServer, you can run the\nProbe outside of debug mode, normally under Process Agent control."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://community.ibm.com/community/user/aiops/blogs/zane-bray1/2022/04/13/getting-started-with-watson-aiops-event-manager-27"},"Reference Blog")))}u.isMDXComponent=!0},32077:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/0_yaml-07469ad48cbbf809aace0bd7f45dd2c5.png"}}]);