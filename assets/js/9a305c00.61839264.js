"use strict";(self.webpackChunkswat_hub=self.webpackChunkswat_hub||[]).push([[3673],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>h});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(o),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||r;return o?n.createElement(m,i(i({ref:t},c),{},{components:o})):n.createElement(m,i({ref:t},c))}));function h(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=o[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},56212:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=o(87462),a=(o(67294),o(3905));const r={title:"5. Create sample topology",description:"Use the File Observer to create some sample topology",sidebar_position:5},i=void 0,s={unversionedId:"watson-aiops/create-topology/index",id:"watson-aiops/create-topology/index",title:"5. Create sample topology",description:"Use the File Observer to create some sample topology",source:"@site/labs/watson-aiops/5-create-topology/index.mdx",sourceDirName:"watson-aiops/5-create-topology",slug:"/watson-aiops/create-topology/",permalink:"/waiops-tech-jam/labs/watson-aiops/create-topology/",draft:!1,editUrl:"https://github.com/IBM/waiops-tech-jam/tree/main/labs/watson-aiops/5-create-topology/index.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"5. Create sample topology",description:"Use the File Observer to create some sample topology",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"4. Set up a webhook integration",permalink:"/waiops-tech-jam/labs/watson-aiops/webhook/"},next:{title:"6. Configure topology group templates",permalink:"/waiops-tech-jam/labs/watson-aiops/configure-topology/"}},l={},p=[{value:"5.1: Overview",id:"51-overview",level:2},{value:"5.2: Create and copy two sample topology files to the File Observer pod",id:"52-create-and-copy-two-sample-topology-files-to-the-file-observer-pod",level:2},{value:"5.3: Create two File Observer jobs",id:"53-create-two-file-observer-jobs",level:2},{value:"5.4: Create a Merge Rule to tie the topology together",id:"54-create-a-merge-rule-to-tie-the-topology-together",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"51-overview"},"5.1: Overview"),(0,a.kt)("p",null,"This module focuses on the initial creation of topology within the Event\nManager. Topology adds enormous value to your deployment as it provides\nvisibility into your environment and brings it to-life. With topology in your\nenvironment, you can:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Visualise a seamless end-to-end view of your environment"),(0,a.kt)("li",{parentName:"ul"},"Create and view groups of resources that logically belong together"),(0,a.kt)("li",{parentName:"ul"},"Perform topology-based event correlation for events occurring within a group\nof related resources")),(0,a.kt)("p",null,"The topology capability can ingest topology data from many different sources.\nThe multiple disparate pieces of topology can then be stitched together, where\nit makes sense to do so, allowing you to see your end-to-end environment with\nall the logical and physical connections represented."),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(76940).Z,width:"1516",height:"800"})),(0,a.kt)("p",null,"At the time of writing, the Event Manager comes with 30 different Observers. 28\nof these are designed to connect to specific types of end-point, such as\nServiceNow, Dynatrace, or VMware vCenter. Two of the Observers are generic ones:\nthe File Observer (for ingesting file-based topology data) and the REST Observer\n(for ingesting topology data programmatically via an API)."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"A full list of the topology Observers are documented here:\n",(0,a.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/nasm/1.1.14?topic=jobs-defining-observer-manually"},"https://www.ibm.com/docs/en/nasm/1.1.14?topic=jobs-defining-observer-manually"))),(0,a.kt)("p",null,"By the end of this module, you will have created two topology Observer jobs,\ningested two sets of topology data, and tied them together via a Merge Rule."),(0,a.kt)("h2",{id:"52-create-and-copy-two-sample-topology-files-to-the-file-observer-pod"},"5.2: Create and copy two sample topology files to the File Observer pod"),(0,a.kt)("p",null,"This first step involves the following tasks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create two sample files with topology data in them"),(0,a.kt)("li",{parentName:"ul"},"Copy them to the File Observer pod")),(0,a.kt)("p",null,"In a real-world scenario, it is likely that you would be using a number of\noff-the-shelf Observers to get your topology data from your environment. It is\nalso likely however that you would also leverage the File or REST Observers\neither to ingest data for which an off-the-shelf Observer doesn't exist, or to\nmanually create relationships between Resources in your topology for which there\nis no import source. For example, you may wish to create connections between\nresources to represent logical connections or dependencies that aren't included\nin the data sets. In any case, this exercise will give you the skills to use the\nFile Observer, which will also equip you with a little more knowledge of what's\ngoing on under the covers."),(0,a.kt)("p",null,"In this scenario, we will have one set of topology data that represents\n",(0,a.kt)("strong",{parentName:"p"},"physical infrastructure"),", and a second set of topology data that represents\nsome ",(0,a.kt)("strong",{parentName:"p"},"applications")," running on that physical infrastructure. An analogy to\nthis might be physical topology data ingested from an orchestrator, such as\nOpenStack, and application data, coming from an application management tool,\nsuch as AppDynamics."),(0,a.kt)("p",null,"Create a new file called infrastructure.txt with the following contents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="infrastructure.txt"',title:'"infrastructure.txt"'},'V:{"_operation":"InsertReplace","uniqueId":"379177a8-0a6a-4068-817c-d6d6e870437e","matchTokens":["379177a8-0a6a-4068-817c-d6d6e870437e","router1"],"tags":["WAIOpsDemo"],"name":"router1","entityTypes":["router"]}\nV:{"_operation":"InsertReplace","uniqueId":"9c1f90e0-7dc4-40d8-8721-40ea2f3af453","matchTokens":["9c1f90e0-7dc4-40d8-8721-40ea2f3af453","cpu01"],"tags":["WAIOpsDemo"],"name":"cpu01","entityTypes":["cpu"]}\nV:{"_operation":"InsertReplace","uniqueId":"222-9c1f90e0-7dc4-40d8-8721-40ea2f3af453","matchTokens":["222-9c1f90e0-7dc4-40d8-8721-40ea2f3af453","cpu02"],"tags":["WAIOpsDemo"],"name":"cpu02","entityTypes":["cpu"]}\nV:{"_operation":"InsertReplace","uniqueId":"7598a194-27a0-4d0b-9c49-cbc0070c99c9","matchTokens":["7598a194-27a0-4d0b-9c49-cbc0070c99c9","greatFireWallOfSecurity"],"tags":["WAIOpsDemo"],"name":"greatFireWallOfSecurity","entityTypes":["firewall"]}\nV:{"_operation":"InsertReplace","uniqueId":"974d1788-1312-4151-8a62-73fa1854e807","matchTokens":["974d1788-1312-4151-8a62-73fa1854e807","computer1000"],"tags":["WAIOpsDemo"],"name":"computer1000","entityTypes":["computer"]}\nV:{"_operation":"InsertReplace","uniqueId":"5c6f968a-2006-4b43-96b5-dd53df6b0afb","matchTokens":["5c6f968a-2006-4b43-96b5-dd53df6b0afb","steve"],"tags":["WAIOpsDemo"],"name":"steve","entityTypes":["person"]}\nE:{"_toUniqueId":"379177a8-0a6a-4068-817c-d6d6e870437e","_edgeType":"connectedTo","_fromUniqueId":"974d1788-1312-4151-8a62-73fa1854e807"}\nE:{"_toUniqueId":"7598a194-27a0-4d0b-9c49-cbc0070c99c9","_edgeType":"uses","_fromUniqueId":"379177a8-0a6a-4068-817c-d6d6e870437e"}\nE:{"_toUniqueId":"974d1788-1312-4151-8a62-73fa1854e807","_edgeType":"uses","_fromUniqueId":"5c6f968a-2006-4b43-96b5-dd53df6b0afb"}\nE:{"_toUniqueId":"9c1f90e0-7dc4-40d8-8721-40ea2f3af453","_edgeType":"contains","_fromUniqueId":"974d1788-1312-4151-8a62-73fa1854e807"}\nE:{"_toUniqueId":"222-9c1f90e0-7dc4-40d8-8721-40ea2f3af453","_edgeType":"contains","_fromUniqueId":"974d1788-1312-4151-8a62-73fa1854e807"}\n')),(0,a.kt)("p",null,"This JSON format is the type accepted by the File Observer, and contains\ntopology directives, one per line. A line that begins with a ",(0,a.kt)("strong",{parentName:"p"},"V"),' represents a\n"Vertex" (or Resource in UI terms). A line that begins with an ',(0,a.kt)("strong",{parentName:"p"},"E"),' represents\nan "Edge" (or Relationship in UI terms).'),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Other format information can be found here:\n",(0,a.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/nasm/1.1.14?topic=manually-defining-file-observer-jobs"},"https://www.ibm.com/docs/en/nasm/1.1.14?topic=manually-defining-file-observer-jobs"))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Some notes about the Vertex (Resource) properties follow:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"_",'operation: A value of "InsertReplace" means that this Resource will be\ninserted into the topology if it does not already exist, and replace the\ncurrent one if it does.')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"uniqueId: This must be a globally unique identifier for the Resource. The\noff-the-shelf Observers will ensure uniqueness automatically. When using the\nFile Observer, care must be taken to ensure uniqueness, otherwise you may\ninadvertently overwrite existing Resources with new ones.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"matchTokens: These values (comma separated list) are used to match the\nResource against the incoming event stream, specifically against the Node and\nNodeAlias fields. Where there is a match, the event will be associated with\nthe Resource and be visible from the topology view.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'tags: Tags can be handy to group Resources together, or for searching across\nresources that share a common tag. A resource can have multiple tags and\nrepresents a kind of group membership. One way that topology-based event\ncorrelation is across events that share a common tag. For example, you might\ntag all Resources that run an Oracle database with: "App:Oracle". Then you\ncould create a tag-based correlation group template based on that tag.')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"name: This is the primary identity of the Resource, and would normally be its\nmost recognisable and human-readable name. The name attribute is normally the\none shown in the topology viewer against a Resource.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"entityTypes: This defines what type of Resource is being created - for\nexample: a computer or a database - and will also dictate which icon it will\nuse in the topology view. A resource can have multiple values in the\nentityTypes field, although normally it would just have one entry.")))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Some notes about the Edge (Relationship) properties follow:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"_","fromUniqueId and ","_","toUniqueId: These parameters represent the start and end\npoints for the Relationship - ie. which two Resources is it connecting. The\nvalues they have refer to the uniqueId parameters of the Vertex objects - ie.\nthe Resources.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"_",'edgeType: This parameter specifies the type of Relationship this relates to.\nFor example, is it indicating a "uses" type of relationship, or a "contains"\ntype?'))),(0,a.kt)("p",{parentName:"admonition"},"A list of default Edge types (for the parameter ","_","edgeType) is documented here:\n",(0,a.kt)("a",{parentName:"p",href:"https://www.ibm.com/docs/en/nasm/1.1.14?topic=reference-edge-types"},"https://www.ibm.com/docs/en/nasm/1.1.14?topic=reference-edge-types"))),(0,a.kt)("p",null,"Create a second new file called application.txt with the following contents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="application.txt"',title:'"application.txt"'},'V:{"_operation":"InsertReplace","uniqueId":"111-379177a8-0a6a-4068-817c-d6d6e870437e","matchTokens":["111-379177a8-0a6a-4068-817c-d6d6e870437e","billing"],"tags":["WAIOpsDemo"],"name":"billing","entityTypes":["application"]}\nV:{"_operation":"InsertReplace","uniqueId":"111-9c1f90e0-7dc4-40d8-8721-40ea2f3af453","matchTokens":["111-9c1f90e0-7dc4-40d8-8721-40ea2f3af453","webserver"],"tags":["WAIOpsDemo"],"name":"webserver","entityTypes":["application"]}\nV:{"_operation":"InsertReplace","uniqueId":"111-974d1788-1312-4151-8a62-73fa1854e807","matchTokens":["111-974d1788-1312-4151-8a62-73fa1854e807","computer1000"],"tags":["WAIOpsDemo"],"name":"computer1000","entityTypes":["computer"]}\nE:{"_toUniqueId":"111-974d1788-1312-4151-8a62-73fa1854e807","_edgeType":"runsOn","_fromUniqueId":"111-379177a8-0a6a-4068-817c-d6d6e870437e"}\nE:{"_toUniqueId":"111-974d1788-1312-4151-8a62-73fa1854e807","_edgeType":"runsOn","_fromUniqueId":"111-9c1f90e0-7dc4-40d8-8721-40ea2f3af453"}\n')),(0,a.kt)("h2",{id:"53-create-two-file-observer-jobs"},"5.3: Create two File Observer jobs"),(0,a.kt)("p",null,"Log into the Event Manager UI, then navigate to: ",(0,a.kt)("strong",{parentName:"p"},"Administration \u2192 Topology\nConfiguration \u2192 Observer jobs \u2192 Configure")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If you can't find ",(0,a.kt)("inlineCode",{parentName:"p"},"Topology Configuration")," option from the UI, please ensure you\nhave enable the roles in\n",(0,a.kt)("a",{parentName:"p",href:"http://localhost:3000/waiops-tech-jam/labs/watson-aiops/installation/#27-locate-your-login-details-and-log-in-to-watson-for-aiops-event-manager"},"2.7 Locate your login details and log in to Watson for AIOps Event Manager"))),(0,a.kt)("p",null,"Click on Add a new job and then choose File \u2192 Configure to create a new File\nObserver job."),(0,a.kt)("p",null,"Input a label to call your new job - eg. Infrastructure - and upload files that\nyou created in step 5.2 - ie. infrastructure.txt and click Save:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(12636).Z,width:"766",height:"863"})),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The Provider will be automatically populated when you click Save.")),(0,a.kt)("p",null,"Repeat the process by creating a second File Observer job for the\napplications.txt file."),(0,a.kt)("p",null,"Each job will run the moment it is saved. After you have done this, your\nObserver jobs screen should look like the following:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(57957).Z,width:"509",height:"551"})),(0,a.kt)("p",null,"You can verify your jobs ran successfully by first seeing the green Ready light\non your job (above), and second by searching the topology for your newly added\nresources."),(0,a.kt)("p",null,"Choose Resource management from the left menu and search for WAIOpsDemo, which\nis the tag that all of your Resources in both your files were tagged with. You\nshould see nine results come back under the Resources tab:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(16037).Z,width:"1113",height:"698"})),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},'There are two resources in the list called "computer1000". One is from the\ntopology segment ingested from the infrastructure.txt file and the other one is\nfrom the topology segment ingested from the application.txt file. We will be\nmerging these two Resources together shortly, via a Merge Rule.')),(0,a.kt)("p",null,"Click on ",(0,a.kt)("strong",{parentName:"p"},"router1")," and it will open the topology view. Increase the number of\nhops to 2 and click ",(0,a.kt)("strong",{parentName:"p"},"Render")," and you should see something like the following:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(53880).Z,width:"1125",height:"1006"})),(0,a.kt)("p",null,"You can click Back on your browser window and click on one of the other\nResources ingested via the Applications job - eg. billing. You will see a\nrepresentation of the topology segment created by ingesting that file."),(0,a.kt)("p",null,"You are now ready to perform the final step, that being to create a Merge Rule\nto tie the two topology segments together via the common resource."),(0,a.kt)("h2",{id:"54-create-a-merge-rule-to-tie-the-topology-together"},"5.4: Create a Merge Rule to tie the topology together"),(0,a.kt)("p",null,'This final step is where the topology data coming from the application topology\nsource is mapped onto the topology data coming from the infrastructure\norchestration topology source. In our hypothetical scenario, we know we have\nResources of type "computer" in both sets of topology, and we know that they\nrelate to the same servers. Corresponding instances across the two data sets are\nalso labelled consistently and correctly, meaning that identifying the same\nResource across the two data sets is possible.'),(0,a.kt)("p",null,'In our case, we have a Resource called "computer1000" represented in our\ninfrastructure topology data as well as in our application data. Our goal is to\nmerge the two sets of topology together so that we can both visualise what\napplications are running on our servers, and more importantly, correlate\nhardware alarms with application alarms, something that is not possible\notherwise. Note that the rule is created in a generic way so that if there were\nany other computers included in our two data sets, they too would be merged\ntogether automatically, so long as they met the criteria set out in the rule.'),(0,a.kt)("p",null,"Navigate to ",(0,a.kt)("strong",{parentName:"p"},"Administration \u2192 Topology Configuration -> Rules")," and click on\nNew to create a new Merge Rule."),(0,a.kt)("p",null,"Use the following to create your new Merge Rule:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Rule name:")," Give your rule a name - eg: ",(0,a.kt)("strong",{parentName:"p"},"InfrastructureApplications"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Set ",(0,a.kt)("strong",{parentName:"p"},"Status")," to ",(0,a.kt)("strong",{parentName:"p"},"Enabled"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Tokens"),': The tokens refer to the parameters in your Resources that will be\ncompared. In our case, the parameter that stores the computer name is called\n"name" in both sets of data, so we just need one token entry here called\n',(0,a.kt)("strong",{parentName:"p"},"name")," therefore. If the parameters were named different things, you could\nsimply add both of the parameter names here.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Expand the ",(0,a.kt)("strong",{parentName:"p"},"Conditions")," drop-down.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Observers"),": Add ",(0,a.kt)("strong",{parentName:"p"},"File")," to the list of Observers this rule should apply\nto. Since both job types are of type File, this is all that is needed in this\ncase. Normally you would add all the Observer types that apply to your\nmapping. If this section was left empty, it would try to apply this rule to\ntopology data coming from all Observer types.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Providers"),": Add both of your jobs to the list - ie.\n",(0,a.kt)("strong",{parentName:"p"},"FILE.OBSERVER:infrastructure.txt")," and ",(0,a.kt)("strong",{parentName:"p"},"FILE.OBSERVER:application.txt"),".\nThis specifies that this rule should only apply to these particular jobs. If\nthis section was left empty, it would try to apply this rule to topology data\ncoming from all jobs specified in the Observers list above.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Resource types"),": Add the Resource types that this rule should apply to -\nie. ",(0,a.kt)("strong",{parentName:"p"},"computer"),". If this section was left empty, it would try to apply this\nrule to all Resource types in the Observers list and Providers list above.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("strong",{parentName:"p"},"Token filter mode")," and ",(0,a.kt)("strong",{parentName:"p"},"Token")," filters sections allow you to refine\nyour rule mapping even further, by allowing you to specify regular expressions\nto either include or exclude the set of Resources from the rule. In this case,\nwe will leave both of these sections blank."))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"It is good practice to specify an appropriate set of Conditions for your rules,\nto ensure they only get applied to things they're meant to.")),(0,a.kt)("p",null,"When finished creating your new Merge Rule, click Save and return to the\nObserver jobs page: Administration \u2192 Topology Configuration \u2192 Observer jobs."),(0,a.kt)("p",null,"Click on the Run (Play button icon) to run your two jobs again. The data will be\nreprocessed in light of the new rule information, and any Resources that match\nthe rule will have the merge operation made against them."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The merge will not happen unless the affected jobs are re-run.")),(0,a.kt)("p",null,"To verify the merge was successful, navigate back to Resource management from\nthe left menu, but this time search for ",(0,a.kt)("strong",{parentName:"p"},"computer1000"),". This time you will see\njust one instance in the list of Resources called computer1000 whereas before\nyou would have seen two. Click on ",(0,a.kt)("strong",{parentName:"p"},"computer1000"),", change the hop view to ",(0,a.kt)("strong",{parentName:"p"},"2"),"\nand click ",(0,a.kt)("strong",{parentName:"p"},"Render"),". You should see something like the following, showing the\ncombined topology segments:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(39815).Z,width:"1125",height:"1006"})),(0,a.kt)("p",null,"The Resource computer1000 is only shown once in the topology, but remains\nconnected to all the resources it was connected to in both sets of topology\ndata, prior to the merge. The Merge Rule has effectively merged the two sets of\ntopology together, by merging the common Resources, according to the rule that\nwe defined."),(0,a.kt)("p",null,'You have now completed this module and are ready for next module "Configure\ntopology templates".'),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://community.ibm.com/community/user/aiops/blogs/zane-bray1/2022/04/25/getting-started-with-watson-aiops-event-manager-47"},"Reference Blog"))))}u.isMDXComponent=!0},39815:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/computer-7213a2021da528d0a2cf560faa20ee8e.png"},76940:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/end-to-end-topology-e9789e9c22bebcfb9720f96ac815e7c8.png"},12636:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/infrajob-00b74fb30f139c893fc3a88793073a47.png"},57957:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/observers-e4c543904db95717f0f22dd6e10deccc.png"},16037:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/resources-28d3e922eabee2d0821f1f3a194d1442.png"},53880:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/router-3a1857c3b8368e060b74c7067e9edc89.png"}}]);