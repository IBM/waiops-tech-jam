{"componentChunkName":"component---src-pages-tutorials-turbonomic-kubeturbo-index-mdx","path":"/tutorials/turbonomic/kubeturbo/","result":{"pageContext":{"frontmatter":{"title":"5 - Kubernetes Data Target","description":"Deployment of Kubeturbo"},"relativePagePath":"/tutorials/turbonomic/kubeturbo/index.mdx","titleType":"page","MdxNode":{"id":"9006df39-2609-57b2-a67f-b762558e493d","children":[],"parent":"a70a81b2-6224-5fa9-9788-ff716bb246b3","internal":{"content":"---\ntitle: 5 - Kubernetes Data Target\ndescription: Deployment of Kubeturbo\n---\n\n<AnchorLinks>\n  <AnchorLink>4-1: Introduction</AnchorLink>\n  <AnchorLink>4-1: Prerequisites</AnchorLink>\n  <AnchorLink>4-2: Deploy the Operator</AnchorLink>\n  <AnchorLink>4-3: Configure KubeTurbo Instance</AnchorLink>\n  <AnchorLink>4-4: Validate Deployment</AnchorLink>\n</AnchorLinks>\n\n---\n\n## 5-1: Introduction\n\n---\n\n## 4-1: Prerequisites\n\n1. As a cluster administrator, create a project in the OCP cluster where KubeTurbo will be deployed.\n\n![](images/arch-1.png)\n\nNavigate to `Home -> Projects` and click on `Create Project` button. Fill in details as below.\n\n- Name: `kubeturbo-operator`\n- Display Name: `Operator Hub based deployment of kubeturbo`\n\n![](https://raw.githubusercontent.com/evat-pm/images/master/KOH-createProject.png?raw=true)\n\n2. Click on `Create` button.\n\n---\n\n## 4-2: Deploy the Operator\n\n1. Click on `Operators -> OperatorHub`. Ensure the `kubeturbo-operator` project is selected in the dropdown.\n\n2. Search for `kubeturbo` keyword and select `Certified` KubeTurbo operator (note, do not use Community edition)\n\n![](images/searchKubeturboCertified.png)\n\n3. Select and click on `Install` button.\n\n![](images/kubeturboInstall-1.png)\n\n4. Select options as below. Set `Update approval` as `Manual`. Automatic update is not recommended if you are not also automatically updating the Turbo Server. Click on `Install` button\n\n![](images/kubeturboInstall-2.png)\n\n5. Click on `Approve` button when `Manual approval required` prompted.\n\n![](images/kubeturboInstall-3.png)\n\n6. The operator will install and when it's ready you can view the operator (Click on `View Operator`) to create an instance, which will be your KubeTurbo probe that will monitor and manage this cluster.\n\n![](images/kubeturboInstall-4.png)\n\n---\n\n## 4-3: Configure Kubeturbo Instance\n\n1. When viewing the deployed operator, click on `Create instance`:\n\n![](images/kubeturboCreateInstance-1.png)\n\n2. To configure this instance click on `YAML` option.\n\nRefer to [Configure KubeTurbo Instance](https://github.com/turbonomic/kubeturbo/wiki/OpenShift-Operator-Hub-Details#configure-a-kubeturbo-instance) if you want to use `FORM` option\n\n![](images/kubeturboCreateInstance-2.png)\n\n3. Replace all the contant in YAML editor view with the YAML config as below. **DO NOT CLICK CREATE YET!!**\n\n```\nkind: Kubeturbo\napiVersion: charts.helm.k8s.io/v1\nmetadata:\n  name: kubeturbo-release\n  namespace: kubeturbo-operator\nspec:\n  args:\n    sccsupport: '*'\n  image:\n    repository: registry.connect.redhat.com/turbonomic/kubeturbo\n    tag: <turbonomic server version>\n  restAPIConfig:\n    opsManagerPassword: <your turbonomic server password>\n    opsManagerUserName: <your turbonomic server username>\n  serverMeta:\n    turboServer: <your turbonomic server URL, please use the topology-processor URL>\n    version: <your turbonomic server version>\n  targetConfig:\n    targetName: <your cluster name>\n```\n\n![](images/kubeTurboCreateInstance-3.png)\n\n4. Now, we need to replace `<your turbonomic server URL, please use the topology-processor URL>` with the actual turbonomic server URL.\n\n**How to get the Turbonomic Server URL?**\n\nGo to the OCP cluster where turbonomic is installed.\n![](images/arch-2.png)\n\nNavigate to `Networking -> Routes` and select `turbonomic` project. Copy the `Location` in `topology-processor`.\n\n![](images/turboTopologyProcessorRoute.png)\n\nGo back to your YAML editor view in Step 3 earlier. Assign it to `turboServer` value.\n\n![](images/kubeturboCreateInstance-4.png)\n\n5. Next, replace the `<your turbonomic server version>` with the actual turbonomic server version.\n\n**How to get the Turbonomic Server Version?**\n\nGo back to the OCP cluster where turbonomic is installed.\n![](images/arch-2.png)\n\nNavigate to `Networking -> Routes` and select `turbonomic` project. Click on the `Location` in `api`.\n\n![](images/turboApiRoute.png)\n\nIt will bring up the Turbonomic UI page as below. Check the version in the page.\n\n![](images/checkTurboVersion.png)\n\nGo back to your YAML editor view in Step 3 earlier. Assign it to\n\n- `image` -> `tag` value\n- `serverMeta` -> `version` value\n\n![](images/kubeturboCreateInstance-5.png)\n\n6. Then replace the values of `<your turbonomic server password>` and `<your turbonomic server username>` with the credentials that you have used to login Turbonomic UI in Section 2.5 earlier.\n\n![](images/kubeturboCreateInstance-6.png)\n\n7. Then set a cluster name for the `targetName`, e.g. `manage-to-kubeturbo-cluster`. Then click on `Create` button\n\n![](images/kubeturboCreateInstance-7.png)\n\n8. When you have applied your configuration you will see that you have created an instance, or custom resource, called `kubeturbo-release`:\n\n![](images/kubeturboCreateInstance-8.png)\n\n---\n\n## 4-4: Validate Deployment\n\n1. You will now see two deployments and two running pods in the namespace. One is the operator, and the other is the Kubeturbo probe (release)\n\nNavigate to `Workloads -> Pods` and select `kubeturbo-operator` project:\n\n![](https://raw.githubusercontent.com/evat-pm/images/master/KOH-runningPods.png?raw=true)\n\nNavigate to `Workloads -> Deployment` and select `kubeturbo-operator` project:\n\n![Kubeturbo validate deployments](https://raw.githubusercontent.com/evat-pm/images/master/KOH-deployments.png?raw=true)\n\n2. Navigate to `Workloads -> Pods`. Ensure project is `kubeturbo-operator`. Then click on `kubeturbo-release` pod.\n\n![](images/validateDeployment-1.png)\n\n3. Then click on `Logs` to validate that the probe has successfully connected, registered with the Turbo Server, and a full discovery has occurred.\n\n![](images/validateDeployment-2.png)\n\n4. Validate the target in the Turbonomic Server UI\n\nGo to your Turbonomic Server UI -> `Settings` -> `Target Configuration` and you will see a new target display with the name `Kubernetes-<your cluster name>`\n\n![](./images/validateDeployment-3.png)\n\n---\n\n## 4-5: Summary\n\nIn this portion of the lab, you have learned how to install KubeTurbo in the target cluster which communicates with the remote Turbonomic Server. Navigate to the next section 5 to integrate Turbonomic to Instana.\n\n---\n","type":"Mdx","contentDigest":"0d8fb6a90860d5eb2f4cebb6cea2e25c","owner":"gatsby-plugin-mdx","counter":2634},"frontmatter":{"title":"5 - Kubernetes Data Target","description":"Deployment of Kubeturbo"},"exports":{},"rawBody":"---\ntitle: 5 - Kubernetes Data Target\ndescription: Deployment of Kubeturbo\n---\n\n<AnchorLinks>\n  <AnchorLink>4-1: Introduction</AnchorLink>\n  <AnchorLink>4-1: Prerequisites</AnchorLink>\n  <AnchorLink>4-2: Deploy the Operator</AnchorLink>\n  <AnchorLink>4-3: Configure KubeTurbo Instance</AnchorLink>\n  <AnchorLink>4-4: Validate Deployment</AnchorLink>\n</AnchorLinks>\n\n---\n\n## 5-1: Introduction\n\n---\n\n## 4-1: Prerequisites\n\n1. As a cluster administrator, create a project in the OCP cluster where KubeTurbo will be deployed.\n\n![](images/arch-1.png)\n\nNavigate to `Home -> Projects` and click on `Create Project` button. Fill in details as below.\n\n- Name: `kubeturbo-operator`\n- Display Name: `Operator Hub based deployment of kubeturbo`\n\n![](https://raw.githubusercontent.com/evat-pm/images/master/KOH-createProject.png?raw=true)\n\n2. Click on `Create` button.\n\n---\n\n## 4-2: Deploy the Operator\n\n1. Click on `Operators -> OperatorHub`. Ensure the `kubeturbo-operator` project is selected in the dropdown.\n\n2. Search for `kubeturbo` keyword and select `Certified` KubeTurbo operator (note, do not use Community edition)\n\n![](images/searchKubeturboCertified.png)\n\n3. Select and click on `Install` button.\n\n![](images/kubeturboInstall-1.png)\n\n4. Select options as below. Set `Update approval` as `Manual`. Automatic update is not recommended if you are not also automatically updating the Turbo Server. Click on `Install` button\n\n![](images/kubeturboInstall-2.png)\n\n5. Click on `Approve` button when `Manual approval required` prompted.\n\n![](images/kubeturboInstall-3.png)\n\n6. The operator will install and when it's ready you can view the operator (Click on `View Operator`) to create an instance, which will be your KubeTurbo probe that will monitor and manage this cluster.\n\n![](images/kubeturboInstall-4.png)\n\n---\n\n## 4-3: Configure Kubeturbo Instance\n\n1. When viewing the deployed operator, click on `Create instance`:\n\n![](images/kubeturboCreateInstance-1.png)\n\n2. To configure this instance click on `YAML` option.\n\nRefer to [Configure KubeTurbo Instance](https://github.com/turbonomic/kubeturbo/wiki/OpenShift-Operator-Hub-Details#configure-a-kubeturbo-instance) if you want to use `FORM` option\n\n![](images/kubeturboCreateInstance-2.png)\n\n3. Replace all the contant in YAML editor view with the YAML config as below. **DO NOT CLICK CREATE YET!!**\n\n```\nkind: Kubeturbo\napiVersion: charts.helm.k8s.io/v1\nmetadata:\n  name: kubeturbo-release\n  namespace: kubeturbo-operator\nspec:\n  args:\n    sccsupport: '*'\n  image:\n    repository: registry.connect.redhat.com/turbonomic/kubeturbo\n    tag: <turbonomic server version>\n  restAPIConfig:\n    opsManagerPassword: <your turbonomic server password>\n    opsManagerUserName: <your turbonomic server username>\n  serverMeta:\n    turboServer: <your turbonomic server URL, please use the topology-processor URL>\n    version: <your turbonomic server version>\n  targetConfig:\n    targetName: <your cluster name>\n```\n\n![](images/kubeTurboCreateInstance-3.png)\n\n4. Now, we need to replace `<your turbonomic server URL, please use the topology-processor URL>` with the actual turbonomic server URL.\n\n**How to get the Turbonomic Server URL?**\n\nGo to the OCP cluster where turbonomic is installed.\n![](images/arch-2.png)\n\nNavigate to `Networking -> Routes` and select `turbonomic` project. Copy the `Location` in `topology-processor`.\n\n![](images/turboTopologyProcessorRoute.png)\n\nGo back to your YAML editor view in Step 3 earlier. Assign it to `turboServer` value.\n\n![](images/kubeturboCreateInstance-4.png)\n\n5. Next, replace the `<your turbonomic server version>` with the actual turbonomic server version.\n\n**How to get the Turbonomic Server Version?**\n\nGo back to the OCP cluster where turbonomic is installed.\n![](images/arch-2.png)\n\nNavigate to `Networking -> Routes` and select `turbonomic` project. Click on the `Location` in `api`.\n\n![](images/turboApiRoute.png)\n\nIt will bring up the Turbonomic UI page as below. Check the version in the page.\n\n![](images/checkTurboVersion.png)\n\nGo back to your YAML editor view in Step 3 earlier. Assign it to\n\n- `image` -> `tag` value\n- `serverMeta` -> `version` value\n\n![](images/kubeturboCreateInstance-5.png)\n\n6. Then replace the values of `<your turbonomic server password>` and `<your turbonomic server username>` with the credentials that you have used to login Turbonomic UI in Section 2.5 earlier.\n\n![](images/kubeturboCreateInstance-6.png)\n\n7. Then set a cluster name for the `targetName`, e.g. `manage-to-kubeturbo-cluster`. Then click on `Create` button\n\n![](images/kubeturboCreateInstance-7.png)\n\n8. When you have applied your configuration you will see that you have created an instance, or custom resource, called `kubeturbo-release`:\n\n![](images/kubeturboCreateInstance-8.png)\n\n---\n\n## 4-4: Validate Deployment\n\n1. You will now see two deployments and two running pods in the namespace. One is the operator, and the other is the Kubeturbo probe (release)\n\nNavigate to `Workloads -> Pods` and select `kubeturbo-operator` project:\n\n![](https://raw.githubusercontent.com/evat-pm/images/master/KOH-runningPods.png?raw=true)\n\nNavigate to `Workloads -> Deployment` and select `kubeturbo-operator` project:\n\n![Kubeturbo validate deployments](https://raw.githubusercontent.com/evat-pm/images/master/KOH-deployments.png?raw=true)\n\n2. Navigate to `Workloads -> Pods`. Ensure project is `kubeturbo-operator`. Then click on `kubeturbo-release` pod.\n\n![](images/validateDeployment-1.png)\n\n3. Then click on `Logs` to validate that the probe has successfully connected, registered with the Turbo Server, and a full discovery has occurred.\n\n![](images/validateDeployment-2.png)\n\n4. Validate the target in the Turbonomic Server UI\n\nGo to your Turbonomic Server UI -> `Settings` -> `Target Configuration` and you will see a new target display with the name `Kubernetes-<your cluster name>`\n\n![](./images/validateDeployment-3.png)\n\n---\n\n## 4-5: Summary\n\nIn this portion of the lab, you have learned how to install KubeTurbo in the target cluster which communicates with the remote Turbonomic Server. Navigate to the next section 5 to integrate Turbonomic to Instana.\n\n---\n","fileAbsolutePath":"/home/amar/workspace/git-repos/github.com/IBM/waiops-tech-jam/src/pages/tutorials/turbonomic/kubeturbo/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}