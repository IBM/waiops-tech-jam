{"componentChunkName":"component---src-pages-tutorials-turbonomic-kubeturbo-index-mdx","path":"/tutorials/turbonomic/kubeturbo/","result":{"pageContext":{"frontmatter":{"title":"5 - Kubernetes Data Target","description":"Deployment of Kubeturbo"},"relativePagePath":"/tutorials/turbonomic/kubeturbo/index.mdx","titleType":"page","MdxNode":{"id":"2c742e44-db0e-56d6-a555-61a09d9a1add","children":[],"parent":"01df0e7f-c8f5-53df-81d5-3b7e9fa5814b","internal":{"content":"---\r\ntitle: 5 - Kubernetes Data Target\r\ndescription: Deployment of Kubeturbo\r\n---\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>5-1: Introduction</AnchorLink>\r\n  <AnchorLink>5-1: Prerequisites</AnchorLink>\r\n  <AnchorLink>5-2: Deploy the Operator</AnchorLink>\r\n  <AnchorLink>5-3: Configure KubeTurbo Instance</AnchorLink>\r\n  <AnchorLink>5-4: Validate Deployment</AnchorLink>\r\n</AnchorLinks>\r\n\r\n---\r\n\r\n## 5-1: Introduction\r\n\r\nTurbonomic ARM is generally agentless and pulls data from configured targets\r\nusing APIs.\r\n\r\nThe exception to this is the Kubernetes platform. Since Kubernetes is highly\r\ncomplex and dynamic environment, an agent component is deployed onto target\r\nKubernetes and OpenShift cluster which then send data to the Turbonomic ARM\r\nserver.\r\n\r\nThe <a href=\"https://github.com/turbonomic/kubeturbo/wiki\" target=\"_blank\">\r\nkubeturbo GitHub wiki</a>\r\ncontains a wealth of information about installation, configuration, troubleshooting,\r\nand more.\r\n\r\nThe content of this section follows the recommended <a\r\nhref=\"https://github.com/turbonomic/kubeturbo/wiki/OpenShift-Operator-Hub-Details\" target=\"_blank\">OpenShift deployment</a>\r\nprocedure and provides contextual instruction in relation to the lab environment\r\nbeing built out within this site.\r\n\r\n---\r\n\r\n## 5-1: Prerequisites\r\n\r\nThe steps in this lab should be performed on the **manage-to** cluster:\r\n\r\n![](images/arch-1.png)\r\n\r\n1. In your browser, navigate to your **manage-to** OpenShift console:\r\n\r\n   > You can find and open your OpenShift console from the <a href=\"https://cloud.ibm.com/kubernetes/clusters?platformType=openshift\" target=\"_blank\">IBM Cloud clusters</a> page.\r\n\r\n1. As a cluster administrator, create a project in the OCP cluster where\r\n   KubeTurbo will be deployed:\r\n\r\n   1. Navigate to `Home -> Projects` and click on the `Create Project` button.\r\n   1. Fill in details as below:\r\n      - **Name**: `kubeturbo-operator`\r\n      - **Display Name**: `Operator Hub based deployment of kubeturbo`\r\n   1. Click the `Create` button.\r\n\r\n   ![](https://raw.githubusercontent.com/evat-pm/images/master/KOH-createProject.png?raw=true)\r\n\r\n---\r\n\r\n## 5-2: Deploy the Operator\r\n\r\n1. Click on `Operators -> OperatorHub`. Ensure the `kubeturbo-operator` project\r\n   is selected in the dropdown.\r\n\r\n1. Search for `kubeturbo` and select the `Certified` KubeTurbo operator:\r\n\r\n   > **Note:** Do not use Community edition.\r\n\r\n   ![](images/searchKubeturboCertified.png)\r\n\r\n1. Select and click on the `Install` button:\r\n\r\n   ![](images/kubeturboInstall-1.png)\r\n\r\n1. Select options as below:\r\n\r\n   - Set `Update approval` as `Manual`:\r\n\r\n     - **Automatic update is not recommended if you are not also automatically\r\n       updating the Turbonomic Server.**\r\n     - Click the `Install` button.\r\n\r\n   ![](images/kubeturboInstall-2.png)\r\n\r\n1. Click on the `Approve` button when the `Manual approval required` prompt\r\n   appears:\r\n\r\n   ![](images/kubeturboInstall-3.png)\r\n\r\n1. The operator will install and when it's ready you can view the operator\r\n   (Click on `View Operator`) to create an instance, which will be your\r\n   KubeTurbo agent (or probe) that will monitor and manage this cluster:\r\n\r\n   ![](images/kubeturboInstall-4.png)\r\n\r\n---\r\n\r\n## 5-3: Configure Kubeturbo Instance\r\n\r\n1. When viewing the deployed operator, click on `Create instance`:\r\n\r\n   ![](images/kubeturboCreateInstance-1.png)\r\n\r\n1. To configure this instance click on the `YAML view` option:\r\n\r\n   > **Note:** Refer to <a href=\"https://github.com/turbonomic/kubeturbo/wiki/OpenShift-Operator-Hub-Details#configure-a-kubeturbo-instance\" target=\"_blank\">Configure KubeTurbo Instance</a> for\r\n   > more information on the `Form view` option.\r\n   > **For this lab, use the `YAML view` option**.\r\n\r\n   ![](images/kubeturboCreateInstance-2.png)\r\n\r\n1. Replace all the content in the YAML editor view with the YAML config below,\r\n   but **DO NOT CLICK CREATE YET!!**\r\n\r\n   ```\r\n   kind: Kubeturbo\r\n   apiVersion: charts.helm.k8s.io/v1\r\n   metadata:\r\n     name: kubeturbo-release\r\n     namespace: kubeturbo-operator\r\n   spec:\r\n     args:\r\n       sccsupport: '*'\r\n     image:\r\n       repository: registry.connect.redhat.com/turbonomic/kubeturbo\r\n       tag: <turbonomic server version>\r\n     restAPIConfig:\r\n       opsManagerPassword: <your turbonomic server password>\r\n       opsManagerUserName: <your turbonomic server username>\r\n     serverMeta:\r\n       turboServer: <your turbonomic server URL, please use the topology-processor URL>\r\n       version: <your turbonomic server version>\r\n     targetConfig:\r\n       targetName: <your cluster name>\r\n   ```\r\n\r\n   ![](images/kubeturboCreateInstance-3.png)\r\n\r\n1. Now, replace the text\r\n   `<your turbonomic server URL, please use the topology-processor URL>` with\r\n   the actual turbonomic server URL:\r\n\r\n   **How to get the Turbonomic Server URL:**\r\n\r\n   1. Go to the **manage-from** OCP cluster console, where turbonomic is\r\n      installed **in another browser tab**:\r\n\r\n      ![](images/arch-2.png)\r\n\r\n   1. Navigate to `Networking -> Routes`, select the `turbonomic` project and\r\n      copy the `Location` for `topology-processor`:\r\n\r\n      ![](images/turboTopologyProcessorRoute.png)\r\n\r\n   1. Go back to your YAML editor view in Step 3 earlier. Assign it as the\r\n      `turboServer` value:\r\n\r\n      ![](images/kubeturboCreateInstance-4.png)\r\n\r\n1. Next, replace the text `<your turbonomic server version>` with the actual\r\n   turbonomic server version:\r\n\r\n   **How to get the Turbonomic Server Version?**\r\n\r\n   1. Go back to the **manage-from** OCP cluster where turbonomic is installed:\r\n\r\n      ![](images/arch-2.png)\r\n\r\n   1. Navigate to `Networking -> Routes`, select the `turbonomic` project and\r\n      copy the `Location` value for the `api` route:\r\n\r\n      ![](images/turboApiRoute.png)\r\n\r\n   1. It will bring up the Turbonomic UI page as below. Check the version\r\n      listed at the bottom of the page.\r\n\r\n      ![](images/checkTurboVersion.png)\r\n\r\n   1. Go back to your YAML editor view in Step 3 earlier. Assign the value to:\r\n\r\n      - `image` -> `tag` value\r\n      - `serverMeta` -> `version` value\r\n\r\n      ![](images/kubeturboCreateInstance-5.png)\r\n\r\n1. Next, replace the values of `<your turbonomic server password>` and\r\n   `<your turbonomic server username>` with the credentials that you have used\r\n   to log into the Turbonomic UI:\r\n\r\n   ![](images/kubeturboCreateInstance-6.png)\r\n\r\n1. Then set a cluster name for the `targetName`, e.g.\r\n\r\n   - `manage-to-kubeturbo-cluster`.\r\n\r\n1. Finally, click on the `Create` button.\r\n\r\n   ![](images/kubeturboCreateInstance-7.png)\r\n\r\n1. When you have applied your configuration you will see that you have created\r\n   an instance, or custom resource, called `kubeturbo-release`:\r\n\r\n   ![](images/kubeturboCreateInstance-8.png)\r\n\r\n---\r\n\r\n## 5-4: Validate Deployment\r\n\r\nYou should now see two deployments and two running pods in the namespace:\r\n\r\n- One is the operator\r\n- The other is the Kubeturbo probe (release)\r\n\r\n1. On your **manage-to** cluster, navigate to `Workloads -> Deployment` and\r\n   select the `kubeturbo-operator` project:\r\n\r\n   ![Kubeturbo validate deployments](https://raw.githubusercontent.com/evat-pm/images/master/KOH-deployments.png?raw=true)\r\n\r\n1. Navigate to `Workloads -> Pods` and select the\r\n   `kubeturbo-operator` project:\r\n\r\n   ![](https://raw.githubusercontent.com/evat-pm/images/master/KOH-runningPods.png?raw=true)\r\n\r\n1. Then click on the `kubeturbo-release` pod.\r\n\r\n   ![](images/validateDeployment-1.png)\r\n\r\n1. Then click on `Logs` to validate that the probe has successfully connected,\r\n   registered with the Turbo Server, and a full discovery has occurred:\r\n\r\n   ![](images/validateDeployment-2.png)\r\n\r\n1. Validate the target in the Turbonomic Server UI\r\n\r\n   - Go to your Turbonomic Server UI -> `Settings` -> `Target Configuration`\r\n     and you will see a new target listed with the name\r\n     `Kubernetes-<your cluster name>`\r\n\r\n     ![](./images/validateDeployment-3.png)\r\n\r\n---\r\n\r\n## 5-5: Summary\r\n\r\nIn this portion of the lab, you have learned how to install the KubeTurbo agent\r\nor probe in a target cluster, which communicates with the remote Turbonomic\r\nserver.\r\n\r\nNavigate to the next section to configure a policy for your business application.\r\n\r\n---\r\n","type":"Mdx","contentDigest":"1d7670ac388d3e2135a19c2e6b4381d2","owner":"gatsby-plugin-mdx","counter":1065},"frontmatter":{"title":"5 - Kubernetes Data Target","description":"Deployment of Kubeturbo"},"exports":{},"rawBody":"---\r\ntitle: 5 - Kubernetes Data Target\r\ndescription: Deployment of Kubeturbo\r\n---\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>5-1: Introduction</AnchorLink>\r\n  <AnchorLink>5-1: Prerequisites</AnchorLink>\r\n  <AnchorLink>5-2: Deploy the Operator</AnchorLink>\r\n  <AnchorLink>5-3: Configure KubeTurbo Instance</AnchorLink>\r\n  <AnchorLink>5-4: Validate Deployment</AnchorLink>\r\n</AnchorLinks>\r\n\r\n---\r\n\r\n## 5-1: Introduction\r\n\r\nTurbonomic ARM is generally agentless and pulls data from configured targets\r\nusing APIs.\r\n\r\nThe exception to this is the Kubernetes platform. Since Kubernetes is highly\r\ncomplex and dynamic environment, an agent component is deployed onto target\r\nKubernetes and OpenShift cluster which then send data to the Turbonomic ARM\r\nserver.\r\n\r\nThe <a href=\"https://github.com/turbonomic/kubeturbo/wiki\" target=\"_blank\">\r\nkubeturbo GitHub wiki</a>\r\ncontains a wealth of information about installation, configuration, troubleshooting,\r\nand more.\r\n\r\nThe content of this section follows the recommended <a\r\nhref=\"https://github.com/turbonomic/kubeturbo/wiki/OpenShift-Operator-Hub-Details\" target=\"_blank\">OpenShift deployment</a>\r\nprocedure and provides contextual instruction in relation to the lab environment\r\nbeing built out within this site.\r\n\r\n---\r\n\r\n## 5-1: Prerequisites\r\n\r\nThe steps in this lab should be performed on the **manage-to** cluster:\r\n\r\n![](images/arch-1.png)\r\n\r\n1. In your browser, navigate to your **manage-to** OpenShift console:\r\n\r\n   > You can find and open your OpenShift console from the <a href=\"https://cloud.ibm.com/kubernetes/clusters?platformType=openshift\" target=\"_blank\">IBM Cloud clusters</a> page.\r\n\r\n1. As a cluster administrator, create a project in the OCP cluster where\r\n   KubeTurbo will be deployed:\r\n\r\n   1. Navigate to `Home -> Projects` and click on the `Create Project` button.\r\n   1. Fill in details as below:\r\n      - **Name**: `kubeturbo-operator`\r\n      - **Display Name**: `Operator Hub based deployment of kubeturbo`\r\n   1. Click the `Create` button.\r\n\r\n   ![](https://raw.githubusercontent.com/evat-pm/images/master/KOH-createProject.png?raw=true)\r\n\r\n---\r\n\r\n## 5-2: Deploy the Operator\r\n\r\n1. Click on `Operators -> OperatorHub`. Ensure the `kubeturbo-operator` project\r\n   is selected in the dropdown.\r\n\r\n1. Search for `kubeturbo` and select the `Certified` KubeTurbo operator:\r\n\r\n   > **Note:** Do not use Community edition.\r\n\r\n   ![](images/searchKubeturboCertified.png)\r\n\r\n1. Select and click on the `Install` button:\r\n\r\n   ![](images/kubeturboInstall-1.png)\r\n\r\n1. Select options as below:\r\n\r\n   - Set `Update approval` as `Manual`:\r\n\r\n     - **Automatic update is not recommended if you are not also automatically\r\n       updating the Turbonomic Server.**\r\n     - Click the `Install` button.\r\n\r\n   ![](images/kubeturboInstall-2.png)\r\n\r\n1. Click on the `Approve` button when the `Manual approval required` prompt\r\n   appears:\r\n\r\n   ![](images/kubeturboInstall-3.png)\r\n\r\n1. The operator will install and when it's ready you can view the operator\r\n   (Click on `View Operator`) to create an instance, which will be your\r\n   KubeTurbo agent (or probe) that will monitor and manage this cluster:\r\n\r\n   ![](images/kubeturboInstall-4.png)\r\n\r\n---\r\n\r\n## 5-3: Configure Kubeturbo Instance\r\n\r\n1. When viewing the deployed operator, click on `Create instance`:\r\n\r\n   ![](images/kubeturboCreateInstance-1.png)\r\n\r\n1. To configure this instance click on the `YAML view` option:\r\n\r\n   > **Note:** Refer to <a href=\"https://github.com/turbonomic/kubeturbo/wiki/OpenShift-Operator-Hub-Details#configure-a-kubeturbo-instance\" target=\"_blank\">Configure KubeTurbo Instance</a> for\r\n   > more information on the `Form view` option.\r\n   > **For this lab, use the `YAML view` option**.\r\n\r\n   ![](images/kubeturboCreateInstance-2.png)\r\n\r\n1. Replace all the content in the YAML editor view with the YAML config below,\r\n   but **DO NOT CLICK CREATE YET!!**\r\n\r\n   ```\r\n   kind: Kubeturbo\r\n   apiVersion: charts.helm.k8s.io/v1\r\n   metadata:\r\n     name: kubeturbo-release\r\n     namespace: kubeturbo-operator\r\n   spec:\r\n     args:\r\n       sccsupport: '*'\r\n     image:\r\n       repository: registry.connect.redhat.com/turbonomic/kubeturbo\r\n       tag: <turbonomic server version>\r\n     restAPIConfig:\r\n       opsManagerPassword: <your turbonomic server password>\r\n       opsManagerUserName: <your turbonomic server username>\r\n     serverMeta:\r\n       turboServer: <your turbonomic server URL, please use the topology-processor URL>\r\n       version: <your turbonomic server version>\r\n     targetConfig:\r\n       targetName: <your cluster name>\r\n   ```\r\n\r\n   ![](images/kubeturboCreateInstance-3.png)\r\n\r\n1. Now, replace the text\r\n   `<your turbonomic server URL, please use the topology-processor URL>` with\r\n   the actual turbonomic server URL:\r\n\r\n   **How to get the Turbonomic Server URL:**\r\n\r\n   1. Go to the **manage-from** OCP cluster console, where turbonomic is\r\n      installed **in another browser tab**:\r\n\r\n      ![](images/arch-2.png)\r\n\r\n   1. Navigate to `Networking -> Routes`, select the `turbonomic` project and\r\n      copy the `Location` for `topology-processor`:\r\n\r\n      ![](images/turboTopologyProcessorRoute.png)\r\n\r\n   1. Go back to your YAML editor view in Step 3 earlier. Assign it as the\r\n      `turboServer` value:\r\n\r\n      ![](images/kubeturboCreateInstance-4.png)\r\n\r\n1. Next, replace the text `<your turbonomic server version>` with the actual\r\n   turbonomic server version:\r\n\r\n   **How to get the Turbonomic Server Version?**\r\n\r\n   1. Go back to the **manage-from** OCP cluster where turbonomic is installed:\r\n\r\n      ![](images/arch-2.png)\r\n\r\n   1. Navigate to `Networking -> Routes`, select the `turbonomic` project and\r\n      copy the `Location` value for the `api` route:\r\n\r\n      ![](images/turboApiRoute.png)\r\n\r\n   1. It will bring up the Turbonomic UI page as below. Check the version\r\n      listed at the bottom of the page.\r\n\r\n      ![](images/checkTurboVersion.png)\r\n\r\n   1. Go back to your YAML editor view in Step 3 earlier. Assign the value to:\r\n\r\n      - `image` -> `tag` value\r\n      - `serverMeta` -> `version` value\r\n\r\n      ![](images/kubeturboCreateInstance-5.png)\r\n\r\n1. Next, replace the values of `<your turbonomic server password>` and\r\n   `<your turbonomic server username>` with the credentials that you have used\r\n   to log into the Turbonomic UI:\r\n\r\n   ![](images/kubeturboCreateInstance-6.png)\r\n\r\n1. Then set a cluster name for the `targetName`, e.g.\r\n\r\n   - `manage-to-kubeturbo-cluster`.\r\n\r\n1. Finally, click on the `Create` button.\r\n\r\n   ![](images/kubeturboCreateInstance-7.png)\r\n\r\n1. When you have applied your configuration you will see that you have created\r\n   an instance, or custom resource, called `kubeturbo-release`:\r\n\r\n   ![](images/kubeturboCreateInstance-8.png)\r\n\r\n---\r\n\r\n## 5-4: Validate Deployment\r\n\r\nYou should now see two deployments and two running pods in the namespace:\r\n\r\n- One is the operator\r\n- The other is the Kubeturbo probe (release)\r\n\r\n1. On your **manage-to** cluster, navigate to `Workloads -> Deployment` and\r\n   select the `kubeturbo-operator` project:\r\n\r\n   ![Kubeturbo validate deployments](https://raw.githubusercontent.com/evat-pm/images/master/KOH-deployments.png?raw=true)\r\n\r\n1. Navigate to `Workloads -> Pods` and select the\r\n   `kubeturbo-operator` project:\r\n\r\n   ![](https://raw.githubusercontent.com/evat-pm/images/master/KOH-runningPods.png?raw=true)\r\n\r\n1. Then click on the `kubeturbo-release` pod.\r\n\r\n   ![](images/validateDeployment-1.png)\r\n\r\n1. Then click on `Logs` to validate that the probe has successfully connected,\r\n   registered with the Turbo Server, and a full discovery has occurred:\r\n\r\n   ![](images/validateDeployment-2.png)\r\n\r\n1. Validate the target in the Turbonomic Server UI\r\n\r\n   - Go to your Turbonomic Server UI -> `Settings` -> `Target Configuration`\r\n     and you will see a new target listed with the name\r\n     `Kubernetes-<your cluster name>`\r\n\r\n     ![](./images/validateDeployment-3.png)\r\n\r\n---\r\n\r\n## 5-5: Summary\r\n\r\nIn this portion of the lab, you have learned how to install the KubeTurbo agent\r\nor probe in a target cluster, which communicates with the remote Turbonomic\r\nserver.\r\n\r\nNavigate to the next section to configure a policy for your business application.\r\n\r\n---\r\n","fileAbsolutePath":"C:/Users/103537778/git/waiops-tech-jam/src/pages/tutorials/turbonomic/kubeturbo/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}