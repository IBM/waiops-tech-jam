{"componentChunkName":"component---src-pages-tutorials-instana-bee-travels-index-mdx","path":"/tutorials/instana/bee-travels/","result":{"pageContext":{"frontmatter":{"title":"Install the Bee Travels Application and Setup Website Monitoring","description":"Install the Bee Travels Application and Setup Website Monitoring"},"relativePagePath":"/tutorials/instana/bee-travels/index.mdx","titleType":"page","MdxNode":{"id":"8130349f-d355-5d1a-880b-1279ddcc707e","children":[],"parent":"e4ca493c-2ca5-5a68-8e90-bc352e0db607","internal":{"content":"---\ntitle: Install the Bee Travels Application and Setup Website Monitoring\ndescription: Install the Bee Travels Application and Setup Website Monitoring\n---\n\n<AnchorLinks>\n  <AnchorLink>3-1: Introduction</AnchorLink>\n  <AnchorLink>3-2: Create Website Within Instana</AnchorLink>\n  <AnchorLink>3-3: Install Bee Travels</AnchorLink>\n  <AnchorLink>3-4: Automated Load</AnchorLink>\n  <AnchorLink>3-5: Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n\n## 3-1:  Introduction\n\nIn this portion of the lab, you will be installing the **Bee Travels** application.   **Bee Travels** is a microservices based travel agency application that runs in OpenShift.  As part of the installation, you will learn how to add **Website Monitoring** into the application.  This will add javascript injection into the web pages so that you can capture **End User Experience (EUM)** / **Real User Monitoring (RUM)** data from the end users that are accessing the web pages.\n\n![](images/bee-travels.png)\n\nThe **Bee Travels** GitHub repository that you will be using was cloned from the official GitHub location that can be found here:  https://github.com/bee-travels.  You'll find additional information about **Bee Travels** at that site.  The application was modified slightly to work in the environment where your application will be installed.\n\n***\n\n## 3-2:  Create Website Within Instana\nIf you want to capture EUM/RUM data within Instana, you must first create a website within the GUI (or via API).  Open the Instana GUI within your browser. \n\nOn left side navigation, select **Websites & Mobile Apps**. You'll see a dialog where you can entire a Website Name.  Enter **Bee Travels** as the website name.  Then, click the **Add Website** button.\n\n![](images/addWebsite.png)\n\nA dialog containing **javascript** will open.  You can either copy the **javascript** or leave this dialog open so that we can use it later.  The javascript is used for **javascript injection** to gather the EUM/RUM data from the end users that access the Bee Travels application.  This **javascript** must be added to the web pages that make up the application. \n\n***\n\n## 3-3:  Install Bee Travels\n\nYou will be performing the installation steps from the **control node**.  Within the **control node** change directory to /media or another directory where you can download the **Bee Travels** application.\n\nYou will need to perform some of the steps in these instructions as root.  Type the following command:\n```sh\nsudo su -\n\n```\n\nWithin the /media directory, clone the GitHub repository by typing:\n```sh\ngit clone https://github.com/IBM/instana-openshift.git\n\n```\n\nThis will create a directory within the /media directory named **instana-openshift**.  Change directory to **instana-openshift** directory:\n```sh\ncd instana-openshift\n\n```\n\nNext, you will add the **javascript** to the web pages so that the application can capture the EUM/RUM data.  You will be editing the index.html file that is used for the front end of the **Bee Travels** applicdation.\n\nUse vi to edit /media/instana-openshift/src/services/ui/frontend/public/index.html\n```sh\nvi /media/instana-openshift/src/services/ui/frontend/public/index.html\n\n```\n\nWithin the editor, you will see the following at the top of the HTML file.\n![](images/index.png)\n\nImmediately after **<head\\>**, add the **javascript** that was copied from the Instana UI.  If you don't have the **javascript** copied, go back into the Instana UI and copy the block of **javascript**.\n\nThen, paste the **javascript** block immediately after **<head\\>**\n\nThe section should now look as follows, keeping in mind that some of your javascript will be slightly different to match your Instana server.\n\nSave the file in **vi** by typing **:wq**.\n\nNext, you will be setting up a secure route to access the registry.  \n\nFirst, confirm that the **image-registry** service exists.  Type:\n```sh\noc get svc -n openshift-image-registry\n```\n\nYou should see output similar to this:\n![](images/imageRegistry.png)\n\nNow, create a secured route for the **image-registry**.   This route uses reencrypt TLS termination.  Type the following command:\n\n```sh\noc create route reencrypt --service=image-registry -n openshift-image-registry\n\n```\n\nYou should see results similar to this:\n![](images/secureRoute.png)\n\nNext, retrieve the **hostname** and **port** that were assigned to the **image-registry** route.  Run the following command:\n```sh\noc get route image-registry -n openshift-image-registry\n\n```\n\nYou will see an output similar to what's shown below.  \n![](images/host.png)\n\nIn this example, there is no port number because it is using the HTTPS port.\n\nCopy the hostname into your clipboard.\n\nWe will now set a **HOST** environment variable to match the **Host** and **Port** retieved in the previous step.  Type the following command, but replace <hostname\\> with the hostname that you copied to your clipboard.\n\n```sh\nexport HOST=<hostname>\n```\n\nExample:  **export HOST=image-registry-openshift-image-registry.<cluster domain\\>**\n\nNext, login to the internal docker registry by typing:\n```sh\ndocker login -u $(oc whoami) -p $(oc whoami -t) $HOST\n\n```\n\nThe output should show that the login succeeded.\n![](images/dockerLogin.png)\n\nThe installation script requires **yarn** to be installed.  Install yarn by typing:\n```sh\nnpm install --global yarn\n\n```\n\nNext, you will run a script that will build and deploy the **Bee Travels** application.  Run the following command:\n```sh\n./build-and-deploy.sh -d $HOST\n```\n\nYou will see a number of steps in the script execute. \n\nYou may see the following warning appear on the screen.  You can ignore this warning.\n![](images/warning.png)\n\nWhen the script is finished, switch to the bee-travels namespaces and run the **oc get pods** command to confirm that the **Bee Travels** pods are running.\n\n```sh\noc project bee-travels\noc get pods\n\n```\n\nYou should see 5 pods running as shown below.\n![](images/pods.png)\n\nIf the pods have not all started, wait a minute or two and run the **oc get pods** command again.\n\nIf you notice one of the pods in an error state such as CrashLoopBackoff, delete by typing **oc delete pod <pod name\\>** where you replace <pod name\\> with the name of the pod that is not running.\n\nOnce all of the pods are running, you need to expose a route so that the application is available externally.  Type the following command:\n```sh\noc expose service ui\n\n```\n\nThis will expose the **ui** service as a route.\n\nType the following command to see the route:\n```sh\noc get route\n\n```\n\nYou will see results similar to this:\n![](images/route.png)\n\nIf desired, you can paste the route into a browser and bring up the **Bee Travels** user interface.  Make sure you specify HTTP.  For example:  http://ui-bee-travels.<cluster domain\\>\n\nYou have successfully installed the **Bee Travels** application.\n\n***\n\n## 3-4:  Automated Load\n\nFinally, you can generate some automated workload against the application.  The traffic generation scripts are in the **traffic** directory.  \n\nChange directory to the **/media/instana-openshift/traffic** directory by typing:\n\n```sh\ncd /media/instana-openshift/traffic\n\n```\n\nNext, run the npm install command:\n```\nnpm install\n\n```\n\nThe automated load can't be run as root.  Switch user to **jammer** by typing **exit**\n```sh\nexit\n\n```\n\nFinally, generate traffic by typing:   node traffic.js <NUM_CALLS\\> <ROUTE\\>\nWHERE:\n- NUM_CALLS - refers to how many calls will be made to the Bee Travels application. Each call will make 2 requests to the application. One will be for searching hotels for a random city and the other will be for searching car rentals for the same random city.\n- ROUTE - refers to the created route's location/url from OpenShift. Make sure there is no trailing /\n\nNOTE: Make sure you specify **https://** for the URL. Don't just past the hostname for your route.\n\nExample:  **node traffic.js 1000 https://ui-bee-travels.<cluster domain\\>**\n\nLeave this window open.  Any time you need to generate traffic to the application, re-run the previous command.\n\n***\n\n## 3-3:  Summary\n\nIn this exercise you have installed the **Bee Travels** application and you have learned out to add the EUM/RUM instrumentation into the webpages of a containerized application.  You also have tools that will generate automated workload against the installed application.\n\n***\n\nProceed to section 4 where you will setup IBM Middleware and monitoring for IBM MQ and IBM App Connect Enterprise (ACE).","type":"Mdx","contentDigest":"7e960c51cb4769a3cfaa294cb81422a8","owner":"gatsby-plugin-mdx","counter":914},"frontmatter":{"title":"Install the Bee Travels Application and Setup Website Monitoring","description":"Install the Bee Travels Application and Setup Website Monitoring"},"exports":{},"rawBody":"---\ntitle: Install the Bee Travels Application and Setup Website Monitoring\ndescription: Install the Bee Travels Application and Setup Website Monitoring\n---\n\n<AnchorLinks>\n  <AnchorLink>3-1: Introduction</AnchorLink>\n  <AnchorLink>3-2: Create Website Within Instana</AnchorLink>\n  <AnchorLink>3-3: Install Bee Travels</AnchorLink>\n  <AnchorLink>3-4: Automated Load</AnchorLink>\n  <AnchorLink>3-5: Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n\n## 3-1:  Introduction\n\nIn this portion of the lab, you will be installing the **Bee Travels** application.   **Bee Travels** is a microservices based travel agency application that runs in OpenShift.  As part of the installation, you will learn how to add **Website Monitoring** into the application.  This will add javascript injection into the web pages so that you can capture **End User Experience (EUM)** / **Real User Monitoring (RUM)** data from the end users that are accessing the web pages.\n\n![](images/bee-travels.png)\n\nThe **Bee Travels** GitHub repository that you will be using was cloned from the official GitHub location that can be found here:  https://github.com/bee-travels.  You'll find additional information about **Bee Travels** at that site.  The application was modified slightly to work in the environment where your application will be installed.\n\n***\n\n## 3-2:  Create Website Within Instana\nIf you want to capture EUM/RUM data within Instana, you must first create a website within the GUI (or via API).  Open the Instana GUI within your browser. \n\nOn left side navigation, select **Websites & Mobile Apps**. You'll see a dialog where you can entire a Website Name.  Enter **Bee Travels** as the website name.  Then, click the **Add Website** button.\n\n![](images/addWebsite.png)\n\nA dialog containing **javascript** will open.  You can either copy the **javascript** or leave this dialog open so that we can use it later.  The javascript is used for **javascript injection** to gather the EUM/RUM data from the end users that access the Bee Travels application.  This **javascript** must be added to the web pages that make up the application. \n\n***\n\n## 3-3:  Install Bee Travels\n\nYou will be performing the installation steps from the **control node**.  Within the **control node** change directory to /media or another directory where you can download the **Bee Travels** application.\n\nYou will need to perform some of the steps in these instructions as root.  Type the following command:\n```sh\nsudo su -\n\n```\n\nWithin the /media directory, clone the GitHub repository by typing:\n```sh\ngit clone https://github.com/IBM/instana-openshift.git\n\n```\n\nThis will create a directory within the /media directory named **instana-openshift**.  Change directory to **instana-openshift** directory:\n```sh\ncd instana-openshift\n\n```\n\nNext, you will add the **javascript** to the web pages so that the application can capture the EUM/RUM data.  You will be editing the index.html file that is used for the front end of the **Bee Travels** applicdation.\n\nUse vi to edit /media/instana-openshift/src/services/ui/frontend/public/index.html\n```sh\nvi /media/instana-openshift/src/services/ui/frontend/public/index.html\n\n```\n\nWithin the editor, you will see the following at the top of the HTML file.\n![](images/index.png)\n\nImmediately after **<head\\>**, add the **javascript** that was copied from the Instana UI.  If you don't have the **javascript** copied, go back into the Instana UI and copy the block of **javascript**.\n\nThen, paste the **javascript** block immediately after **<head\\>**\n\nThe section should now look as follows, keeping in mind that some of your javascript will be slightly different to match your Instana server.\n\nSave the file in **vi** by typing **:wq**.\n\nNext, you will be setting up a secure route to access the registry.  \n\nFirst, confirm that the **image-registry** service exists.  Type:\n```sh\noc get svc -n openshift-image-registry\n```\n\nYou should see output similar to this:\n![](images/imageRegistry.png)\n\nNow, create a secured route for the **image-registry**.   This route uses reencrypt TLS termination.  Type the following command:\n\n```sh\noc create route reencrypt --service=image-registry -n openshift-image-registry\n\n```\n\nYou should see results similar to this:\n![](images/secureRoute.png)\n\nNext, retrieve the **hostname** and **port** that were assigned to the **image-registry** route.  Run the following command:\n```sh\noc get route image-registry -n openshift-image-registry\n\n```\n\nYou will see an output similar to what's shown below.  \n![](images/host.png)\n\nIn this example, there is no port number because it is using the HTTPS port.\n\nCopy the hostname into your clipboard.\n\nWe will now set a **HOST** environment variable to match the **Host** and **Port** retieved in the previous step.  Type the following command, but replace <hostname\\> with the hostname that you copied to your clipboard.\n\n```sh\nexport HOST=<hostname>\n```\n\nExample:  **export HOST=image-registry-openshift-image-registry.<cluster domain\\>**\n\nNext, login to the internal docker registry by typing:\n```sh\ndocker login -u $(oc whoami) -p $(oc whoami -t) $HOST\n\n```\n\nThe output should show that the login succeeded.\n![](images/dockerLogin.png)\n\nThe installation script requires **yarn** to be installed.  Install yarn by typing:\n```sh\nnpm install --global yarn\n\n```\n\nNext, you will run a script that will build and deploy the **Bee Travels** application.  Run the following command:\n```sh\n./build-and-deploy.sh -d $HOST\n```\n\nYou will see a number of steps in the script execute. \n\nYou may see the following warning appear on the screen.  You can ignore this warning.\n![](images/warning.png)\n\nWhen the script is finished, switch to the bee-travels namespaces and run the **oc get pods** command to confirm that the **Bee Travels** pods are running.\n\n```sh\noc project bee-travels\noc get pods\n\n```\n\nYou should see 5 pods running as shown below.\n![](images/pods.png)\n\nIf the pods have not all started, wait a minute or two and run the **oc get pods** command again.\n\nIf you notice one of the pods in an error state such as CrashLoopBackoff, delete by typing **oc delete pod <pod name\\>** where you replace <pod name\\> with the name of the pod that is not running.\n\nOnce all of the pods are running, you need to expose a route so that the application is available externally.  Type the following command:\n```sh\noc expose service ui\n\n```\n\nThis will expose the **ui** service as a route.\n\nType the following command to see the route:\n```sh\noc get route\n\n```\n\nYou will see results similar to this:\n![](images/route.png)\n\nIf desired, you can paste the route into a browser and bring up the **Bee Travels** user interface.  Make sure you specify HTTP.  For example:  http://ui-bee-travels.<cluster domain\\>\n\nYou have successfully installed the **Bee Travels** application.\n\n***\n\n## 3-4:  Automated Load\n\nFinally, you can generate some automated workload against the application.  The traffic generation scripts are in the **traffic** directory.  \n\nChange directory to the **/media/instana-openshift/traffic** directory by typing:\n\n```sh\ncd /media/instana-openshift/traffic\n\n```\n\nNext, run the npm install command:\n```\nnpm install\n\n```\n\nThe automated load can't be run as root.  Switch user to **jammer** by typing **exit**\n```sh\nexit\n\n```\n\nFinally, generate traffic by typing:   node traffic.js <NUM_CALLS\\> <ROUTE\\>\nWHERE:\n- NUM_CALLS - refers to how many calls will be made to the Bee Travels application. Each call will make 2 requests to the application. One will be for searching hotels for a random city and the other will be for searching car rentals for the same random city.\n- ROUTE - refers to the created route's location/url from OpenShift. Make sure there is no trailing /\n\nNOTE: Make sure you specify **https://** for the URL. Don't just past the hostname for your route.\n\nExample:  **node traffic.js 1000 https://ui-bee-travels.<cluster domain\\>**\n\nLeave this window open.  Any time you need to generate traffic to the application, re-run the previous command.\n\n***\n\n## 3-3:  Summary\n\nIn this exercise you have installed the **Bee Travels** application and you have learned out to add the EUM/RUM instrumentation into the webpages of a containerized application.  You also have tools that will generate automated workload against the installed application.\n\n***\n\nProceed to section 4 where you will setup IBM Middleware and monitoring for IBM MQ and IBM App Connect Enterprise (ACE).","fileAbsolutePath":"/home/jason/workspace/IBM/waiops-tech-jam/src/pages/tutorials/instana/bee-travels/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}