{"componentChunkName":"component---src-pages-tutorials-mm-mm-mad-index-mdx","path":"/tutorials/mm/mm-mad/","result":{"pageContext":{"frontmatter":{"title":"Exploring the capabilities of Watson AIOps Metric Anomaly Detection","description":"This lab will walk you through how to send metric data into Watson AIOps Metric Anomaly Detection feature, how to train on the data, and how to identify anomalies"},"relativePagePath":"/tutorials/mm/mm-mad/index.mdx","titleType":"page","MdxNode":{"id":"edf3052d-bd80-5842-8e72-ce7fd7e8b413","children":[],"parent":"bba21c0e-77b6-5f73-bb84-d5bc730ef987","internal":{"content":"---\ntitle: Exploring the capabilities of Watson AIOps Metric Anomaly Detection\ndescription: This lab will walk you through how to send metric data into Watson AIOps Metric Anomaly Detection feature, how to train on the data, and how to identify anomalies\n---\n\n<AnchorLinks>\n  <AnchorLink>6-1: Introduction</AnchorLink>\n  <AnchorLink>6-2: Verify the Watson AIOps AI Manager installation</AnchorLink>\n  <AnchorLink>6-3: Generating an API key</AnchorLink>\n  <AnchorLink>6-4: Sending training data to the Watson AIOps API</AnchorLink>\n  <AnchorLink>6-5: Confirm that the training data was received</AnchorLink>\n  <AnchorLink>6-6: Running the training job</AnchorLink>\n  <AnchorLink>6-7: Sending anomalous data</AnchorLink>\n  <AnchorLink>6-8: Viewing the results</AnchorLink>\n  <AnchorLink>6-9: Lab summary</AnchorLink>\n</AnchorLinks>\n\n## 6-1: Introduction\n\nThe Watson AIOps Metric Anomaly Detection feature is intended to be the replacement for the VM-based Metric Manager. While it doesn't quite have feature parity with the VM based solution currently, \n\n**Some of the items that the MAD component will improve on over the VM solution are:**\n\n***Current GA release (3.4.1)***<br/>\nHigh Availability<br/>\nSupport multiple aggregation interval<br/>\nRuns on OpenShift<br/>\nHorizontally scalable<br/>\nEasy install<br/>\nOff-the-shelf Instana connector<br/>\nSeamless, modern user experience<br/>\n***Future releases***<br/>\nMulti-tenancy<br/>\nData quality analysis<br/>\n\n**Features that are currently missing in MAD vs. VM Metric Manager:<br/>**\nMetric search (future enhancement)<br/>\nAnomaly search (future enhancement)<br/>\nCurrent off-the-shelf mediators/integrations are incompatible (future enhancement)<br/>\n\nIt is possible to install MAD in either Watson AIOps Event Manager deployment, or in Watson AIOps AI Manager deployment. We went with AI Manager to give you exposure to that installation and to allow you to familiarize yourselves with the UI.\n\n\n## 6-2: Verify the Watson AIOps AI Manager installation\n\n At the beginning of the day, you started an install of Watson AIOps AI Manager. In general, a deployment of AI Manager runs around 90 minutes or so. Before we proceed with these labs, we will verify that the AI Manager install completed successfully.\n\n Open a shell on your control node, switch context to your 'manage to' environment, then verify that your AI Manager installation has completed successfully:\n\n```sh\noc project cp4waiops\noc get installations.orchestrator.aiops.ibm.com -A && echo \"\" && oc get ircore,AIOpsAnalyticsOrchestrator -A -o custom-columns=\"KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\\\"Ready\\\")].reason\" && echo \"\" && oc get lifecycleservice -A -o custom-columns=\"KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\\\"Lifecycle Service Ready\\\")].reason\" && echo \"\" && oc get BaseUI -A -o custom-columns=\"KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\\\"Ready\\\")].reason\" && echo \"\" && oc get AIManager,aiopsedge,asm -A -o custom-columns=\"KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.phase\"\n```\n\nThe status of the components should be \"Ready\", and Completed, Configured, and OK for AIManager, AIOpsEdge, and ASM respectively:\n\n ![](images/Picture1.png)\n\n## 6-3: Generating an API key\n\n For this lab we will be sending in metric data through the Watson AIOps REST API. Any interaction with the Watson AIOps API must be authenticated by either a bearer token or an API key. In this section, we will generate an API key that we will use to send in our data.\n\n First, we need to login to the Watson AIOps interface. To do that, we need to obtain the UI route (URL) for your Watson AIOps installation UI. Run the following command and copy the output:\n\n```sh\noc get route -n cp4waiops cpd -o jsonpath='{.spec.host}'; echo\n```\n\nOpen up your browser on your laptop and paste the URL. You will be presented with the main login screen. Click on \"IBM provided credentials (admin only):\n\n ![](images/Picture2.png)\n\nObtain the password for the admin user by running the following command, and copy the resulting output:\n\n```sh\noc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin\\_password}' | base64 -d ; echo\n```\n\nLogin to the Cloud Pak as user 'admin', and paste the password in the Password field:\n\n ![](images/Picture3.png)\n\nClick \"Maybe Later\" if the \"take a tour\" window pops up. You will be presented with the main Cloud Pak window. In the upper-right corner of this window you will see a blue user circle, click on this circle, and select \"Profile and settings\":\n\n ![](images/Picture4.png)\n\n In the admin user configuration interface, in the upper-right corner of the window you will see a link titled \"API key\". Select that link, and from the drop-down click \"Generate new key\":\n\n ![](images/Picture5.png)\n ![](images/Picture6.png)\n\n\n Copy the key, and save it some place where you won't lose it. Note that once you close this window, you will never be able to obtain that key again. So if you lose it, you will need to generate another key.\n\n Return to the console on your control node and create a Basic Authentication token, which will be used to authenticate with the Metrics REST API. Save the Basic Authentication as an environment variable named ZENAPIKEY. Run the following command, being sure to replace <YOUR API KEY\\> with the api key you copied in the previous step:\n\n```sh\nZENAPIKEY=$(echo \"admin:<YOUR API KEY>\" |base64); echo $ZENAPIKEY\n```\n\n## 6-4: Sending training data to the Watson AIOps API\n\n First we will obtain the training/display files we will use to demonstrate training/anomaly detection. SCP the following training and display files. Use \\<LAB PASSWORD\\> as the password:\n\n```sh\nwget http://150.238.93.118/BookInfoJson-training-20220721-0000__20220804-0000.json\nwget http://150.238.93.118/BookInfoJson-display-20220804-0000__20220806-1200.json\n```\n\nThe metrics REST API is exposed via an OpenShift route. Obtain the route and store it in an environment variable named 'METRICROUTE':\n\n```sh\nexport METRICROUTE=$(oc get route | grep ibm-nginx-svc | awk '{print $2}')\n```\n\nNext, send in the training data to the Watson AIOps REST API using the following curl POST command:\n\n```sh\ncurl -k -v -X POST \"https://${METRICROUTE}/aiops/api/app/metric-api/v1/metrics\" --header 'Content-Type: application/json' --header \"Authorization: ZenApiKey ${ZENAPIKEY}\" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --data @BookInfoJson-training-20220721-0000\\_\\_20220804-0000.json\n```\n\nThe key response lines that you will see when the load is successful are:\n\n\n_< HTTP/1.1 100 Continue_\n\n_\\* We are completely uploaded and fine_\n\n_\\* Mark bundle as not supporting multiuse_\n\n_< HTTP/1.1 200 OK_\n\nFollowed by several lines summarizing the completed session.\n\n## 6-5: Confirm that the training data was received\n\n Much like we saw in the on-prem Metric Manager, data that is send in via the REST interface is placed on a Kafka topic and inserted into a Cassandra database. We can verify that our training data made it into Cassandra by logging into the Cassandra pod, running cqlsh, and querying the tararam.dt\\_metric\\_value table. The following steps describe this process.\n\n First, obtain the Watson AIOps Cassandra password and place it into an environment variable called **CASSANDRA\\_PASSWORD**. This can be achieved with the following command:\n\n```sh\nexport CASSANDRA_PASSWORD=$(oc get secret aiops-topology-cassandra-auth-secret --template={{.data.password}} |base64 -d)\n```\n\nNext, run cqlsh using 'oc exec' command:\n\n```sh\noc exec -it aiops-topology-cassandra-0 -- /opt/ibm/cassandra/bin/cqlsh -u admin -p $CASSANDRA_PASSWORD --ssl\n```\n\n If you describe keyspaces, you will see our tararam keyspace. Switch context to that keyspace with the 'use tararam' command, and query the dt\\_metric\\_value table:\n\n```sh\ndescribe keyspaces;\nuse tararam;\nselect * from dt_metric_value; \n```\n\nYou will see that, much like we saw with the on-prem REST service, we see our metric data.\n\n\n ![](images/Picture7.png)\n\n You can also view the unique resource/metric combinations that are in the dataset by running:\n\n```sh \nselect \\* from md\\_metric\\_resource;\n```\n\n ![](images/Picture8.png)\n\n In the above output, you can see the unique metric/resource combinations that were found within the data that we sent to the REST interface. The mr\\_id is the link between the resource/metric combination, and the metric value in the dt\\_metric\\_value table.\n\n## 6-6: Running the training job\n\n Now that we have data in the system, we can kick off a training job. Return to the Watson AIOps interface in your browser, and from the main screen, click on AI model management:\n\n ![](images/Picture9.png)\n\n In the next window, you'll see a tile for \"Metric anomaly detection\". Select \"Set up training\" from this tile:\n\n ![](images/Picture10.png)\n\n Click \"Next\" on the description page:\n\n ![](images/Picture11.png)\n\n The next screen allows you to define a schedule for ongoing re-training/re-learning. In general, it is recommended that this be scheduled on a daily basis, which is how the on-prem Metric Manager works as well. For our purposes though, we're going to manually train on the data, so you can leave this Off for now. Click \"Next\"\n\n ![](images/Picture12.png)\n\n\n The final screen explains where to find anomalies. Click \"Done\"\n\n ![](images/Picture13.png)\n\n Once your training configuration is complete, you will be brought back to the model management screen. Select the 3 icons at the top right of the Metric anomaly detection tile and select \"Start training\". This will kick off a training job, and Watson will ingest the training data, analyze and model the data based on its behavior, and be ready to look for instances where future metrics act contrary to the behavior learned in this training job:\n\n ![](images/Picture14.png)\n\n After a minute or two, training should complete and you should see the model deployed:\n\n ![](images/Picture15.png)\n\n## 6-7: Sending anomalous data\n\nWe split the data into two parts to illustrate training and anomaly generation. In this step, we will send our anomalous data in. This will be in the same manner that we did for the training data… using curl. The following command will send our \"display\" metric data into the REST API of MAD. \n\n_curl -k -v -X POST \"https://${METRICROUTE}/aiops/api/app/metric-api/v1/metrics\" --header 'Content-Type: application/json' --header \"Authorization: ZenApiKey ${ZENAPIKEY}\" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --data @BookInfoJson-display-20220804-0000\\_\\_20220806-1200.json_\n\n## 6-8: Viewing the results\n\n To view the results of our analysis, return to the Watson AIOps interface, and from the main menu click on \"Stories and Alerts\".\n\n ![](images/Picture16.png)\n\n Click on the Alerts tab to see our anomalies:\n\n ![](images/Picture17.png)\n\n Select the \"Type\" Field for the \"ResponseTime\" anomaly for the productpage-v1 resource. Then, in the Alerts Details window on the right, click on \"Metrics anomaly details\".\n\n ![](images/Picture18.png)\n\n This will bring up a historical chart that shows the time leading up to the anomalous period, with the anomalous period displayed in a red shaded area:\n\n ![](images/Picture19.png)\n\n To get an expanded view of this chart, click on the \"View expanded chart\" link below the chart. This will give you an expanded time period leading up to the anomaly, and also provide a list of any related alerts in the pane below, were there any at the time. The Metric Anomaly Detection feature currently leverages CNEA temporal events to do its event correlation. Future versions of Metric Anomaly Detection will also be able to show multiple related metrics on the same graph, whether the resources are related by temporal events, topology, or scope.\n\n ![](images/Picture20.png)\n\n Also note that it is clear where the training period has ended, and we have a persisted baseline that started on 8/4/2022. If you hover your mouse over the graph, you can see the details of the time period and the actual value of the metric for that specific time period. You can see three instances where the response time went anomalous for short periods of time, then at the very right of the graph, we see where it went anomalous for a long period of time.\n\n Much like we saw with Metric Manager, in MAD you can zoom in on any time period by holding your left mouse button down and dragging it across the time period that you want to zoom in:\n\n ![](images/Picture21.png)\n\n To return to the expanded page, click anywhere in the top mini histogram bar. You will return to the expanded view.\n\n Next, zoom in on the latest anomaly section to the right:\n\n ![](images/Picture22.png)\n\n\n Hover your mouse over the beginning of the red box, and you can see this situation started at 8/6/2022 at around 4:25 am., where the response time clearly started behaving contrary to the learned behavior. You can also see, on the right, where the data set ends. In live ingestion, this would likely be indicative of the \"current time\", but in our case this is historical data and that happens to be when the data set ends. Note the forecast of where that metric is headed based on Watson's forecasting algorithm. By default, we plot 20 intervals into the future… so if the data is 5 minute data, that would be 100 minutes into the future. You will notice that the forecast gets wider and wider farther into the future. This indicates that the further you go into the future, the less confident Watson is in terms of where it will be.\n\n At the top of the histogram, you will see two black bars that let you move the start/stop time of the graph. Move the left one by clicking on it and dragging it to the left to include the time period where we saw the other anomalies:\n\n ![](images/Picture23.png)\n\n At the top of the graph, note the three dots. This will bring up a menu that allows you to export the data in the current graph. You can export the data in CSV format, or you can export the graph as an image in PNG or JPG format.\n\n ![](images/Picture24.png)\n\n You can also display the values in the current graph in a tabular view by clicking on the tabular view icon:\n\n ![](images/Picture25.png)\n\n\n Finally, you can bring up any arbitrary day in the past by clicking on the \"Date\" drop-down. A calendar view will pop up allowing you to select a day to view the metric data for the current metric for that date:\n\n ![](images/Picture26.png)\n\n## 6-9: Lab summary\n\nIn this lab, you verified the installation of Watson AIOps, learned how to send metric data into the Watson AIOps metric API, learned how to perform training, and viewed the results of the anomalies generated from the training model.\n\nThat concludes the labs for Metric Anomaly Detection, and Metric Management as a whole for the Watson AIOps solution.\n\n\n","type":"Mdx","contentDigest":"a7816e492d1bed41ac34454d1bf923ea","owner":"gatsby-plugin-mdx","counter":888},"frontmatter":{"title":"Exploring the capabilities of Watson AIOps Metric Anomaly Detection","description":"This lab will walk you through how to send metric data into Watson AIOps Metric Anomaly Detection feature, how to train on the data, and how to identify anomalies"},"exports":{},"rawBody":"---\ntitle: Exploring the capabilities of Watson AIOps Metric Anomaly Detection\ndescription: This lab will walk you through how to send metric data into Watson AIOps Metric Anomaly Detection feature, how to train on the data, and how to identify anomalies\n---\n\n<AnchorLinks>\n  <AnchorLink>6-1: Introduction</AnchorLink>\n  <AnchorLink>6-2: Verify the Watson AIOps AI Manager installation</AnchorLink>\n  <AnchorLink>6-3: Generating an API key</AnchorLink>\n  <AnchorLink>6-4: Sending training data to the Watson AIOps API</AnchorLink>\n  <AnchorLink>6-5: Confirm that the training data was received</AnchorLink>\n  <AnchorLink>6-6: Running the training job</AnchorLink>\n  <AnchorLink>6-7: Sending anomalous data</AnchorLink>\n  <AnchorLink>6-8: Viewing the results</AnchorLink>\n  <AnchorLink>6-9: Lab summary</AnchorLink>\n</AnchorLinks>\n\n## 6-1: Introduction\n\nThe Watson AIOps Metric Anomaly Detection feature is intended to be the replacement for the VM-based Metric Manager. While it doesn't quite have feature parity with the VM based solution currently, \n\n**Some of the items that the MAD component will improve on over the VM solution are:**\n\n***Current GA release (3.4.1)***<br/>\nHigh Availability<br/>\nSupport multiple aggregation interval<br/>\nRuns on OpenShift<br/>\nHorizontally scalable<br/>\nEasy install<br/>\nOff-the-shelf Instana connector<br/>\nSeamless, modern user experience<br/>\n***Future releases***<br/>\nMulti-tenancy<br/>\nData quality analysis<br/>\n\n**Features that are currently missing in MAD vs. VM Metric Manager:<br/>**\nMetric search (future enhancement)<br/>\nAnomaly search (future enhancement)<br/>\nCurrent off-the-shelf mediators/integrations are incompatible (future enhancement)<br/>\n\nIt is possible to install MAD in either Watson AIOps Event Manager deployment, or in Watson AIOps AI Manager deployment. We went with AI Manager to give you exposure to that installation and to allow you to familiarize yourselves with the UI.\n\n\n## 6-2: Verify the Watson AIOps AI Manager installation\n\n At the beginning of the day, you started an install of Watson AIOps AI Manager. In general, a deployment of AI Manager runs around 90 minutes or so. Before we proceed with these labs, we will verify that the AI Manager install completed successfully.\n\n Open a shell on your control node, switch context to your 'manage to' environment, then verify that your AI Manager installation has completed successfully:\n\n```sh\noc project cp4waiops\noc get installations.orchestrator.aiops.ibm.com -A && echo \"\" && oc get ircore,AIOpsAnalyticsOrchestrator -A -o custom-columns=\"KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\\\"Ready\\\")].reason\" && echo \"\" && oc get lifecycleservice -A -o custom-columns=\"KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\\\"Lifecycle Service Ready\\\")].reason\" && echo \"\" && oc get BaseUI -A -o custom-columns=\"KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\\\"Ready\\\")].reason\" && echo \"\" && oc get AIManager,aiopsedge,asm -A -o custom-columns=\"KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.phase\"\n```\n\nThe status of the components should be \"Ready\", and Completed, Configured, and OK for AIManager, AIOpsEdge, and ASM respectively:\n\n ![](images/Picture1.png)\n\n## 6-3: Generating an API key\n\n For this lab we will be sending in metric data through the Watson AIOps REST API. Any interaction with the Watson AIOps API must be authenticated by either a bearer token or an API key. In this section, we will generate an API key that we will use to send in our data.\n\n First, we need to login to the Watson AIOps interface. To do that, we need to obtain the UI route (URL) for your Watson AIOps installation UI. Run the following command and copy the output:\n\n```sh\noc get route -n cp4waiops cpd -o jsonpath='{.spec.host}'; echo\n```\n\nOpen up your browser on your laptop and paste the URL. You will be presented with the main login screen. Click on \"IBM provided credentials (admin only):\n\n ![](images/Picture2.png)\n\nObtain the password for the admin user by running the following command, and copy the resulting output:\n\n```sh\noc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin\\_password}' | base64 -d ; echo\n```\n\nLogin to the Cloud Pak as user 'admin', and paste the password in the Password field:\n\n ![](images/Picture3.png)\n\nClick \"Maybe Later\" if the \"take a tour\" window pops up. You will be presented with the main Cloud Pak window. In the upper-right corner of this window you will see a blue user circle, click on this circle, and select \"Profile and settings\":\n\n ![](images/Picture4.png)\n\n In the admin user configuration interface, in the upper-right corner of the window you will see a link titled \"API key\". Select that link, and from the drop-down click \"Generate new key\":\n\n ![](images/Picture5.png)\n ![](images/Picture6.png)\n\n\n Copy the key, and save it some place where you won't lose it. Note that once you close this window, you will never be able to obtain that key again. So if you lose it, you will need to generate another key.\n\n Return to the console on your control node and create a Basic Authentication token, which will be used to authenticate with the Metrics REST API. Save the Basic Authentication as an environment variable named ZENAPIKEY. Run the following command, being sure to replace <YOUR API KEY\\> with the api key you copied in the previous step:\n\n```sh\nZENAPIKEY=$(echo \"admin:<YOUR API KEY>\" |base64); echo $ZENAPIKEY\n```\n\n## 6-4: Sending training data to the Watson AIOps API\n\n First we will obtain the training/display files we will use to demonstrate training/anomaly detection. SCP the following training and display files. Use \\<LAB PASSWORD\\> as the password:\n\n```sh\nwget http://150.238.93.118/BookInfoJson-training-20220721-0000__20220804-0000.json\nwget http://150.238.93.118/BookInfoJson-display-20220804-0000__20220806-1200.json\n```\n\nThe metrics REST API is exposed via an OpenShift route. Obtain the route and store it in an environment variable named 'METRICROUTE':\n\n```sh\nexport METRICROUTE=$(oc get route | grep ibm-nginx-svc | awk '{print $2}')\n```\n\nNext, send in the training data to the Watson AIOps REST API using the following curl POST command:\n\n```sh\ncurl -k -v -X POST \"https://${METRICROUTE}/aiops/api/app/metric-api/v1/metrics\" --header 'Content-Type: application/json' --header \"Authorization: ZenApiKey ${ZENAPIKEY}\" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --data @BookInfoJson-training-20220721-0000\\_\\_20220804-0000.json\n```\n\nThe key response lines that you will see when the load is successful are:\n\n\n_< HTTP/1.1 100 Continue_\n\n_\\* We are completely uploaded and fine_\n\n_\\* Mark bundle as not supporting multiuse_\n\n_< HTTP/1.1 200 OK_\n\nFollowed by several lines summarizing the completed session.\n\n## 6-5: Confirm that the training data was received\n\n Much like we saw in the on-prem Metric Manager, data that is send in via the REST interface is placed on a Kafka topic and inserted into a Cassandra database. We can verify that our training data made it into Cassandra by logging into the Cassandra pod, running cqlsh, and querying the tararam.dt\\_metric\\_value table. The following steps describe this process.\n\n First, obtain the Watson AIOps Cassandra password and place it into an environment variable called **CASSANDRA\\_PASSWORD**. This can be achieved with the following command:\n\n```sh\nexport CASSANDRA_PASSWORD=$(oc get secret aiops-topology-cassandra-auth-secret --template={{.data.password}} |base64 -d)\n```\n\nNext, run cqlsh using 'oc exec' command:\n\n```sh\noc exec -it aiops-topology-cassandra-0 -- /opt/ibm/cassandra/bin/cqlsh -u admin -p $CASSANDRA_PASSWORD --ssl\n```\n\n If you describe keyspaces, you will see our tararam keyspace. Switch context to that keyspace with the 'use tararam' command, and query the dt\\_metric\\_value table:\n\n```sh\ndescribe keyspaces;\nuse tararam;\nselect * from dt_metric_value; \n```\n\nYou will see that, much like we saw with the on-prem REST service, we see our metric data.\n\n\n ![](images/Picture7.png)\n\n You can also view the unique resource/metric combinations that are in the dataset by running:\n\n```sh \nselect \\* from md\\_metric\\_resource;\n```\n\n ![](images/Picture8.png)\n\n In the above output, you can see the unique metric/resource combinations that were found within the data that we sent to the REST interface. The mr\\_id is the link between the resource/metric combination, and the metric value in the dt\\_metric\\_value table.\n\n## 6-6: Running the training job\n\n Now that we have data in the system, we can kick off a training job. Return to the Watson AIOps interface in your browser, and from the main screen, click on AI model management:\n\n ![](images/Picture9.png)\n\n In the next window, you'll see a tile for \"Metric anomaly detection\". Select \"Set up training\" from this tile:\n\n ![](images/Picture10.png)\n\n Click \"Next\" on the description page:\n\n ![](images/Picture11.png)\n\n The next screen allows you to define a schedule for ongoing re-training/re-learning. In general, it is recommended that this be scheduled on a daily basis, which is how the on-prem Metric Manager works as well. For our purposes though, we're going to manually train on the data, so you can leave this Off for now. Click \"Next\"\n\n ![](images/Picture12.png)\n\n\n The final screen explains where to find anomalies. Click \"Done\"\n\n ![](images/Picture13.png)\n\n Once your training configuration is complete, you will be brought back to the model management screen. Select the 3 icons at the top right of the Metric anomaly detection tile and select \"Start training\". This will kick off a training job, and Watson will ingest the training data, analyze and model the data based on its behavior, and be ready to look for instances where future metrics act contrary to the behavior learned in this training job:\n\n ![](images/Picture14.png)\n\n After a minute or two, training should complete and you should see the model deployed:\n\n ![](images/Picture15.png)\n\n## 6-7: Sending anomalous data\n\nWe split the data into two parts to illustrate training and anomaly generation. In this step, we will send our anomalous data in. This will be in the same manner that we did for the training data… using curl. The following command will send our \"display\" metric data into the REST API of MAD. \n\n_curl -k -v -X POST \"https://${METRICROUTE}/aiops/api/app/metric-api/v1/metrics\" --header 'Content-Type: application/json' --header \"Authorization: ZenApiKey ${ZENAPIKEY}\" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --data @BookInfoJson-display-20220804-0000\\_\\_20220806-1200.json_\n\n## 6-8: Viewing the results\n\n To view the results of our analysis, return to the Watson AIOps interface, and from the main menu click on \"Stories and Alerts\".\n\n ![](images/Picture16.png)\n\n Click on the Alerts tab to see our anomalies:\n\n ![](images/Picture17.png)\n\n Select the \"Type\" Field for the \"ResponseTime\" anomaly for the productpage-v1 resource. Then, in the Alerts Details window on the right, click on \"Metrics anomaly details\".\n\n ![](images/Picture18.png)\n\n This will bring up a historical chart that shows the time leading up to the anomalous period, with the anomalous period displayed in a red shaded area:\n\n ![](images/Picture19.png)\n\n To get an expanded view of this chart, click on the \"View expanded chart\" link below the chart. This will give you an expanded time period leading up to the anomaly, and also provide a list of any related alerts in the pane below, were there any at the time. The Metric Anomaly Detection feature currently leverages CNEA temporal events to do its event correlation. Future versions of Metric Anomaly Detection will also be able to show multiple related metrics on the same graph, whether the resources are related by temporal events, topology, or scope.\n\n ![](images/Picture20.png)\n\n Also note that it is clear where the training period has ended, and we have a persisted baseline that started on 8/4/2022. If you hover your mouse over the graph, you can see the details of the time period and the actual value of the metric for that specific time period. You can see three instances where the response time went anomalous for short periods of time, then at the very right of the graph, we see where it went anomalous for a long period of time.\n\n Much like we saw with Metric Manager, in MAD you can zoom in on any time period by holding your left mouse button down and dragging it across the time period that you want to zoom in:\n\n ![](images/Picture21.png)\n\n To return to the expanded page, click anywhere in the top mini histogram bar. You will return to the expanded view.\n\n Next, zoom in on the latest anomaly section to the right:\n\n ![](images/Picture22.png)\n\n\n Hover your mouse over the beginning of the red box, and you can see this situation started at 8/6/2022 at around 4:25 am., where the response time clearly started behaving contrary to the learned behavior. You can also see, on the right, where the data set ends. In live ingestion, this would likely be indicative of the \"current time\", but in our case this is historical data and that happens to be when the data set ends. Note the forecast of where that metric is headed based on Watson's forecasting algorithm. By default, we plot 20 intervals into the future… so if the data is 5 minute data, that would be 100 minutes into the future. You will notice that the forecast gets wider and wider farther into the future. This indicates that the further you go into the future, the less confident Watson is in terms of where it will be.\n\n At the top of the histogram, you will see two black bars that let you move the start/stop time of the graph. Move the left one by clicking on it and dragging it to the left to include the time period where we saw the other anomalies:\n\n ![](images/Picture23.png)\n\n At the top of the graph, note the three dots. This will bring up a menu that allows you to export the data in the current graph. You can export the data in CSV format, or you can export the graph as an image in PNG or JPG format.\n\n ![](images/Picture24.png)\n\n You can also display the values in the current graph in a tabular view by clicking on the tabular view icon:\n\n ![](images/Picture25.png)\n\n\n Finally, you can bring up any arbitrary day in the past by clicking on the \"Date\" drop-down. A calendar view will pop up allowing you to select a day to view the metric data for the current metric for that date:\n\n ![](images/Picture26.png)\n\n## 6-9: Lab summary\n\nIn this lab, you verified the installation of Watson AIOps, learned how to send metric data into the Watson AIOps metric API, learned how to perform training, and viewed the results of the anomalies generated from the training model.\n\nThat concludes the labs for Metric Anomaly Detection, and Metric Management as a whole for the Watson AIOps solution.\n\n\n","fileAbsolutePath":"/Volumes/SSD Storage/IBM-DEVELOPMENT/TECHJAM2022/IBM/waiops-tech-jam/src/pages/tutorials/mm/mm-mad/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}