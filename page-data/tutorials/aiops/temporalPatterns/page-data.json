{"componentChunkName":"component---src-pages-tutorials-aiops-temporal-patterns-index-mdx","path":"/tutorials/aiops/temporalPatterns/","result":{"pageContext":{"frontmatter":{"title":"Temporal Patterns","description":"Watson AIOps temporal patterns"},"relativePagePath":"/tutorials/aiops/temporalPatterns/index.mdx","titleType":"page","MdxNode":{"id":"cd1f52cb-f38f-580c-b75a-f7521172280b","children":[],"parent":"26e14ffd-248d-5e85-8709-baa46771ebb8","internal":{"content":"---\r\ntitle: Temporal Patterns\r\ndescription: Watson AIOps temporal patterns\r\n---\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>10-1: Overview</AnchorLink>\r\n  <AnchorLink>10-2: Create historical data for learning</AnchorLink>\r\n  <AnchorLink>10-3: Insert historical events into event manager</AnchorLink>\r\n  <AnchorLink>10-4: Run training for temporal patterns</AnchorLink>\r\n  <AnchorLink>10-5: Check policies created from learning</AnchorLink>\r\n  <AnchorLink>10-6: Replay Events</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## 10-1: Overview\r\n\r\nThis module focuses on temporal patterns that group events based on learned patterns in time-based relations. \r\n\r\n**What are Temporal patterns?**\r\n\r\nThe temporal pattern analytic identifies patterns of behavior among temporal groups, which are similar, but occur on different resources. Subsequent events, which match the pattern and occur on a new, common resource are grouped.\r\n\r\n**How does it work?**\r\n\r\nFirst, temporal grouping Policies are generated when 2, or more, events occur together (i.e. each less than 20 mins apart).\r\n\r\nTemporal patterns are created by training when 3, or more, Temporal grouping Policies are generated, for events with common Event Types. But only if the events which make up the pattern have the same Resource (aka Node) field.\r\n\r\nSo to create a pattern, we need to produce 3 Related Events Temporal Policies, with common Event Types, whose Resource values (within a policy) are the same.\r\n\r\nThe generation of Temporal Policies is done based on the First Occurrence of an Event and uses its Identifier to identify it. The First Occurrance is set with a Unix epoch value.\r\n\r\n***\r\n\r\n## 10-2: Create historical data for learning\r\n\r\nIn order to understand how Watson AIOps learns temporal patterns, we will simulate a sample set of events and train analytics engine on the simulated historical dataset.\r\nIn this historical dataset we are simulating same issue in 3 differetn locations (SASKATOON,EDMONTON,VANCOUVER) , that will generate 3 temporal policies and 1 temporal pattern.\r\n\r\nFor replay we will use 4th Location (WINNIPEG) to simulate same issue , Watson AIOps applies the learned pattern policy to group events from another location that is not seen in past.\r\n\r\nLogin into OCP cluster using oc login.\r\n\r\nCreate pattern_events_historic.sh script (as below)Â  that simulates a historic set of events into the ObjectServer. starttime in script is EPOCH conversion for the time in history (9AM Jul 1, 2022) so we have a minimum 3-4 weeks of sample data generated for machine learning.\r\n\r\n```sh\r\n#!/bin/bash\r\nstarttime=1656363600\r\nstamp=$starttime\r\nfor (( i=0; i<=4; i++ ))\r\ndo\r\nstamp_temporal=$(($starttime+$i*6*86400))\r\nstamp_temporal1=$(($starttime+$i*5*71500))\r\nstamp_temporal2=$(($starttime+$i*4*72500))\r\n\r\necho $i $stamp_temporal $stamp_temporal1 $stamp_temporal2\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\n\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier11','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'A','RACK01-FAN07','FAN Failure reported for RACK01', 2, $stamp_temporal,$stamp_temporal, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier12','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'B','RACK01','POWER Supply Failure reported for RACK01',  4, $stamp_temporal + 5,$stamp_temporal+5, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier13','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'C','RACK01-DEV03', 'DEVICE Failure on RACK01', 3, $stamp_temporal + 6,$stamp_temporal+6, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier14','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'C', 'RACK01-DEV02','DEVICE Failure on RACK01',3, $stamp_temporal + 6,$stamp_temporal+6, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier15','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'C', 'RACK01-DEV01','DEVICE Failure on RACK01', 3, $stamp_temporal +6,$stamp_temporal, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier21','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'A','RACK01-FAN07','FAN Failure reported for RACK01', 2, $stamp_temporal1,$stamp_temporal1, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier22','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'B','RACK01','POWER Supply Failure reported for RACK01',  4, $stamp_temporal1+ 5,$stamp_temporal1+5, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier23','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'C','RACK01-DEV03', 'DEVICE Failure on RACK01', 3, $stamp_temporal1+ 6,$stamp_temporal1+6, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier24','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'C', 'RACK01-DEV02','DEVICE Failure on RACK01',3, $stamp_temporal1+ 6,$stamp_temporal1 +6, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier25','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'C', 'RACK01-DEV01','DEVICE Failure on RACK01', 3, $stamp_temporal1+6,$stamp_temporal1+6, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier31','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'A','RACK01-FAN07','FAN Failure reported for RACK01', 2, $stamp_temporal2,$stamp_temporal2, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier32','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'B','RACK01','POWER Supply Failure reported for RACK01',  4, $stamp_temporal2+ 5,$stamp_temporal2+5, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier33','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'C','RACK01-DEV03', 'DEVICE Failure on RACK01', 3, $stamp_temporal2+ 6,$stamp_temporal2+6, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier34','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'C', 'RACK01-DEV02','DEVICE Failure on RACK01',3, $stamp_temporal2+ 6,$stamp_temporal2 +6, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier35','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'C', 'RACK01-DEV01','DEVICE Failure on RACK01', 3, $stamp_temporal2+6,$stamp_temporal2+6, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\n\r\nexit\r\nEOF\r\n\r\nsleep 1m\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\nupdate alerts.status set Severity = 0 where Manager like 'ADX';\r\ngo\r\nexit\r\nEOF\r\n\r\nsleep 1m\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\ndelete from alerts.status where Manager like 'ADX' ;\r\ngo\r\nexit\r\nEOF\r\n\r\nsleep 1m\r\n\r\necho \"Done.\" $i\r\ndone\r\n```\r\n\r\n\r\n***\r\n\r\n## 10-3: Insert historical events into event manager\r\n\r\nCopy historic event generating script to ObjectServer pod\r\n\r\n```sh\r\ncat pattern_events_historic.sh | oc exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/pattern_events_historic.sh\"\r\n```\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/pattern_events_historic.sh\"\r\n```\r\nNow execute this script to simulate historic data set replay.( It will take approx 6 mins)\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/pattern_events_historic.sh\r\n```\r\n\r\nYou can ignore message \"Warning: Failed to find tar in the following directories : /bin /usr/bin\" \r\n\r\nOnce replay is finished ( takes approx 5-6 mins), you can start training.\r\n\r\n## 10-4: Run training for temporal patterns\r\n\r\nGet image for trainer pod\r\n\r\n```sh\r\noc get noi evtmanager -o yaml | grep ea-events-tooling\r\n```\r\n\r\n![](images/trainingpod.png)\r\n\r\nRun training with algorithm related-events to learn temporal grouping and pattern policies from historic data.\r\n\r\n```sh\r\noc delete pod trainer\r\n```\r\n\r\n```sh\r\noc run trainer -it --command=true --restart=Never --env=LICENSE=accept --image=cp.icr.io/cp/noi/ea-events-tooling:14.0.0-20220614134620BST --overrides='{\"apiVersion\":\"v1\", \"spec\":{\"imagePullSecrets\":[{\"name\":\"noi-registry-secret\"}]}}' runTraining.sh -- -r evtmanager -a related-events\r\n```\r\n\r\n![](images/TrainingSuccess.png)\r\n\r\n***\r\n\r\n## 10-5: Check policies created from learning\r\n\r\nLaunch \"Policies\" using new UI URL.\r\n![](images/LaunchPolicies.png)\r\n\r\nFilter policies for temporal patterns.\r\n\r\n![](images/ManagePolicies_TP.png)\r\n\r\nCheck details of Temporal pattern policy by clicking \"Preview Policy\"\r\n\r\n![](images/TP_preview.png)\r\n\r\n![](images/TP_policyDetails.png)\r\n\r\nTemporal pattern policies can be edited. \r\n\r\nFor more information on Temporal Pattern Policy editing :\r\nhttps://www.ibm.com/docs/en/noi/1.6.5?topic=policies-editing\r\n\r\nNote: Policy Details UI is only availabel in new UI\r\n\r\n## 10-6: Replay events\r\n\r\nCreate pattern_events_live.sh script (as below)Â  that simulates a set of events into the ObjectServer for Location='WINNIPEG'. starttimeÂ  is EPOCH conversion for current time.\r\n\r\n```sh\r\n#!/bin/bash\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\n\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('IdentifierX1','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'A','RACK01-FAN07','FAN Failure reported for RACK01', 2, getdate,getdate, 40373,'EventId', 'WINNIPEG',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('IdentifierX2','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'B','RACK01','POWER Supply Failure reported for RACK01',  4, getdate + 5,getdate+5, 40373,'EventId', 'WINNIPEG',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('IdentifierX3','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'C','RACK01-DEV03', 'DEVICE Failure on RACK01', 3, getdate + 6,getdate+6, 40373,'EventId', 'WINNIPEG',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('IdentifierX4','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'C', 'RACK01-DEV02','DEVICE Failure on RACK01',3, getdate + 6,getdate+6, 40373,'EventId', 'WINNIPEG',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('IdentifierX5','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'C', 'RACK01-DEV01','DEVICE Failure on RACK01', 3, getdate +6,getdate, 40373,'EventId', 'WINNIPEG',1);\r\n\r\ngo\r\nEOF\r\n\r\n```\r\nCopy script to objectserver pod.\r\n\r\n```sh\r\ncat pattern_events_live.sh | kubectl exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/pattern_events_live.sh\"\r\n```\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/pattern_events_live.sh\"\r\n```\r\nReplay Sample Events\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/pattern_events_live.sh\r\n```\r\n\r\nYou will see output like this:\r\n\r\n![](images/TPReplayResult.png)\r\n\r\nclick on any dot in clock icon column to check details of temporal pattern.\r\n\r\n![](images/TP_Investigate.png)\r\n\r\n\r\nThat completes the Temporal pattern section of the lab.","type":"Mdx","contentDigest":"8d633cb39a3cb45a0b104a307849d55d","owner":"gatsby-plugin-mdx","counter":1042},"frontmatter":{"title":"Temporal Patterns","description":"Watson AIOps temporal patterns"},"exports":{},"rawBody":"---\r\ntitle: Temporal Patterns\r\ndescription: Watson AIOps temporal patterns\r\n---\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>10-1: Overview</AnchorLink>\r\n  <AnchorLink>10-2: Create historical data for learning</AnchorLink>\r\n  <AnchorLink>10-3: Insert historical events into event manager</AnchorLink>\r\n  <AnchorLink>10-4: Run training for temporal patterns</AnchorLink>\r\n  <AnchorLink>10-5: Check policies created from learning</AnchorLink>\r\n  <AnchorLink>10-6: Replay Events</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## 10-1: Overview\r\n\r\nThis module focuses on temporal patterns that group events based on learned patterns in time-based relations. \r\n\r\n**What are Temporal patterns?**\r\n\r\nThe temporal pattern analytic identifies patterns of behavior among temporal groups, which are similar, but occur on different resources. Subsequent events, which match the pattern and occur on a new, common resource are grouped.\r\n\r\n**How does it work?**\r\n\r\nFirst, temporal grouping Policies are generated when 2, or more, events occur together (i.e. each less than 20 mins apart).\r\n\r\nTemporal patterns are created by training when 3, or more, Temporal grouping Policies are generated, for events with common Event Types. But only if the events which make up the pattern have the same Resource (aka Node) field.\r\n\r\nSo to create a pattern, we need to produce 3 Related Events Temporal Policies, with common Event Types, whose Resource values (within a policy) are the same.\r\n\r\nThe generation of Temporal Policies is done based on the First Occurrence of an Event and uses its Identifier to identify it. The First Occurrance is set with a Unix epoch value.\r\n\r\n***\r\n\r\n## 10-2: Create historical data for learning\r\n\r\nIn order to understand how Watson AIOps learns temporal patterns, we will simulate a sample set of events and train analytics engine on the simulated historical dataset.\r\nIn this historical dataset we are simulating same issue in 3 differetn locations (SASKATOON,EDMONTON,VANCOUVER) , that will generate 3 temporal policies and 1 temporal pattern.\r\n\r\nFor replay we will use 4th Location (WINNIPEG) to simulate same issue , Watson AIOps applies the learned pattern policy to group events from another location that is not seen in past.\r\n\r\nLogin into OCP cluster using oc login.\r\n\r\nCreate pattern_events_historic.sh script (as below)Â  that simulates a historic set of events into the ObjectServer. starttime in script is EPOCH conversion for the time in history (9AM Jul 1, 2022) so we have a minimum 3-4 weeks of sample data generated for machine learning.\r\n\r\n```sh\r\n#!/bin/bash\r\nstarttime=1656363600\r\nstamp=$starttime\r\nfor (( i=0; i<=4; i++ ))\r\ndo\r\nstamp_temporal=$(($starttime+$i*6*86400))\r\nstamp_temporal1=$(($starttime+$i*5*71500))\r\nstamp_temporal2=$(($starttime+$i*4*72500))\r\n\r\necho $i $stamp_temporal $stamp_temporal1 $stamp_temporal2\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\n\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier11','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'A','RACK01-FAN07','FAN Failure reported for RACK01', 2, $stamp_temporal,$stamp_temporal, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier12','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'B','RACK01','POWER Supply Failure reported for RACK01',  4, $stamp_temporal + 5,$stamp_temporal+5, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier13','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'C','RACK01-DEV03', 'DEVICE Failure on RACK01', 3, $stamp_temporal + 6,$stamp_temporal+6, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier14','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'C', 'RACK01-DEV02','DEVICE Failure on RACK01',3, $stamp_temporal + 6,$stamp_temporal+6, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier15','ADX-A', 'SAS-BLDG-01-FLOOR-01', 'C', 'RACK01-DEV01','DEVICE Failure on RACK01', 3, $stamp_temporal +6,$stamp_temporal, 40373,'EventId', 'SASKATOON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier21','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'A','RACK01-FAN07','FAN Failure reported for RACK01', 2, $stamp_temporal1,$stamp_temporal1, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier22','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'B','RACK01','POWER Supply Failure reported for RACK01',  4, $stamp_temporal1+ 5,$stamp_temporal1+5, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier23','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'C','RACK01-DEV03', 'DEVICE Failure on RACK01', 3, $stamp_temporal1+ 6,$stamp_temporal1+6, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier24','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'C', 'RACK01-DEV02','DEVICE Failure on RACK01',3, $stamp_temporal1+ 6,$stamp_temporal1 +6, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier25','ADX-B', 'EDM-BLDG-02-FLOOR-01', 'C', 'RACK01-DEV01','DEVICE Failure on RACK01', 3, $stamp_temporal1+6,$stamp_temporal1+6, 40373,'EventId', 'EDMONTON',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier31','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'A','RACK01-FAN07','FAN Failure reported for RACK01', 2, $stamp_temporal2,$stamp_temporal2, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('SampleIdentifier32','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'B','RACK01','POWER Supply Failure reported for RACK01',  4, $stamp_temporal2+ 5,$stamp_temporal2+5, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier33','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'C','RACK01-DEV03', 'DEVICE Failure on RACK01', 3, $stamp_temporal2+ 6,$stamp_temporal2+6, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier34','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'C', 'RACK01-DEV02','DEVICE Failure on RACK01',3, $stamp_temporal2+ 6,$stamp_temporal2 +6, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('SampleIdentifier35','ADX-B', 'VAN-BLDG-02-FLOOR-01', 'C', 'RACK01-DEV01','DEVICE Failure on RACK01', 3, $stamp_temporal2+6,$stamp_temporal2+6, 40373,'EventId', 'VANCOUVER',1);\r\ngo\r\n\r\nexit\r\nEOF\r\n\r\nsleep 1m\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\nupdate alerts.status set Severity = 0 where Manager like 'ADX';\r\ngo\r\nexit\r\nEOF\r\n\r\nsleep 1m\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\ndelete from alerts.status where Manager like 'ADX' ;\r\ngo\r\nexit\r\nEOF\r\n\r\nsleep 1m\r\n\r\necho \"Done.\" $i\r\ndone\r\n```\r\n\r\n\r\n***\r\n\r\n## 10-3: Insert historical events into event manager\r\n\r\nCopy historic event generating script to ObjectServer pod\r\n\r\n```sh\r\ncat pattern_events_historic.sh | oc exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/pattern_events_historic.sh\"\r\n```\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/pattern_events_historic.sh\"\r\n```\r\nNow execute this script to simulate historic data set replay.( It will take approx 6 mins)\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/pattern_events_historic.sh\r\n```\r\n\r\nYou can ignore message \"Warning: Failed to find tar in the following directories : /bin /usr/bin\" \r\n\r\nOnce replay is finished ( takes approx 5-6 mins), you can start training.\r\n\r\n## 10-4: Run training for temporal patterns\r\n\r\nGet image for trainer pod\r\n\r\n```sh\r\noc get noi evtmanager -o yaml | grep ea-events-tooling\r\n```\r\n\r\n![](images/trainingpod.png)\r\n\r\nRun training with algorithm related-events to learn temporal grouping and pattern policies from historic data.\r\n\r\n```sh\r\noc delete pod trainer\r\n```\r\n\r\n```sh\r\noc run trainer -it --command=true --restart=Never --env=LICENSE=accept --image=cp.icr.io/cp/noi/ea-events-tooling:14.0.0-20220614134620BST --overrides='{\"apiVersion\":\"v1\", \"spec\":{\"imagePullSecrets\":[{\"name\":\"noi-registry-secret\"}]}}' runTraining.sh -- -r evtmanager -a related-events\r\n```\r\n\r\n![](images/TrainingSuccess.png)\r\n\r\n***\r\n\r\n## 10-5: Check policies created from learning\r\n\r\nLaunch \"Policies\" using new UI URL.\r\n![](images/LaunchPolicies.png)\r\n\r\nFilter policies for temporal patterns.\r\n\r\n![](images/ManagePolicies_TP.png)\r\n\r\nCheck details of Temporal pattern policy by clicking \"Preview Policy\"\r\n\r\n![](images/TP_preview.png)\r\n\r\n![](images/TP_policyDetails.png)\r\n\r\nTemporal pattern policies can be edited. \r\n\r\nFor more information on Temporal Pattern Policy editing :\r\nhttps://www.ibm.com/docs/en/noi/1.6.5?topic=policies-editing\r\n\r\nNote: Policy Details UI is only availabel in new UI\r\n\r\n## 10-6: Replay events\r\n\r\nCreate pattern_events_live.sh script (as below)Â  that simulates a set of events into the ObjectServer for Location='WINNIPEG'. starttimeÂ  is EPOCH conversion for current time.\r\n\r\n```sh\r\n#!/bin/bash\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\n\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('IdentifierX1','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'A','RACK01-FAN07','FAN Failure reported for RACK01', 2, getdate,getdate, 40373,'EventId', 'WINNIPEG',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type ) values ('IdentifierX2','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'B','RACK01','POWER Supply Failure reported for RACK01',  4, getdate + 5,getdate+5, 40373,'EventId', 'WINNIPEG',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('IdentifierX3','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'C','RACK01-DEV03', 'DEVICE Failure on RACK01', 3, getdate + 6,getdate+6, 40373,'EventId', 'WINNIPEG',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('IdentifierX4','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'C', 'RACK01-DEV02','DEVICE Failure on RACK01',3, getdate + 6,getdate+6, 40373,'EventId', 'WINNIPEG',1);\r\ngo\r\ninsert into alerts.status (Identifier, Manager, Node, AlertGroup, AlertKey, Summary, Severity, FirstOccurrence, LastOccurrence,Class,EventId, Location, Type) values ('IdentifierX5','ADX-A', 'WIN-BLDG-01-FLOOR-01', 'C', 'RACK01-DEV01','DEVICE Failure on RACK01', 3, getdate +6,getdate, 40373,'EventId', 'WINNIPEG',1);\r\n\r\ngo\r\nEOF\r\n\r\n```\r\nCopy script to objectserver pod.\r\n\r\n```sh\r\ncat pattern_events_live.sh | kubectl exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/pattern_events_live.sh\"\r\n```\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/pattern_events_live.sh\"\r\n```\r\nReplay Sample Events\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/pattern_events_live.sh\r\n```\r\n\r\nYou will see output like this:\r\n\r\n![](images/TPReplayResult.png)\r\n\r\nclick on any dot in clock icon column to check details of temporal pattern.\r\n\r\n![](images/TP_Investigate.png)\r\n\r\n\r\nThat completes the Temporal pattern section of the lab.","fileAbsolutePath":"C:/Users/103537778/git/waiops-tech-jam/src/pages/tutorials/aiops/temporalPatterns/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}