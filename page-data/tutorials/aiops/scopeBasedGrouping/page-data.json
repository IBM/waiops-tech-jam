{"componentChunkName":"component---src-pages-tutorials-aiops-scope-based-grouping-index-mdx","path":"/tutorials/aiops/scopeBasedGrouping/","result":{"pageContext":{"frontmatter":{"title":"Configure scope-based grouping","description":"Define scope-based event grouping policies"},"relativePagePath":"/tutorials/aiops/scopeBasedGrouping/index.mdx","titleType":"page","MdxNode":{"id":"366c8f06-b9ba-5914-813b-0571f21ad605","children":[],"parent":"350ce24c-3e0b-5638-b8c7-666eef762234","internal":{"content":"---\r\ntitle: Configure scope-based grouping\r\ndescription: Define scope-based event grouping policies\r\n---\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>7-1: Overview</AnchorLink>\r\n  <AnchorLink>7-2: Create a scope-based event grouping policy to group by Service</AnchorLink>\r\n  <AnchorLink>7-3: Inject some sample Service events</AnchorLink>\r\n  <AnchorLink>7-4: Create a scope-based event grouping policy to group by Location</AnchorLink>\r\n  <AnchorLink>7-5: Inject some sample Location events</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## 7-1: Overview\r\n\r\nThis module considers a second method of doing event correlation: scope-based event grouping. Scope-based event grouping is based on a basic premise that events occurring at the \"same place\", and at the \"same time\" are likely related.\r\n\r\nFor example, if a remote cell site has a power failure, there will likely be alarms generated from equipment there, along with building management alarms, and so on, in a relatively short space of time. In this case, the scope might be the remote location, and the time window might be, say, a 10 minute window. Another example is where there is a hardware failure in one of the servers that contribute to the provision of a service, such as an application or website. This failure may result in alarms being generated from the dependent parts. In this case, the scope might be the common application or service name, and the scope might be, say, a 5 minute window.\r\n\r\nScope-based grouping is provided by Watson for AIOps Event Manager so that operations teams can input local knowledge on how events should be grouped. A UI is provided so that scope-based event **grouping policies** can be created and maintained.\r\n\r\nIn practice, scope-based event grouping is very powerful and yields tremendous event reduction by virtue of grouping events, thereby effectively reducing the number of rows presented to operators. The level of reduction achieved varies depending on the data sets, but it is typically **upwards of 60%**. A major north-American financial institution reported that scope-based event grouping helped them to reduce the number of tickets they open by around 70%, by opening tickets based on groups of events rather than individual events.\r\n\r\nBy the end of this module, you will have created two scope-based event grouping policies, injected some test events and observed the grouping. The second example will include overlap with a topology-based event correlation scenario in the previous module to demonstrate so-called \"super grouping\".\r\n\r\n## 7-2: Create a scope-based event grouping policy to group by Service\r\n\r\nLog in to Watson for AIOps Event Manager and navigate to: **Netcool WebGUI**.\r\n\r\nNavigate to: **Insights > Scope Based Grouping**\r\n\r\nComplete the following steps to create a policy based on common application name:\r\n\r\n* Click on: **Create policy**\r\n* Give the policy a name - eg: **GroupByService**\r\n* Complete the Description field with something appropriate - eg: \"Policy to group events by common service name\"\r\n* Leave the **Priority** field set to 1\r\n* The default **Datasource** should already be checked\r\n* From the **Events** section, select: **Specify conditions**\r\n* Set **Condition 1** to: **Service** field **Is not empty**\r\n* Set the **Action** parameter to define the scope: set it to **Service**\r\n* Set the **Time Window** to 300 seconds (5 minutes)\r\n* Set the **Enabled** toggle switch to **On** and **Save**.\r\n\r\nYou should end up with something like the following:\r\n\r\n![](images/Scope1.png)\r\n\r\n## 7-3: Inject some sample Service events\r\n\r\nCreate a new local file and call it `scope_events.sh` and paste the following content into it:\r\n\r\n```sh\r\n#!/bin/bash\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\n\r\ndelete from alerts.status;\r\ngo\r\n\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('db2server1clean1', 'db2server1', 'Running cleanup automation script', 2, 13, 'Syslog', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('db2server1clean2', 'db2server1', 'Error: unable to run cleanup automation script', 3, 1, 'Syslog', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('db2server1syslog', 'db2server1', '/dev/sda1 is 100% full', 5, 1, 'Syslog', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('db2server1db', 'db2server1', 'Database is inaccessible', 5, 1, 'ITM6', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('websphere01', 'websphere01', 'websphere01 unable to access transaction database', 4, 1, 'ITM6', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('websphere02', 'websphere02', 'websphere02 unable to access transaction database', 4, 1, 'ITM6', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('widgetcom', 'www.widget.com', 'www.widget.com: response time >30s', 5, 1, 'ITM6', 'WebService');\r\n\r\ngo\r\nexit\r\nEOF\r\n\r\n```\r\n\r\nNext, use the following command to copy your new script to the ObjectServer pod and set its file permissions:\r\n\r\n```sh\r\ncat scope_events.sh | oc exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/scope_events.sh\"\r\n```\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/scope_events.sh\"\r\n```\r\n\r\nFinally, use the following commands to execute this script to generate the example events:\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/scope_events.sh\r\n```\r\n\r\nYou can ignore the message: `Warning: Failed to find tar in the following directories : /bin /usr/bin`\r\n\r\nYou should end up with something like the following:\r\n\r\n![](images/events.png)\r\n\r\n## 7-4: Create a scope-based event grouping policy to group by Location\r\n\r\nLog in to Watson for AIOps Event Manager and navigate to: Netcool WebGUI.\r\n\r\nNavigate to: **Insights > Scope Based Grouping**\r\n\r\nComplete the following steps to create a policy based on common geographic location:\r\n\r\n* Click on: **Create policy**\r\n* Give the policy a name - eg: **GroupByLocation**\r\n* Complete the Description field with something appropriate - eg: Policy to group events by common location\r\n* Leave the **Priority** field set to 1\r\n* The default **Datasource** should already be checked\r\n* From the **Events** section, select: **Specify conditions**\r\n* Set **Condition 1** to: **Location** field **Is not empty**\r\n* Set the **Action** parameter to define the scope: set it to **Location**\r\n* Set the **Time Window** to 300 seconds (5 minutes)\r\n* Set the **Enabled** toggle switch to **On** and **Save**\r\n\r\nYou should end up with something like the following:\r\n![](images/Scope2.png)\r\n\r\n**NOTE:** The Priority specifies the order in which the Policies will be tried. Once a scope-based event grouping Policy matches and the scope is set for an event, all subsequent Policies will be skipped. If two policies have the same Priority value (as in this case), the execution order is indeterminate.\r\n\r\n## 7-5: Inject some sample Location events\r\n\r\nCreate a new local file and call it `super_group_events.sh` and paste the following content into it:\r\n\r\n```sh\r\n#!/bin/bash\r\n\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\n\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('rackserver01', 'racksvr01', 'Warning: hardware fault detected in processing array', 5, 1, 'SNMP', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('esx1', 'esx01', 'Warning: low resources', 3, 1, 'VMware', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('computer1000esx', 'computer1000', 'Auto-scaling failed: unable to allocate resources', 4, 1, 'VMware', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('computer1001esx', 'computer1001', 'Auto-scaling failed: unable to allocate resources', 4, 1, 'VMware', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('server100esx', 'server100', 'Auto-scaling failed: unable to allocate resources', 4, 1, 'VMware', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('server200esx', 'server200', 'Auto-scaling failed: unable to allocate resources', 4, 1, 'VMware', 'London01');\r\ngo \r\n\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup) values ('cpu01', 'cpu01', 'cpu01 on computer1000 >90% utilisation', 5, 1, 'VMware');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup) values ('cpu02', 'cpu02', 'cpu02 on computer1000 >80% utilisation', 4, 1, 'VMware');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup) values ('billing', 'billing', 'Billing application ResponseTime >10000msec', 4, 1, 'Instana');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup) values ('webserver', 'webserver', 'Webserver service degraded', 5, 1, 'Instana');\r\ngo\r\n\r\nexit\r\n\r\nEOF\r\n```\r\n\r\nNext, use the following command to copy your new script to the ObjectServer pod and set its file permissions:\r\n\r\n```sh\r\ncat super_group_events.sh | oc exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/super_group_events.sh\"\r\n```\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/super_group_events.sh\"\r\n```\r\nFinally, use the following commands to execute this script to generate the example events:\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/super_group_events.sh\r\n```\r\nYou will observe three groups of events merged together: two created by topology-based event grouping, and one created by scope-based event grouping.\r\n\r\n**NOTE:** You may need to wait a few seconds and refresh the event view before the grouping is visible.\r\n\r\nSelect any event and run the tool from the Alert Viewer. You should end up with something like the following:\r\n\r\n![](images/events2.png)\r\n\r\nYou can click on the grouping buttons on the right to inspect the details of the group. Topology-based grouping will show a preview of the topology that has effected the grouping. Note how you have events grouped together by both topology-based grouping and scope-based grouping in the \"super group\". The events from computer1000 and computer1001 are found in both the topology-based correlation template groups, as well as the scope-based event grouping policy. Hence these events are members of two different group types, and so the two groups are automatically merged together due to these common events.\r\n\r\nYou have now completed this module and are ready for the next module \"Enable optional grouping features\".\r\n\r\n[Reference Blog](https://community.ibm.com/community/user/aiops/blogs/zane-bray1/2022/06/27/getting-started-with-watson-aiops-event-manager-67)\r\n","type":"Mdx","contentDigest":"4528698d2f34c346204e9252f8bf43d8","owner":"gatsby-plugin-mdx","counter":1039},"frontmatter":{"title":"Configure scope-based grouping","description":"Define scope-based event grouping policies"},"exports":{},"rawBody":"---\r\ntitle: Configure scope-based grouping\r\ndescription: Define scope-based event grouping policies\r\n---\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>7-1: Overview</AnchorLink>\r\n  <AnchorLink>7-2: Create a scope-based event grouping policy to group by Service</AnchorLink>\r\n  <AnchorLink>7-3: Inject some sample Service events</AnchorLink>\r\n  <AnchorLink>7-4: Create a scope-based event grouping policy to group by Location</AnchorLink>\r\n  <AnchorLink>7-5: Inject some sample Location events</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## 7-1: Overview\r\n\r\nThis module considers a second method of doing event correlation: scope-based event grouping. Scope-based event grouping is based on a basic premise that events occurring at the \"same place\", and at the \"same time\" are likely related.\r\n\r\nFor example, if a remote cell site has a power failure, there will likely be alarms generated from equipment there, along with building management alarms, and so on, in a relatively short space of time. In this case, the scope might be the remote location, and the time window might be, say, a 10 minute window. Another example is where there is a hardware failure in one of the servers that contribute to the provision of a service, such as an application or website. This failure may result in alarms being generated from the dependent parts. In this case, the scope might be the common application or service name, and the scope might be, say, a 5 minute window.\r\n\r\nScope-based grouping is provided by Watson for AIOps Event Manager so that operations teams can input local knowledge on how events should be grouped. A UI is provided so that scope-based event **grouping policies** can be created and maintained.\r\n\r\nIn practice, scope-based event grouping is very powerful and yields tremendous event reduction by virtue of grouping events, thereby effectively reducing the number of rows presented to operators. The level of reduction achieved varies depending on the data sets, but it is typically **upwards of 60%**. A major north-American financial institution reported that scope-based event grouping helped them to reduce the number of tickets they open by around 70%, by opening tickets based on groups of events rather than individual events.\r\n\r\nBy the end of this module, you will have created two scope-based event grouping policies, injected some test events and observed the grouping. The second example will include overlap with a topology-based event correlation scenario in the previous module to demonstrate so-called \"super grouping\".\r\n\r\n## 7-2: Create a scope-based event grouping policy to group by Service\r\n\r\nLog in to Watson for AIOps Event Manager and navigate to: **Netcool WebGUI**.\r\n\r\nNavigate to: **Insights > Scope Based Grouping**\r\n\r\nComplete the following steps to create a policy based on common application name:\r\n\r\n* Click on: **Create policy**\r\n* Give the policy a name - eg: **GroupByService**\r\n* Complete the Description field with something appropriate - eg: \"Policy to group events by common service name\"\r\n* Leave the **Priority** field set to 1\r\n* The default **Datasource** should already be checked\r\n* From the **Events** section, select: **Specify conditions**\r\n* Set **Condition 1** to: **Service** field **Is not empty**\r\n* Set the **Action** parameter to define the scope: set it to **Service**\r\n* Set the **Time Window** to 300 seconds (5 minutes)\r\n* Set the **Enabled** toggle switch to **On** and **Save**.\r\n\r\nYou should end up with something like the following:\r\n\r\n![](images/Scope1.png)\r\n\r\n## 7-3: Inject some sample Service events\r\n\r\nCreate a new local file and call it `scope_events.sh` and paste the following content into it:\r\n\r\n```sh\r\n#!/bin/bash\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\n\r\ndelete from alerts.status;\r\ngo\r\n\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('db2server1clean1', 'db2server1', 'Running cleanup automation script', 2, 13, 'Syslog', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('db2server1clean2', 'db2server1', 'Error: unable to run cleanup automation script', 3, 1, 'Syslog', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('db2server1syslog', 'db2server1', '/dev/sda1 is 100% full', 5, 1, 'Syslog', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('db2server1db', 'db2server1', 'Database is inaccessible', 5, 1, 'ITM6', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('websphere01', 'websphere01', 'websphere01 unable to access transaction database', 4, 1, 'ITM6', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('websphere02', 'websphere02', 'websphere02 unable to access transaction database', 4, 1, 'ITM6', 'WebService');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Service) values ('widgetcom', 'www.widget.com', 'www.widget.com: response time >30s', 5, 1, 'ITM6', 'WebService');\r\n\r\ngo\r\nexit\r\nEOF\r\n\r\n```\r\n\r\nNext, use the following command to copy your new script to the ObjectServer pod and set its file permissions:\r\n\r\n```sh\r\ncat scope_events.sh | oc exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/scope_events.sh\"\r\n```\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/scope_events.sh\"\r\n```\r\n\r\nFinally, use the following commands to execute this script to generate the example events:\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/scope_events.sh\r\n```\r\n\r\nYou can ignore the message: `Warning: Failed to find tar in the following directories : /bin /usr/bin`\r\n\r\nYou should end up with something like the following:\r\n\r\n![](images/events.png)\r\n\r\n## 7-4: Create a scope-based event grouping policy to group by Location\r\n\r\nLog in to Watson for AIOps Event Manager and navigate to: Netcool WebGUI.\r\n\r\nNavigate to: **Insights > Scope Based Grouping**\r\n\r\nComplete the following steps to create a policy based on common geographic location:\r\n\r\n* Click on: **Create policy**\r\n* Give the policy a name - eg: **GroupByLocation**\r\n* Complete the Description field with something appropriate - eg: Policy to group events by common location\r\n* Leave the **Priority** field set to 1\r\n* The default **Datasource** should already be checked\r\n* From the **Events** section, select: **Specify conditions**\r\n* Set **Condition 1** to: **Location** field **Is not empty**\r\n* Set the **Action** parameter to define the scope: set it to **Location**\r\n* Set the **Time Window** to 300 seconds (5 minutes)\r\n* Set the **Enabled** toggle switch to **On** and **Save**\r\n\r\nYou should end up with something like the following:\r\n![](images/Scope2.png)\r\n\r\n**NOTE:** The Priority specifies the order in which the Policies will be tried. Once a scope-based event grouping Policy matches and the scope is set for an event, all subsequent Policies will be skipped. If two policies have the same Priority value (as in this case), the execution order is indeterminate.\r\n\r\n## 7-5: Inject some sample Location events\r\n\r\nCreate a new local file and call it `super_group_events.sh` and paste the following content into it:\r\n\r\n```sh\r\n#!/bin/bash\r\n\r\n\r\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\r\n\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('rackserver01', 'racksvr01', 'Warning: hardware fault detected in processing array', 5, 1, 'SNMP', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('esx1', 'esx01', 'Warning: low resources', 3, 1, 'VMware', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('computer1000esx', 'computer1000', 'Auto-scaling failed: unable to allocate resources', 4, 1, 'VMware', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('computer1001esx', 'computer1001', 'Auto-scaling failed: unable to allocate resources', 4, 1, 'VMware', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('server100esx', 'server100', 'Auto-scaling failed: unable to allocate resources', 4, 1, 'VMware', 'London01');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup, Location) values ('server200esx', 'server200', 'Auto-scaling failed: unable to allocate resources', 4, 1, 'VMware', 'London01');\r\ngo \r\n\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup) values ('cpu01', 'cpu01', 'cpu01 on computer1000 >90% utilisation', 5, 1, 'VMware');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup) values ('cpu02', 'cpu02', 'cpu02 on computer1000 >80% utilisation', 4, 1, 'VMware');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup) values ('billing', 'billing', 'Billing application ResponseTime >10000msec', 4, 1, 'Instana');\r\ninsert into alerts.status (Identifier, Node, Summary, Severity, Type, AlertGroup) values ('webserver', 'webserver', 'Webserver service degraded', 5, 1, 'Instana');\r\ngo\r\n\r\nexit\r\n\r\nEOF\r\n```\r\n\r\nNext, use the following command to copy your new script to the ObjectServer pod and set its file permissions:\r\n\r\n```sh\r\ncat super_group_events.sh | oc exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/super_group_events.sh\"\r\n```\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/super_group_events.sh\"\r\n```\r\nFinally, use the following commands to execute this script to generate the example events:\r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/super_group_events.sh\r\n```\r\nYou will observe three groups of events merged together: two created by topology-based event grouping, and one created by scope-based event grouping.\r\n\r\n**NOTE:** You may need to wait a few seconds and refresh the event view before the grouping is visible.\r\n\r\nSelect any event and run the tool from the Alert Viewer. You should end up with something like the following:\r\n\r\n![](images/events2.png)\r\n\r\nYou can click on the grouping buttons on the right to inspect the details of the group. Topology-based grouping will show a preview of the topology that has effected the grouping. Note how you have events grouped together by both topology-based grouping and scope-based grouping in the \"super group\". The events from computer1000 and computer1001 are found in both the topology-based correlation template groups, as well as the scope-based event grouping policy. Hence these events are members of two different group types, and so the two groups are automatically merged together due to these common events.\r\n\r\nYou have now completed this module and are ready for the next module \"Enable optional grouping features\".\r\n\r\n[Reference Blog](https://community.ibm.com/community/user/aiops/blogs/zane-bray1/2022/06/27/getting-started-with-watson-aiops-event-manager-67)\r\n","fileAbsolutePath":"C:/Users/103537778/git/waiops-tech-jam/src/pages/tutorials/aiops/scopeBasedGrouping/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}