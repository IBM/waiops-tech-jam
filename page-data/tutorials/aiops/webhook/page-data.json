{"componentChunkName":"component---src-pages-tutorials-aiops-webhook-index-mdx","path":"/tutorials/aiops/webhook/","result":{"pageContext":{"frontmatter":{"title":"Set up a webhook integration","description":"Set up webhook integrations in Event Manager"},"relativePagePath":"/tutorials/aiops/webhook/index.mdx","titleType":"page","MdxNode":{"id":"8c5fe2d6-2ce1-5d64-89bd-34695d2854bc","children":[],"parent":"1c0ea9be-95d2-5f11-9b2a-55b13155758a","internal":{"content":"---\ntitle: Set up a webhook integration\ndescription: Set up webhook integrations in Event Manager\n---\n<AnchorLinks>\n  <AnchorLink>4-1: Overview</AnchorLink>\n  <AnchorLink>4-2: Create a new webhook integration with Microsoft Azure </AnchorLink>\n  <AnchorLink>4-3: Create a new generic webhook integration with SevOne</AnchorLink>\n</AnchorLinks>\n\n\n## 4-1: Overview\n\nThis module focuses on the set up of two webhook integrations, so that events can be received from a cloud event source. The examples include an off-the-shelf integration with Microsoft Azure, and a generic webhook integration with SevOne.\n\nBy the end of this module, you will have configured two webhooks and be receiving events from your target sources.\n\n## 4-2: Create a new webhook integration with Microsoft Azure\n\nWatson for AIOps Event Manager comes with a number of built-in off-the-shelf event receivers that are pre-configured to be able to receive and interpret event payloads coming from certain types of event source, and then normalise them and insert them into Event Manager as normal events. The Microsoft Azure event receiver provides monitoring services for Azure resources and will receive events of the following types:\n\n* Azure Classic Metrics and Azure Metrics\n* Azure Activity Log Alerts\n* Azure Auto-shutdown notification\n* Azure Auto-scales notification\n* Azure Log Search Alerts\n\nTo create a new Microsoft Azure event receiver integration, navigate to: **Administration → Integration with other systems**. Click on **New integration** and **Configure** a new integration for **Microsoft Azure**. Give the integration a name, and copy the provided webhook to a text editor and save it in a safe place. For security reasons, once you leave this page, you won't be able to access the webhook URL again.\n\nThe rest of the set-up is done in the Microsoft Azure portal, using the webhook URL just created. Instructions for doing so are provided in IBM documentation: https://www.ibm.com/docs/en/noi/1.6.5?topic=integrations-microsoft-azure\n\nOnce you have configured your event integration on both sides, return to the event view, and select the **AllEvents** or **Default** filter to see your new events.\n\nA full list of the incoming event integrations are documented here: https://www.ibm.com/docs/en/noi/1.6.5?topic=systems-configuring-incoming-integrations\n\n## 4-3: Create a new generic webhook integration with SevOne\n\nWhile the event integrations provide a large number of off-the-shelf integrations, it is typical that a user will have an event source for which there is no corresponding integration. Like everything with Netcool, where there is not an off-the-shelf option, there is always the generic option of integration as a backstop. In this exercise, we will create a generic webhook integration with SevOne.\n\nThe basic steps to creating a generic webhook integration are as follows:\n\n1. Assuming the event source is capable of sending to a webhook, obtain a sample payload from that source system.\n2. Create the integration via the Event Manager UI.\n3. Paste the sample JSON event payload into the sample box.\n4. Specify the payload-to-field mappings.\n5. Test the integration.\n\n\n**NOTE:** Just as for the Microsoft Azure integration, it is essential to copy the generated webhook URL and save it in a text document for future reference. After the integration is saved, there is no way to retrieve the URL.\n\nIn this exercise, it is assumed that the webhook configuration has been done already on the SevOne side, and it only awaits the webhook URL.\n\nFirst, navigate to: **Administration → Integration with other systems**. Click on **New integration** and **Configure** a new generic **Webhook** integration:\n\n![](images/generic_webhook.png)\n\nUse the following steps to set up your integration:\n\n* Configure the Name field with a label to identify your webhook - eg. \"SevOne\".\n* Copy the generated URL and save it to a text file.\n* Copy sample SevOne payload in **Example incoming request**\n* Configure the Event attributes.\n* Check the Result field, to ensure there are no errors, and the mapped values are showing.\n* Click Generate to generate a test event using the sample.\n* Check the event in the Event List to ensure it looks correct.\n* Copy the generated webhook over to your SevOne system as an event target.\n\nA sample SevOne payload is provided below, which may be used to set up this integration (copy into **Example incoming request**):\n\n```sh\n{\n\"deviceName\": \"testDeviceName\",\n\"occurrences\": \"4\",\n\"triggeringConditions\": \"Test\",\n\"thresholdId\": \"1-0\",\n\"check\": \"Website Alerts - testObjectName\",\n\"host\": \"testDeviceName\",\n\"assignedTo\": \"engineer@widgetcom.com\",\n\"pluginDescription\": \"HTTP Poller\",\n\"groupName\": \"All Devices\",\n\"objectName\": \"testObjectName\",\n\"routes\": [\"Netcool\"],\n\"alertMessage\": \"Default Alert Message\",\n\"hashtag\": \"hash\",\n\"policyId\": \"0\",\n\"hash\": \"hash\",\n\"url\": \"url\",\n\"deviceId\": \"-1\",\n\"alertState\": \"Alert\",\n\"sender\": \"SevOne\",\n\"objectAltName\": \"testObjectAltName\",\n\"thresholdName\": \"Website Alerts - testDeviceName - testObjectName\",\n\"alertType\": \"Metric\",\n\"alertId\": \"-1\",\n\"objectId\": \"-1\",\n\"cluster\": \"All Devices\",\n\"description\": \"Default Alert Message\",\n\"deviceIp\": \"10.1.2.3\",\n\"policyName\": \"Website Alerts\",\n\"objectDescription\": \"testObjectDescription\",\n\"pluginName\": \"HTTP\"\n}\n```\n\nRegarding the Event attributes, the following example mappings can be used:\n\n```sh\nSeverity: alertState = \"Emergency\" ? \"Critical\" : alertState = \"Alert\" ? \"Critical\" : alertState = \"Critical\" ? \"Critical\" : alertState = \"Error\" ? \"Major\" : alertState = \"Cleared\" ? \"Cleared\"\nSummary: description\nResource name: deviceName\nEvent type: policyName\n* Resolution:  alertState = \"Cleared\"\n* Sender: Name: \"SevOne\"\n* URL 1: URL: url\n* URL 1: Description: url\n\n* Fields marked with an asterisk first need to be added via the Optional event attributes link.\n```\n**NOTE:** Further information regarding the generic webhook event integration can be found here, including a table that maps the integration attributes to event fields in the Event Manager event store (Netcool/OMNIbus ObjectServer): https://www.ibm.com/docs/en/noi/1.6.5?topic=integrations-webhook\n\n**NOTE:** Complex mappings such as the Severity field example above can be mapped using JSONATA functions: http://docs.jsonata.org/object-functions.html\n\n\nThe completed configuration should look something like the following:\n\n![](images/mapping.png)\n\n\nThe sample event generated via the **Generate** function should look something like the following:\n\n![](images/event.png)\n\n\nYou have now completed this module and are ready for module \"Create sample topology in Watson for AIOps Event Manager\".\n\n\n[Reference Blog](https://community.ibm.com/community/user/aiops/blogs/zane-bray1/2022/04/22/getting-started-with-watson-aiops-event-manager-37)\n","type":"Mdx","contentDigest":"cb6eb414721b0cffcc67e713e8cf482b","owner":"gatsby-plugin-mdx","counter":899},"frontmatter":{"title":"Set up a webhook integration","description":"Set up webhook integrations in Event Manager"},"exports":{},"rawBody":"---\ntitle: Set up a webhook integration\ndescription: Set up webhook integrations in Event Manager\n---\n<AnchorLinks>\n  <AnchorLink>4-1: Overview</AnchorLink>\n  <AnchorLink>4-2: Create a new webhook integration with Microsoft Azure </AnchorLink>\n  <AnchorLink>4-3: Create a new generic webhook integration with SevOne</AnchorLink>\n</AnchorLinks>\n\n\n## 4-1: Overview\n\nThis module focuses on the set up of two webhook integrations, so that events can be received from a cloud event source. The examples include an off-the-shelf integration with Microsoft Azure, and a generic webhook integration with SevOne.\n\nBy the end of this module, you will have configured two webhooks and be receiving events from your target sources.\n\n## 4-2: Create a new webhook integration with Microsoft Azure\n\nWatson for AIOps Event Manager comes with a number of built-in off-the-shelf event receivers that are pre-configured to be able to receive and interpret event payloads coming from certain types of event source, and then normalise them and insert them into Event Manager as normal events. The Microsoft Azure event receiver provides monitoring services for Azure resources and will receive events of the following types:\n\n* Azure Classic Metrics and Azure Metrics\n* Azure Activity Log Alerts\n* Azure Auto-shutdown notification\n* Azure Auto-scales notification\n* Azure Log Search Alerts\n\nTo create a new Microsoft Azure event receiver integration, navigate to: **Administration → Integration with other systems**. Click on **New integration** and **Configure** a new integration for **Microsoft Azure**. Give the integration a name, and copy the provided webhook to a text editor and save it in a safe place. For security reasons, once you leave this page, you won't be able to access the webhook URL again.\n\nThe rest of the set-up is done in the Microsoft Azure portal, using the webhook URL just created. Instructions for doing so are provided in IBM documentation: https://www.ibm.com/docs/en/noi/1.6.5?topic=integrations-microsoft-azure\n\nOnce you have configured your event integration on both sides, return to the event view, and select the **AllEvents** or **Default** filter to see your new events.\n\nA full list of the incoming event integrations are documented here: https://www.ibm.com/docs/en/noi/1.6.5?topic=systems-configuring-incoming-integrations\n\n## 4-3: Create a new generic webhook integration with SevOne\n\nWhile the event integrations provide a large number of off-the-shelf integrations, it is typical that a user will have an event source for which there is no corresponding integration. Like everything with Netcool, where there is not an off-the-shelf option, there is always the generic option of integration as a backstop. In this exercise, we will create a generic webhook integration with SevOne.\n\nThe basic steps to creating a generic webhook integration are as follows:\n\n1. Assuming the event source is capable of sending to a webhook, obtain a sample payload from that source system.\n2. Create the integration via the Event Manager UI.\n3. Paste the sample JSON event payload into the sample box.\n4. Specify the payload-to-field mappings.\n5. Test the integration.\n\n\n**NOTE:** Just as for the Microsoft Azure integration, it is essential to copy the generated webhook URL and save it in a text document for future reference. After the integration is saved, there is no way to retrieve the URL.\n\nIn this exercise, it is assumed that the webhook configuration has been done already on the SevOne side, and it only awaits the webhook URL.\n\nFirst, navigate to: **Administration → Integration with other systems**. Click on **New integration** and **Configure** a new generic **Webhook** integration:\n\n![](images/generic_webhook.png)\n\nUse the following steps to set up your integration:\n\n* Configure the Name field with a label to identify your webhook - eg. \"SevOne\".\n* Copy the generated URL and save it to a text file.\n* Copy sample SevOne payload in **Example incoming request**\n* Configure the Event attributes.\n* Check the Result field, to ensure there are no errors, and the mapped values are showing.\n* Click Generate to generate a test event using the sample.\n* Check the event in the Event List to ensure it looks correct.\n* Copy the generated webhook over to your SevOne system as an event target.\n\nA sample SevOne payload is provided below, which may be used to set up this integration (copy into **Example incoming request**):\n\n```sh\n{\n\"deviceName\": \"testDeviceName\",\n\"occurrences\": \"4\",\n\"triggeringConditions\": \"Test\",\n\"thresholdId\": \"1-0\",\n\"check\": \"Website Alerts - testObjectName\",\n\"host\": \"testDeviceName\",\n\"assignedTo\": \"engineer@widgetcom.com\",\n\"pluginDescription\": \"HTTP Poller\",\n\"groupName\": \"All Devices\",\n\"objectName\": \"testObjectName\",\n\"routes\": [\"Netcool\"],\n\"alertMessage\": \"Default Alert Message\",\n\"hashtag\": \"hash\",\n\"policyId\": \"0\",\n\"hash\": \"hash\",\n\"url\": \"url\",\n\"deviceId\": \"-1\",\n\"alertState\": \"Alert\",\n\"sender\": \"SevOne\",\n\"objectAltName\": \"testObjectAltName\",\n\"thresholdName\": \"Website Alerts - testDeviceName - testObjectName\",\n\"alertType\": \"Metric\",\n\"alertId\": \"-1\",\n\"objectId\": \"-1\",\n\"cluster\": \"All Devices\",\n\"description\": \"Default Alert Message\",\n\"deviceIp\": \"10.1.2.3\",\n\"policyName\": \"Website Alerts\",\n\"objectDescription\": \"testObjectDescription\",\n\"pluginName\": \"HTTP\"\n}\n```\n\nRegarding the Event attributes, the following example mappings can be used:\n\n```sh\nSeverity: alertState = \"Emergency\" ? \"Critical\" : alertState = \"Alert\" ? \"Critical\" : alertState = \"Critical\" ? \"Critical\" : alertState = \"Error\" ? \"Major\" : alertState = \"Cleared\" ? \"Cleared\"\nSummary: description\nResource name: deviceName\nEvent type: policyName\n* Resolution:  alertState = \"Cleared\"\n* Sender: Name: \"SevOne\"\n* URL 1: URL: url\n* URL 1: Description: url\n\n* Fields marked with an asterisk first need to be added via the Optional event attributes link.\n```\n**NOTE:** Further information regarding the generic webhook event integration can be found here, including a table that maps the integration attributes to event fields in the Event Manager event store (Netcool/OMNIbus ObjectServer): https://www.ibm.com/docs/en/noi/1.6.5?topic=integrations-webhook\n\n**NOTE:** Complex mappings such as the Severity field example above can be mapped using JSONATA functions: http://docs.jsonata.org/object-functions.html\n\n\nThe completed configuration should look something like the following:\n\n![](images/mapping.png)\n\n\nThe sample event generated via the **Generate** function should look something like the following:\n\n![](images/event.png)\n\n\nYou have now completed this module and are ready for module \"Create sample topology in Watson for AIOps Event Manager\".\n\n\n[Reference Blog](https://community.ibm.com/community/user/aiops/blogs/zane-bray1/2022/04/22/getting-started-with-watson-aiops-event-manager-37)\n","fileAbsolutePath":"/Users/bstern/tivoli/Best_Practices/TechJam6/waiops-tech-jam/src/pages/tutorials/aiops/webhook/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}