{"componentChunkName":"component---src-pages-tutorials-aiops-fully-automated-runbooks-index-mdx","path":"/tutorials/aiops/fullyAutomatedRunbooks/","result":{"pageContext":{"frontmatter":{"title":"Fully Automated Runbooks","description":"How to setup fully automated runbooks with journal update"},"relativePagePath":"/tutorials/aiops/fullyAutomatedRunbooks/index.mdx","titleType":"page","MdxNode":{"id":"b3b83726-5f7d-550d-8963-b93f17ec1526","children":[],"parent":"f8b8bf5b-a043-5172-b898-16dfcccc7b13","internal":{"content":"---\r\ntitle: Fully Automated Runbooks\r\ndescription: How to setup fully automated runbooks with journal update\r\n---\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>12-1: Overview</AnchorLink>\r\n  <AnchorLink>12-2: Enable ObjectServer REST Interface</AnchorLink>\r\n  <AnchorLink>12-3: Create automation to update the journal</AnchorLink>\r\n  <AnchorLink>12-4: Update Runbook - add a step to update the journal</AnchorLink>\r\n  <AnchorLink>12-5: Update Trigger to set Execution Automatic</AnchorLink>\r\n  <AnchorLink>12-6: Test Fully automated Runbook</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## 12-1: Overview\r\n\r\nIBM Runbook Automation can automate procedures that can help IT staff solve everyday operational problems and do not require human interaction, thereby increasing the efficiency of IT operational processes.\r\n\r\nRunbooks start as documented procedures on a piece of paper that can become fully automated procedures. \r\n\r\nThis module focuses on the creation of a fully-automated runbook and updates runbook results in the event journal.\r\n\r\n![](images/AutoRunbookLifeCycle.png)\r\n\r\nScenario: There is a apache2 server running on HOST. The apache2 process is monitored and configured to generate an alert when the apache2 API service goes UP/DOWN.\r\n\r\nObjective: We have a manual runbook available (created in previous lab) for this problem and have a good success rate based on feedback. As a next step to mature this runbook and achieve full automation, we want to execute this runbook automatically and update results in the event journal. So the problem can be fixed without operator intervention.\r\n  \r\nBy the end of this module, you will have a fully automated runbook ready in the Watson AIOPs Event Manager environment.\r\n\r\n***\r\n\r\n## 12-2: Enable ObjectServer REST Interface \r\n\r\nIn order to update event journal runbook sends update via REST API to Objectserver. ObjectServer REST interface is disabled out of the box for Objectserver.\r\nSo we need to first enable Objectserver REST interface using below steps:\r\n\r\na) Find ConfigMap for the primary ObjectServer\r\n\r\n```sh\r\noc get configmap| grep primary\r\n```\r\nYou will see output like this :\r\n\r\nOUTPUT : evtmanager-objserv-agg-primary-config 2 14d\r\n\r\nb) Edit primary ObjectServer Configmap to enable REST interface in properties.\r\n\r\n```sh\r\n\r\noc edit configmap evtmanager-objserv-agg-primary-config\r\n```\r\n\r\nAdd this to configmap:\r\n\r\n```sh\r\napiVersion: v1\r\ndata:\r\n  agg-p-props-append: |\r\n    NRestOS.Enable: TRUE\r\n    NHttpd.EnableHTTP: TRUE\r\n    NHttpd.ListeningPort: 8080\r\n  agg-p-sql-extensions: \"\"\r\n```\r\n\r\nc) Restart primary ObjectServer pod\r\n\r\n```sh\r\noc delete pod evtmanager-ncoprimary-0\r\n```\r\n\r\nd) Expose Listening port for REST API\r\n\r\n```sh\r\noc expose po evtmanager-ncoprimary-0 --port=8080 --type=NodePort --name=objserver-http-client-external-portforward\r\n```\r\n\r\nCheck exposed port and make note of the port assigned.\r\n\r\n```sh\r\noc get svc | grep objserver-http-client-external-portforward\r\n```\r\n\r\n\r\ne) Retrieve OMNIBUS root password :\r\n\r\n\r\n```sh\r\noc get secret evtmanager-omni-secret -o go-template='{{range $k,$v := .data}}{{printf \"%s: \" $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{\"\\n\"}}{{end}}'\r\n```\r\n\r\nf)  Please Note : You need to delete 1 network policy in cluster in order to successfully run next curl command that connects to ObjectServer REST API \r\n \r\n ```sh\r\noc delete networkpolicy evtmanager-ibm-netcool-prod-network-policy\r\n```\r\n\r\n\r\ng) Test REST interface, OMNIbus password and port from the step (e) and step (d) are used to test the REST interface using curl. \r\n\r\n\r\n Cluster name is : `<Your cluster ingressdomain>` like \"tech-jam-xxx.containers.appdomain.cloud\".\r\n\r\n \r\n\r\n```sh\r\ncurl -k -u root:<OMNIBUS password from step e> -X POST -d \"{ \\\"sqlcmd\\\": \\\"select count(*) from alerts.status\\\" }\" -H 'Accept: application/json' -H 'Content-Type: application/json' http://<ClusterHostname>:<nodeport from step d>/objectserver/restapi/sql/factory\r\n```\r\n\r\nOutput:\r\n{\r\n\"rowset\": {\r\n\"osname\": \"AGG_P\",\r\n\"affectedRows\": 1,\r\n\"coldesc\": [{\r\n\"name\": \"COUNT( * )\",\r\n\"type\": \"integer\",\r\n\"size\": 4\r\n}],\r\n\"rows\": [{\r\n\"COUNT( * )\": 110\r\n}]\r\n}\r\n}\r\n\r\n***\r\n\r\n## 12-3: Create automation to update the journal\r\n\r\nCreate an automation \"Update Journal\" with two additional parameters \"alertid\" and \"message\". \r\n\r\nNavigate to: ** Automations → Runbooks → Automations → Create Automation **\r\n\r\n![](images/FRB_create_automation.png)\r\n\r\nScript:\r\n\r\n```sh\r\ncurl -k -u root:<OMNIBUS password from step e> -X POST -d \"{ \\\"sqlcmd\\\": \\\"exec jinsert($alertid,0, getdate, '$message')\\\" }\" -H 'Accept: application/json' -H 'Content-Type: application/json' \"http://10.17.71.136:30100/objectserver/restapi/sql/factory\"\r\n```\r\n\r\n![](images/FRB_create_automation_params.png)\r\n\r\nSave automation \"Update Journal\".\r\n\r\n***\r\n\r\n## 12-4: Update Runbook - add a step to update the journal\r\n\r\nNavigate to: ** Automations → Runbooks →  Library →  Edit runbook \"Restart API Service\" **\r\n\r\n![](images/FRB_update_runbook0.png)\r\n\r\n\r\nAdd Automated Step -> Select \"Update Journal\"\r\n\r\n![](images/FRB_update_runbook.png)\r\n\r\n\r\nAdd parameter mapping :  For \"alertid\" you can create \"New Runbook parameter\" of String type.\r\n\r\n![](images/FRB_update_journal.png)\r\n\r\nSave the automation step parameter mapping and publish the runbook.\r\n\r\n***\r\n\r\n## 12-5: Update Trigger to set Execution Automatic\r\n\r\n** Automations → Runbooks → Triggers -> Edit Trigger \"Restart API Service\" **\r\n\r\nUpdate Runbook execution from \"Manual\" to \"Automatic\".\r\n\r\nConfigure Parameter mapping from alert to Runbook parameters \"alertid' = Serial and \"Node\" = Node\r\n\r\n![](images/FRB_update_trigger.png)\r\n\r\nSave changes to the trigger.\r\n\r\n***\r\n\r\n## 12-6: Test Fully automated Runbook\r\n\r\nConnect to OCP Infra node.\r\n\r\nCheck status of apache2 service on OCP Infra node. If it is not running start it.\r\n\r\n```sh\r\nsudo systemctl status apache2\r\n```\r\n\r\n```sh\r\nsudo systemctl start apache2\r\n```\r\n\r\n\r\nNow stop apache2 Service and insert test alert for apache2 Service. (In live monitoring this alert is automatically generated when Service goes down)\r\n\r\n\r\n```sh\r\nsudo systemctl stop apache2\r\nsudo systemctl status apache2\r\n```\r\n\r\nLogin into OCP cluster and simulate corresponding alert \r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 -- /bin/bash -c '/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -pass $OMNIBUS_ROOT_PWD'\r\n```\r\n\r\nReplace the '\\<HOSTNAME\\>' with the Control Node eth0 IP address captured in 11-5 in below command.\r\n\r\n```sh\r\ndelete from alerts.status where Summary like 'API Server'\r\ngo\r\ninsert into alerts.status (Identifier,Severity,Type,AlertGroup,Node,FirstOccurrence,LastOccurrence,Manager,Class,Summary) values('Demo API Server <HOSTNAME> 1',5,1,'Demo','<HOSTNAME>',getdate,getdate,'Tivoli EIF Probe',6601,'API Server on <HOST>:<PORT> is DOWN');\r\ngo\r\n```\r\n\r\nExpected Output\r\n\r\n\r\nLaunch Alert Viewer and check alert with Summary = \" API Server on HOST is DOWN\". There should be a runbook associated with this alert automatically.\r\n\r\n![](images/FRB_alertviewer.png)\r\n\r\nOpen Event information for this alert to which runbook is associated. You will see Runbook parameters under Information, Runbook is set to run automatically.\r\n\r\n![](images/FRB_details.png)\r\n\r\nOnce it starts automatic execution  \"RunbookStatus\" changes to \"In Progress\" -> \"Complete\"\r\n\r\nFor more information on RunbookStatus :  https://www.ibm.com/docs/en/runbook-automation?topic=events-state-transitions-runbookstatus-field\r\n\r\nClick the Event Journal tab:\r\n\r\nRunbook execution status and result are updated for this event.\r\n\r\n\r\n![](images/FRB_journal_updated.png)\r\n\r\nYou can check if the system automatically restarted the service.\r\n\r\nConnect to OCP Infra node & check status of apache2 service.\r\n\r\n```sh\r\nsudo systemctl status apache2\r\n```\r\n\r\nIt should return running status , as runbook automatically started this service \r\n\r\n![](images/FRB_result_output.png)\r\n\r\nAlso you can view the runbook execution history in \"Automations → Runbooks → Execution\" tab.\r\n\r\nNow you have a fully automated runbook functional in your environment.\r\n\r\nFor more details on Runbooks, see the documentation link: https://www.ibm.com/docs/en/noi/1.6.5?topic=systems-managing-runbooks-automations\r\n\r\nYou have now completed this module and learned how to create and configure fully automated runbook in Event Manager.\r\n\r\n\r\n***\r\n\r\n","type":"Mdx","contentDigest":"a3249cffc69b8d907cfed1b5884e030f","owner":"gatsby-plugin-mdx","counter":1192},"frontmatter":{"title":"Fully Automated Runbooks","description":"How to setup fully automated runbooks with journal update"},"exports":{},"rawBody":"---\r\ntitle: Fully Automated Runbooks\r\ndescription: How to setup fully automated runbooks with journal update\r\n---\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>12-1: Overview</AnchorLink>\r\n  <AnchorLink>12-2: Enable ObjectServer REST Interface</AnchorLink>\r\n  <AnchorLink>12-3: Create automation to update the journal</AnchorLink>\r\n  <AnchorLink>12-4: Update Runbook - add a step to update the journal</AnchorLink>\r\n  <AnchorLink>12-5: Update Trigger to set Execution Automatic</AnchorLink>\r\n  <AnchorLink>12-6: Test Fully automated Runbook</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## 12-1: Overview\r\n\r\nIBM Runbook Automation can automate procedures that can help IT staff solve everyday operational problems and do not require human interaction, thereby increasing the efficiency of IT operational processes.\r\n\r\nRunbooks start as documented procedures on a piece of paper that can become fully automated procedures. \r\n\r\nThis module focuses on the creation of a fully-automated runbook and updates runbook results in the event journal.\r\n\r\n![](images/AutoRunbookLifeCycle.png)\r\n\r\nScenario: There is a apache2 server running on HOST. The apache2 process is monitored and configured to generate an alert when the apache2 API service goes UP/DOWN.\r\n\r\nObjective: We have a manual runbook available (created in previous lab) for this problem and have a good success rate based on feedback. As a next step to mature this runbook and achieve full automation, we want to execute this runbook automatically and update results in the event journal. So the problem can be fixed without operator intervention.\r\n  \r\nBy the end of this module, you will have a fully automated runbook ready in the Watson AIOPs Event Manager environment.\r\n\r\n***\r\n\r\n## 12-2: Enable ObjectServer REST Interface \r\n\r\nIn order to update event journal runbook sends update via REST API to Objectserver. ObjectServer REST interface is disabled out of the box for Objectserver.\r\nSo we need to first enable Objectserver REST interface using below steps:\r\n\r\na) Find ConfigMap for the primary ObjectServer\r\n\r\n```sh\r\noc get configmap| grep primary\r\n```\r\nYou will see output like this :\r\n\r\nOUTPUT : evtmanager-objserv-agg-primary-config 2 14d\r\n\r\nb) Edit primary ObjectServer Configmap to enable REST interface in properties.\r\n\r\n```sh\r\n\r\noc edit configmap evtmanager-objserv-agg-primary-config\r\n```\r\n\r\nAdd this to configmap:\r\n\r\n```sh\r\napiVersion: v1\r\ndata:\r\n  agg-p-props-append: |\r\n    NRestOS.Enable: TRUE\r\n    NHttpd.EnableHTTP: TRUE\r\n    NHttpd.ListeningPort: 8080\r\n  agg-p-sql-extensions: \"\"\r\n```\r\n\r\nc) Restart primary ObjectServer pod\r\n\r\n```sh\r\noc delete pod evtmanager-ncoprimary-0\r\n```\r\n\r\nd) Expose Listening port for REST API\r\n\r\n```sh\r\noc expose po evtmanager-ncoprimary-0 --port=8080 --type=NodePort --name=objserver-http-client-external-portforward\r\n```\r\n\r\nCheck exposed port and make note of the port assigned.\r\n\r\n```sh\r\noc get svc | grep objserver-http-client-external-portforward\r\n```\r\n\r\n\r\ne) Retrieve OMNIBUS root password :\r\n\r\n\r\n```sh\r\noc get secret evtmanager-omni-secret -o go-template='{{range $k,$v := .data}}{{printf \"%s: \" $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{\"\\n\"}}{{end}}'\r\n```\r\n\r\nf)  Please Note : You need to delete 1 network policy in cluster in order to successfully run next curl command that connects to ObjectServer REST API \r\n \r\n ```sh\r\noc delete networkpolicy evtmanager-ibm-netcool-prod-network-policy\r\n```\r\n\r\n\r\ng) Test REST interface, OMNIbus password and port from the step (e) and step (d) are used to test the REST interface using curl. \r\n\r\n\r\n Cluster name is : `<Your cluster ingressdomain>` like \"tech-jam-xxx.containers.appdomain.cloud\".\r\n\r\n \r\n\r\n```sh\r\ncurl -k -u root:<OMNIBUS password from step e> -X POST -d \"{ \\\"sqlcmd\\\": \\\"select count(*) from alerts.status\\\" }\" -H 'Accept: application/json' -H 'Content-Type: application/json' http://<ClusterHostname>:<nodeport from step d>/objectserver/restapi/sql/factory\r\n```\r\n\r\nOutput:\r\n{\r\n\"rowset\": {\r\n\"osname\": \"AGG_P\",\r\n\"affectedRows\": 1,\r\n\"coldesc\": [{\r\n\"name\": \"COUNT( * )\",\r\n\"type\": \"integer\",\r\n\"size\": 4\r\n}],\r\n\"rows\": [{\r\n\"COUNT( * )\": 110\r\n}]\r\n}\r\n}\r\n\r\n***\r\n\r\n## 12-3: Create automation to update the journal\r\n\r\nCreate an automation \"Update Journal\" with two additional parameters \"alertid\" and \"message\". \r\n\r\nNavigate to: ** Automations → Runbooks → Automations → Create Automation **\r\n\r\n![](images/FRB_create_automation.png)\r\n\r\nScript:\r\n\r\n```sh\r\ncurl -k -u root:<OMNIBUS password from step e> -X POST -d \"{ \\\"sqlcmd\\\": \\\"exec jinsert($alertid,0, getdate, '$message')\\\" }\" -H 'Accept: application/json' -H 'Content-Type: application/json' \"http://10.17.71.136:30100/objectserver/restapi/sql/factory\"\r\n```\r\n\r\n![](images/FRB_create_automation_params.png)\r\n\r\nSave automation \"Update Journal\".\r\n\r\n***\r\n\r\n## 12-4: Update Runbook - add a step to update the journal\r\n\r\nNavigate to: ** Automations → Runbooks →  Library →  Edit runbook \"Restart API Service\" **\r\n\r\n![](images/FRB_update_runbook0.png)\r\n\r\n\r\nAdd Automated Step -> Select \"Update Journal\"\r\n\r\n![](images/FRB_update_runbook.png)\r\n\r\n\r\nAdd parameter mapping :  For \"alertid\" you can create \"New Runbook parameter\" of String type.\r\n\r\n![](images/FRB_update_journal.png)\r\n\r\nSave the automation step parameter mapping and publish the runbook.\r\n\r\n***\r\n\r\n## 12-5: Update Trigger to set Execution Automatic\r\n\r\n** Automations → Runbooks → Triggers -> Edit Trigger \"Restart API Service\" **\r\n\r\nUpdate Runbook execution from \"Manual\" to \"Automatic\".\r\n\r\nConfigure Parameter mapping from alert to Runbook parameters \"alertid' = Serial and \"Node\" = Node\r\n\r\n![](images/FRB_update_trigger.png)\r\n\r\nSave changes to the trigger.\r\n\r\n***\r\n\r\n## 12-6: Test Fully automated Runbook\r\n\r\nConnect to OCP Infra node.\r\n\r\nCheck status of apache2 service on OCP Infra node. If it is not running start it.\r\n\r\n```sh\r\nsudo systemctl status apache2\r\n```\r\n\r\n```sh\r\nsudo systemctl start apache2\r\n```\r\n\r\n\r\nNow stop apache2 Service and insert test alert for apache2 Service. (In live monitoring this alert is automatically generated when Service goes down)\r\n\r\n\r\n```sh\r\nsudo systemctl stop apache2\r\nsudo systemctl status apache2\r\n```\r\n\r\nLogin into OCP cluster and simulate corresponding alert \r\n\r\n```sh\r\noc exec -it evtmanager-ncoprimary-0 -- /bin/bash -c '/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -pass $OMNIBUS_ROOT_PWD'\r\n```\r\n\r\nReplace the '\\<HOSTNAME\\>' with the Control Node eth0 IP address captured in 11-5 in below command.\r\n\r\n```sh\r\ndelete from alerts.status where Summary like 'API Server'\r\ngo\r\ninsert into alerts.status (Identifier,Severity,Type,AlertGroup,Node,FirstOccurrence,LastOccurrence,Manager,Class,Summary) values('Demo API Server <HOSTNAME> 1',5,1,'Demo','<HOSTNAME>',getdate,getdate,'Tivoli EIF Probe',6601,'API Server on <HOST>:<PORT> is DOWN');\r\ngo\r\n```\r\n\r\nExpected Output\r\n\r\n\r\nLaunch Alert Viewer and check alert with Summary = \" API Server on HOST is DOWN\". There should be a runbook associated with this alert automatically.\r\n\r\n![](images/FRB_alertviewer.png)\r\n\r\nOpen Event information for this alert to which runbook is associated. You will see Runbook parameters under Information, Runbook is set to run automatically.\r\n\r\n![](images/FRB_details.png)\r\n\r\nOnce it starts automatic execution  \"RunbookStatus\" changes to \"In Progress\" -> \"Complete\"\r\n\r\nFor more information on RunbookStatus :  https://www.ibm.com/docs/en/runbook-automation?topic=events-state-transitions-runbookstatus-field\r\n\r\nClick the Event Journal tab:\r\n\r\nRunbook execution status and result are updated for this event.\r\n\r\n\r\n![](images/FRB_journal_updated.png)\r\n\r\nYou can check if the system automatically restarted the service.\r\n\r\nConnect to OCP Infra node & check status of apache2 service.\r\n\r\n```sh\r\nsudo systemctl status apache2\r\n```\r\n\r\nIt should return running status , as runbook automatically started this service \r\n\r\n![](images/FRB_result_output.png)\r\n\r\nAlso you can view the runbook execution history in \"Automations → Runbooks → Execution\" tab.\r\n\r\nNow you have a fully automated runbook functional in your environment.\r\n\r\nFor more details on Runbooks, see the documentation link: https://www.ibm.com/docs/en/noi/1.6.5?topic=systems-managing-runbooks-automations\r\n\r\nYou have now completed this module and learned how to create and configure fully automated runbook in Event Manager.\r\n\r\n\r\n***\r\n\r\n","fileAbsolutePath":"C:/Users/103537778/git/waiops-tech-jam/src/pages/tutorials/aiops/fullyAutomatedRunbooks/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}