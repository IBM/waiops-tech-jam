{"componentChunkName":"component---src-pages-tutorials-aiops-temporal-grouping-index-mdx","path":"/tutorials/aiops/temporalGrouping/","result":{"pageContext":{"frontmatter":{"title":"Temporal Grouping & Seasonality","description":"Watson AIOps temporal grouping and seasonality"},"relativePagePath":"/tutorials/aiops/temporalGrouping/index.mdx","titleType":"page","MdxNode":{"id":"f16e990c-8a1c-5029-a375-339b692b5196","children":[],"parent":"6e6566e0-c0ed-5a22-97df-6d494e42a56e","internal":{"content":"---\ntitle: Temporal Grouping & Seasonality\ndescription: Watson AIOps temporal grouping and seasonality\n---\n\n<AnchorLinks>\n  <AnchorLink>9-1: Overview</AnchorLink>\n  <AnchorLink>9-2: Create historical data for learning</AnchorLink>\n  <AnchorLink>9-3: Insert historical events into event manager</AnchorLink>\n  <AnchorLink>9-4: Run training for temporal and seasonal policies </AnchorLink>\n  <AnchorLink>9-5: Check policies created by training</AnchorLink>\n  <AnchorLink>9-6: Replay events </AnchorLink>\n</AnchorLinks>\n\n## 9-1: Overview\n\nIn this module we will learn about Temporal grouping  & Seasonality functionality of Watson AIOps. This module assumes you have Watson AIOPs Event manager instance deployed on the OpenShift cluster (releasename=evtmanager , namespace=noi).\n\n**What is Temporal correlation?**\n\nTemporal correlation helps you reduce noise by grouping events, that share a time based relationship.\n\nThe temporal grouping analytic identifies related events based on their historic co-occurrences. Subsequent events, which match the temporal profile are correlated together.\nTemporal Policies for grouping related events are generated when 2, or more, events occur together (i.e. each less then 20 mins apart).\n\nIn this module, we will learn how temporal and seasonal policies are created and applied in Watson AIOps to create groups of related events. \nIt is based on machine learning using historical events data. In the customer environment training is done on historical event data normally reporter db for existing netcool deployments.\n\n\n**How does it work?**\n\nThe temporal grouping analytics algorithm works on unique identifiers for the alerts. To group, they need to be seen at least 3 times together within 20 mins(default) time window.\n\n![](images/Temporal.png)\n\n**Event Data Sanitation:**\n\nThe “Identifier” field in Netcool alerts uniquely identifies an alert from the monitored resource. The identifier field controls the deduplication feature of the ObjectServer, and also supports compatibility with the GenericClear automation by ensuring resolution events are properly inserted into the ObjectServer and not deduplicated with their respective problem events.\n\nTemporal correlation uses Identifier to identify set of events that repeatedly happen together, at least 3 times in the learning period.\n\nSometimes training on historical data do not return any groups, this can be due to the unique Identifier among different occurrences of same problem. This makes historical events unsuitable for temporal grouping.\nSome common examples are:\n\n- Having timestamp in Identifiers\n- Having Integer values appended to Identifier\n- If tasks are scheduled every day but get a unique task id each time they run, it will create unique identifiers\n- Unique message ids in Identifier\n- UTC values for the timestamp in Identifier etc\n\n\n***\n\n## 9-2: Create historical data for learning\n\nIn order to understand how Watson AIOps learns temporal & seasonal relations, we will simulate a sample set of events and train analytics engine on the simulated historical dataset.\n\nLogin into OCP cluster using oc login.\n\nCreate test_events_historic.sh script (as below)  that simulates multiple instances of set of events into the ObjectServer. starttime in script is EPOCH conversion for the time in history (9AM Jul 1, 2022) so we have a minimum 3-4 weeks of sample data generated for machine learning.\n\n\n```sh\n#!/bin/bash\nstarttime=1656666000\ntoday=`date +%s`\n\nfor (( i=0; i<=3; i++ ))\ndo\nstamp_seasonal=$(($starttime+$i*7*86400))\nstamp_temporal=$(($starttime+$i*4*71500))\nstamp_random=$(($starttime+$i*8*60700))\n\necho \"$i\"  \"$stamp_seasonal\"\n\n#Seasonal Events\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID1','Latency','ratings','ff5b55a1-de96-11e8-b739-00000a33043d',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','ratings','bookinfo',$stamp_seasonal,$stamp_seasonal,$stamp_seasonal,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID2','Ping response time high (> 200ms) https://bookinfo.example.com','bookinfo.example.com','bookinfo.example.com',2,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','pingmon','bookinfo',$stamp_seasonal+3,$stamp_seasonal+3,$stamp_seasonal+3,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID3','Memory utilization 100%','ratings','b2214f0d02bd2b7f45e7cd6dc7c756f5c58f96e13d419e4a581c3093c20fe31d',5, 'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','ratings','ratings',$stamp_temporal,$stamp_temporal,$stamp_temporal,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID4','Host CPU Usage','vmware-esx-host-gold-svc','vmware-esx-host-gold-svc',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','ESX Host',$stamp_temporal+6,$stamp_temporal+6,$stamp_temporal+6,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID5','Ping response time high (> 200ms) https://bookinfo.example.com','bookinfo.example.com','bookinfo.example.com',2,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','pingmon','bookinfo',$stamp_temporal+7,$stamp_temporal+7,$stamp_temporal+7,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID6','Virtual machine CPU usage','db-virtual-server','db-virtual-server',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','VM',$stamp_temporal+12,$stamp_temporal+12,$stamp_temporal+12,1);\ngo\n\nexit\nEOF\n\nif test $today -gt $stamp_random\nthen\n\n#Random Events\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID1','VM CPU usage','claimsprocessing-vm01','claimsprocessing-vm01',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','InfrastructureService',$stamp_random+12,$stamp_random+12,$stamp_random+12,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID2','Latency','claimsprocessing','cc5b55a1-de96-11e8-b739-00000a33043d',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','claimsprocessing','claimsprocessing',$stamp_random,$stamp_random,$stamp_random,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID3','JVM Memory Usage 100%','tpa01-jvm01-pri','tpa01-jvm01-pri',5, 'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','claimsprocessing','claimsprocessing',$stamp_random+18,$stamp_random+18,$stamp_random+18,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID4','pod claimsprocessing-v1-6c9dbf6b45-59jzf unhealthy: Container exceeded configured memory limit','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c', 5,'Kubernetes',87722,'ccd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+33,$stamp_random+33,$stamp_random+33,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID5','pod claimsprocessing-v1-6c9dbf6b45-59jzf started','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+22,$stamp_random+22,$stamp_random+22,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID6','pod claimsprocessing-v1-6c9dbf6b45-59jzf terminated','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+11,$stamp_random+11,$stamp_random+11,1);\ngo\nexit\nEOF\nfi\n\nsleep 1m\n\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\nupdate alerts.status set Severity = 0 where Class=87722;\ngo\nexit\nEOF\n\nsleep  1m\n\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\ndelete from alerts.status where Class=87722;\ngo\nexit\nEOF\n\necho \"Done.\" $i\ndone\n\necho \"Finished Historic Replay\"\n\n```\n***\n\n## 9-3: Insert historical events into event manager\n\nCopy historic event generating script to ObjectServer pod\n\n```sh\ncat test_events_historic.sh | oc exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/test_events_historic.sh\"\n```\n\n```sh\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/test_events_historic.sh\"\n```\n\nNow execute this script to simulate historic data set replay.( It will take approx 6 mins)\n\n```sh\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/test_events_historic.sh\n```\n\nYou can ignore message \"Warning: Failed to find tar in the following directories : /bin /usr/bin\" \n\nOnce replay is finished ( takes approx 5-6 mins), you can start training.\n\n***\n\n## 9-4: Run training for temporal and seasonal policies \n\nGet image for trainer pod:\n\n```sh\noc get noi evtmanager -o yaml | grep ea-events-tooling\n```\n\n![](images/trainingpod.png)\n\nRun training with algorithm related-events to learn temporal policies from historic data. This will generate temporal policies.\n\n```sh\noc run trainer -it --command=true --restart=Never --env=LICENSE=accept --image=cp.icr.io/cp/noi/ea-events-tooling:14.0.0-20220614134620BST --overrides='{\"apiVersion\":\"v1\", \"spec\":{\"imagePullSecrets\":[{\"name\":\"noi-registry-secret\"}]}}' runTraining.sh -- -r evtmanager -a related-events\n```\n\n![](images/TrainingSuccess.png)\n\n\nRun training with algorithm seasonal-events to learn seasonal policies from historic data. This will generate seasonal policies.\n\n```sh\noc delete pod trainer\n```\n\n```sh\noc run trainer -it --command=true --restart=Never --env=LICENSE=accept --image=cp.icr.io/cp/noi/ea-events-tooling:14.0.0-20220614134620BST --overrides='{\"apiVersion\":\"v1\", \"spec\":{\"imagePullSecrets\":[{\"name\":\"noi-registry-secret\"}]}}' runTraining.sh -- -r evtmanager -a seasonal-events\n```\n![](images/TrainingSuccess.png)\n\n***\n\n\n## 9-5: Check policies created by training\n\nTraining result in temporal and seasonal policies that user can review/deploy. \n\nLaunch **Event Viewer -> Insights -> Manage Policies **\n\nor in new UI : \n![](images/LaunchPolicies.png)\n\nYou will see all the policies in \"Created by Analytics\" Tab\n\n![](images/SeasonalPolicy.png)\n\nCheck details of Seasonal policy by clicking \"Policy Details\"\n\n![](images/SeasonalPolicyDetails.png)\n\n\nCheck details of Temporal policy by clicking \"Policy Details\"\n\n![](images/TemporalPolicyDetails.png)\n\nNow these policies are enabled by default and active to group live events.\n\n## 9-6: Replay events\n\nNext step we will simulate some live events to show how groups are created using above learned policies.\n\nCreate test_events_live.sh script (as below)  that simulates a set of events into the ObjectServer for which we have learned policies. starttime  is EPOCH conversion for current time.\n\n```sh\n#!/bin/bash\nstarttime=1656666000\nstamp=$starttime\n\nfor (( i=4; i<=4; i++ ))\ndo\nstamp_seasonal=$(($starttime+$i*7*86400))\nstamp_temporal=$(($starttime+$i*4*71500))\nstamp_random=$(($starttime+$i*8*160700))\n\necho \"$i\"  \"$stamp_seasonal\"\n\n#Seasonal Events\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID1','Latency','ratings','ff5b55a1-de96-11e8-b739-00000a33043d',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','ratings','bookinfo',$stamp_seasonal,$stamp_seasonal,$stamp_seasonal,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID2','Ping response time high (> 200ms) https://bookinfo.example.com','bookinfo.example.com','bookinfo.example.com',2,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','pingmon','bookinfo',$stamp_seasonal+3,$stamp_seasonal+3,$stamp_seasonal+3,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID3','Memory utilization 100%','ratings','b2214f0d02bd2b7f45e7cd6dc7c756f5c58f96e13d419e4a581c3093c20fe31d',5, 'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','ratings','ratings',$stamp_temporal,$stamp_temporal,$stamp_temporal,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID4','Host CPU Usage','vmware-esx-host-gold-svc','vmware-esx-host-gold-svc',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','ESX Host',$stamp_temporal+6,$stamp_temporal+6,$stamp_temporal+6,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID5','Ping response time high (> 200ms) https://bookinfo.example.com','bookinfo.example.com','bookinfo.example.com',2,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','pingmon','bookinfo',$stamp_temporal+7,$stamp_temporal+7,$stamp_temporal+7,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID6','Virtual machine CPU usage','db-virtual-server','db-virtual-server',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','VM',$stamp_temporal+12,$stamp_temporal+12,$stamp_temporal+12,1);\ngo\n\nexit\nEOF\n\n#Random Events\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID1','VM CPU usage','claimsprocessing-vm01','claimsprocessing-vm01',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','InfrastructureService',$stamp_random+12,$stamp_random+12,$stamp_random+12,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID2','Latency','claimsprocessing','cc5b55a1-de96-11e8-b739-00000a33043d',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','claimsprocessing','claimsprocessing',$stamp_random,$stamp_random,$stamp_random,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID3','JVM Memory Usage 100%','tpa01-jvm01-pri','tpa01-jvm01-pri',5, 'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','claimsprocessing','claimsprocessing',$stamp_random+18,$stamp_random+18,$stamp_random+18,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID4','pod claimsprocessing-v1-6c9dbf6b45-59jzf unhealthy: Container exceeded configured memory limit','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c', 5,'Kubernetes',87722,'ccd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+33,$stamp_random+33,$stamp_random+33,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,\nFirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID5','pod claimsprocessing-v1-6c9dbf6b45-59jzf started','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+22,$stamp_random+22,$stamp_random+22,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,\nFirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID6','pod claimsprocessing-v1-6c9dbf6b45-59jzf terminated','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c',1,'Kubernetes',87722,\n'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer',\n'claimsprocessing',$stamp_random+11,$stamp_random+11,$stamp_random+11,1);\ngo\nexit\nEOF\n\nsleep 1m\n\necho \"Done.\" $i\ndone\n```\n\nNow copy this script to Objectserver pod \n\n```sh\ncat test_events_live.sh | kubectl exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/test_events_live.sh\"\n```\n\n```sh\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/test_events_live.sh\" \n```\n\nRun this script to simulate some live events\n\n```sh\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/test_events_live.sh\n```\n\nAfter replaying, these events get automatically grouped in Event viewer based on the temporal and seasonal relations learned from historical data. \nWhen looking at the results if using DASH based WebGUI use \"All Events\" Filter and \"Example_IBM_CloudAnalytics\" View.\n\n![](images/ReplayResult.png)\n\nClick on \"Investigate\" to launch details of temporal group with Clock icon \n\n![](images/InvestigateTemporal.png)\n\nLaunch \"More Information\"\n\n![](images/MoreInfoTemporal.png)\n\nSimilarly Events are marked seasonal if they happened at the same time as learned policy. \n\n![](images/InvestigateSeasonal.png)\n\n\n![](images/MoreInfoSeasonal.png)\n\nThat completes the \"Temporal Grouping and Seasonality\" lab. Proceed to the next lab to learn how we build temporal patterns from temporal grouping policies to enhance the grouping to next level.","type":"Mdx","contentDigest":"614f71f65a7baacf302fc5f18ae695da","owner":"gatsby-plugin-mdx","counter":919},"frontmatter":{"title":"Temporal Grouping & Seasonality","description":"Watson AIOps temporal grouping and seasonality"},"exports":{},"rawBody":"---\ntitle: Temporal Grouping & Seasonality\ndescription: Watson AIOps temporal grouping and seasonality\n---\n\n<AnchorLinks>\n  <AnchorLink>9-1: Overview</AnchorLink>\n  <AnchorLink>9-2: Create historical data for learning</AnchorLink>\n  <AnchorLink>9-3: Insert historical events into event manager</AnchorLink>\n  <AnchorLink>9-4: Run training for temporal and seasonal policies </AnchorLink>\n  <AnchorLink>9-5: Check policies created by training</AnchorLink>\n  <AnchorLink>9-6: Replay events </AnchorLink>\n</AnchorLinks>\n\n## 9-1: Overview\n\nIn this module we will learn about Temporal grouping  & Seasonality functionality of Watson AIOps. This module assumes you have Watson AIOPs Event manager instance deployed on the OpenShift cluster (releasename=evtmanager , namespace=noi).\n\n**What is Temporal correlation?**\n\nTemporal correlation helps you reduce noise by grouping events, that share a time based relationship.\n\nThe temporal grouping analytic identifies related events based on their historic co-occurrences. Subsequent events, which match the temporal profile are correlated together.\nTemporal Policies for grouping related events are generated when 2, or more, events occur together (i.e. each less then 20 mins apart).\n\nIn this module, we will learn how temporal and seasonal policies are created and applied in Watson AIOps to create groups of related events. \nIt is based on machine learning using historical events data. In the customer environment training is done on historical event data normally reporter db for existing netcool deployments.\n\n\n**How does it work?**\n\nThe temporal grouping analytics algorithm works on unique identifiers for the alerts. To group, they need to be seen at least 3 times together within 20 mins(default) time window.\n\n![](images/Temporal.png)\n\n**Event Data Sanitation:**\n\nThe “Identifier” field in Netcool alerts uniquely identifies an alert from the monitored resource. The identifier field controls the deduplication feature of the ObjectServer, and also supports compatibility with the GenericClear automation by ensuring resolution events are properly inserted into the ObjectServer and not deduplicated with their respective problem events.\n\nTemporal correlation uses Identifier to identify set of events that repeatedly happen together, at least 3 times in the learning period.\n\nSometimes training on historical data do not return any groups, this can be due to the unique Identifier among different occurrences of same problem. This makes historical events unsuitable for temporal grouping.\nSome common examples are:\n\n- Having timestamp in Identifiers\n- Having Integer values appended to Identifier\n- If tasks are scheduled every day but get a unique task id each time they run, it will create unique identifiers\n- Unique message ids in Identifier\n- UTC values for the timestamp in Identifier etc\n\n\n***\n\n## 9-2: Create historical data for learning\n\nIn order to understand how Watson AIOps learns temporal & seasonal relations, we will simulate a sample set of events and train analytics engine on the simulated historical dataset.\n\nLogin into OCP cluster using oc login.\n\nCreate test_events_historic.sh script (as below)  that simulates multiple instances of set of events into the ObjectServer. starttime in script is EPOCH conversion for the time in history (9AM Jul 1, 2022) so we have a minimum 3-4 weeks of sample data generated for machine learning.\n\n\n```sh\n#!/bin/bash\nstarttime=1656666000\ntoday=`date +%s`\n\nfor (( i=0; i<=3; i++ ))\ndo\nstamp_seasonal=$(($starttime+$i*7*86400))\nstamp_temporal=$(($starttime+$i*4*71500))\nstamp_random=$(($starttime+$i*8*60700))\n\necho \"$i\"  \"$stamp_seasonal\"\n\n#Seasonal Events\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID1','Latency','ratings','ff5b55a1-de96-11e8-b739-00000a33043d',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','ratings','bookinfo',$stamp_seasonal,$stamp_seasonal,$stamp_seasonal,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID2','Ping response time high (> 200ms) https://bookinfo.example.com','bookinfo.example.com','bookinfo.example.com',2,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','pingmon','bookinfo',$stamp_seasonal+3,$stamp_seasonal+3,$stamp_seasonal+3,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID3','Memory utilization 100%','ratings','b2214f0d02bd2b7f45e7cd6dc7c756f5c58f96e13d419e4a581c3093c20fe31d',5, 'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','ratings','ratings',$stamp_temporal,$stamp_temporal,$stamp_temporal,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID4','Host CPU Usage','vmware-esx-host-gold-svc','vmware-esx-host-gold-svc',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','ESX Host',$stamp_temporal+6,$stamp_temporal+6,$stamp_temporal+6,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID5','Ping response time high (> 200ms) https://bookinfo.example.com','bookinfo.example.com','bookinfo.example.com',2,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','pingmon','bookinfo',$stamp_temporal+7,$stamp_temporal+7,$stamp_temporal+7,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID6','Virtual machine CPU usage','db-virtual-server','db-virtual-server',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','VM',$stamp_temporal+12,$stamp_temporal+12,$stamp_temporal+12,1);\ngo\n\nexit\nEOF\n\nif test $today -gt $stamp_random\nthen\n\n#Random Events\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID1','VM CPU usage','claimsprocessing-vm01','claimsprocessing-vm01',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','InfrastructureService',$stamp_random+12,$stamp_random+12,$stamp_random+12,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID2','Latency','claimsprocessing','cc5b55a1-de96-11e8-b739-00000a33043d',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','claimsprocessing','claimsprocessing',$stamp_random,$stamp_random,$stamp_random,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID3','JVM Memory Usage 100%','tpa01-jvm01-pri','tpa01-jvm01-pri',5, 'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','claimsprocessing','claimsprocessing',$stamp_random+18,$stamp_random+18,$stamp_random+18,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID4','pod claimsprocessing-v1-6c9dbf6b45-59jzf unhealthy: Container exceeded configured memory limit','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c', 5,'Kubernetes',87722,'ccd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+33,$stamp_random+33,$stamp_random+33,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID5','pod claimsprocessing-v1-6c9dbf6b45-59jzf started','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+22,$stamp_random+22,$stamp_random+22,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID6','pod claimsprocessing-v1-6c9dbf6b45-59jzf terminated','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+11,$stamp_random+11,$stamp_random+11,1);\ngo\nexit\nEOF\nfi\n\nsleep 1m\n\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\nupdate alerts.status set Severity = 0 where Class=87722;\ngo\nexit\nEOF\n\nsleep  1m\n\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\ndelete from alerts.status where Class=87722;\ngo\nexit\nEOF\n\necho \"Done.\" $i\ndone\n\necho \"Finished Historic Replay\"\n\n```\n***\n\n## 9-3: Insert historical events into event manager\n\nCopy historic event generating script to ObjectServer pod\n\n```sh\ncat test_events_historic.sh | oc exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/test_events_historic.sh\"\n```\n\n```sh\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/test_events_historic.sh\"\n```\n\nNow execute this script to simulate historic data set replay.( It will take approx 6 mins)\n\n```sh\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/test_events_historic.sh\n```\n\nYou can ignore message \"Warning: Failed to find tar in the following directories : /bin /usr/bin\" \n\nOnce replay is finished ( takes approx 5-6 mins), you can start training.\n\n***\n\n## 9-4: Run training for temporal and seasonal policies \n\nGet image for trainer pod:\n\n```sh\noc get noi evtmanager -o yaml | grep ea-events-tooling\n```\n\n![](images/trainingpod.png)\n\nRun training with algorithm related-events to learn temporal policies from historic data. This will generate temporal policies.\n\n```sh\noc run trainer -it --command=true --restart=Never --env=LICENSE=accept --image=cp.icr.io/cp/noi/ea-events-tooling:14.0.0-20220614134620BST --overrides='{\"apiVersion\":\"v1\", \"spec\":{\"imagePullSecrets\":[{\"name\":\"noi-registry-secret\"}]}}' runTraining.sh -- -r evtmanager -a related-events\n```\n\n![](images/TrainingSuccess.png)\n\n\nRun training with algorithm seasonal-events to learn seasonal policies from historic data. This will generate seasonal policies.\n\n```sh\noc delete pod trainer\n```\n\n```sh\noc run trainer -it --command=true --restart=Never --env=LICENSE=accept --image=cp.icr.io/cp/noi/ea-events-tooling:14.0.0-20220614134620BST --overrides='{\"apiVersion\":\"v1\", \"spec\":{\"imagePullSecrets\":[{\"name\":\"noi-registry-secret\"}]}}' runTraining.sh -- -r evtmanager -a seasonal-events\n```\n![](images/TrainingSuccess.png)\n\n***\n\n\n## 9-5: Check policies created by training\n\nTraining result in temporal and seasonal policies that user can review/deploy. \n\nLaunch **Event Viewer -> Insights -> Manage Policies **\n\nor in new UI : \n![](images/LaunchPolicies.png)\n\nYou will see all the policies in \"Created by Analytics\" Tab\n\n![](images/SeasonalPolicy.png)\n\nCheck details of Seasonal policy by clicking \"Policy Details\"\n\n![](images/SeasonalPolicyDetails.png)\n\n\nCheck details of Temporal policy by clicking \"Policy Details\"\n\n![](images/TemporalPolicyDetails.png)\n\nNow these policies are enabled by default and active to group live events.\n\n## 9-6: Replay events\n\nNext step we will simulate some live events to show how groups are created using above learned policies.\n\nCreate test_events_live.sh script (as below)  that simulates a set of events into the ObjectServer for which we have learned policies. starttime  is EPOCH conversion for current time.\n\n```sh\n#!/bin/bash\nstarttime=1656666000\nstamp=$starttime\n\nfor (( i=4; i<=4; i++ ))\ndo\nstamp_seasonal=$(($starttime+$i*7*86400))\nstamp_temporal=$(($starttime+$i*4*71500))\nstamp_random=$(($starttime+$i*8*160700))\n\necho \"$i\"  \"$stamp_seasonal\"\n\n#Seasonal Events\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID1','Latency','ratings','ff5b55a1-de96-11e8-b739-00000a33043d',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','ratings','bookinfo',$stamp_seasonal,$stamp_seasonal,$stamp_seasonal,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID2','Ping response time high (> 200ms) https://bookinfo.example.com','bookinfo.example.com','bookinfo.example.com',2,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','pingmon','bookinfo',$stamp_seasonal+3,$stamp_seasonal+3,$stamp_seasonal+3,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID3','Memory utilization 100%','ratings','b2214f0d02bd2b7f45e7cd6dc7c756f5c58f96e13d419e4a581c3093c20fe31d',5, 'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','ratings','ratings',$stamp_temporal,$stamp_temporal,$stamp_temporal,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID4','Host CPU Usage','vmware-esx-host-gold-svc','vmware-esx-host-gold-svc',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','ESX Host',$stamp_temporal+6,$stamp_temporal+6,$stamp_temporal+6,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID5','Ping response time high (> 200ms) https://bookinfo.example.com','bookinfo.example.com','bookinfo.example.com',2,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','pingmon','bookinfo',$stamp_temporal+7,$stamp_temporal+7,$stamp_temporal+7,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Library-ID6','Virtual machine CPU usage','db-virtual-server','db-virtual-server',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','VM',$stamp_temporal+12,$stamp_temporal+12,$stamp_temporal+12,1);\ngo\n\nexit\nEOF\n\n#Random Events\n/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd $OMNIBUS_ROOT_PWD << EOF\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID1','VM CPU usage','claimsprocessing-vm01','claimsprocessing-vm01',4,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','message_bus','InfrastructureService',$stamp_random+12,$stamp_random+12,$stamp_random+12,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID2','Latency','claimsprocessing','cc5b55a1-de96-11e8-b739-00000a33043d',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','claimsprocessing','claimsprocessing',$stamp_random,$stamp_random,$stamp_random,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID3','JVM Memory Usage 100%','tpa01-jvm01-pri','tpa01-jvm01-pri',5, 'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','claimsprocessing','claimsprocessing',$stamp_random+18,$stamp_random+18,$stamp_random+18,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,FirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID4','pod claimsprocessing-v1-6c9dbf6b45-59jzf unhealthy: Container exceeded configured memory limit','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c', 5,'Kubernetes',87722,'ccd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+33,$stamp_random+33,$stamp_random+33,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,\nFirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID5','pod claimsprocessing-v1-6c9dbf6b45-59jzf started','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c',1,'Kubernetes',87722,'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer','claimsprocessing',$stamp_random+22,$stamp_random+22,$stamp_random+22,1);\ngo\n\ninsert into alerts.status (Identifier,Summary,Node,NodeAlias,Severity,AlertGroup,Class,Customer,Manager,Service,\nFirstOccurrence,LastOccurrence,StateChange,Type) values ('Claims-ID6','pod claimsprocessing-v1-6c9dbf6b45-59jzf terminated','claimsprocessing-v1-6c9dbf6b45-59jzf','ddd7d7ff-00fe-4d03-9c99-dcc955cc8b7c',1,'Kubernetes',87722,\n'cfd95b7e-3bc7-4006-a4a8-a73a79c71255','kubernetes-observer',\n'claimsprocessing',$stamp_random+11,$stamp_random+11,$stamp_random+11,1);\ngo\nexit\nEOF\n\nsleep 1m\n\necho \"Done.\" $i\ndone\n```\n\nNow copy this script to Objectserver pod \n\n```sh\ncat test_events_live.sh | kubectl exec -i evtmanager-ncoprimary-0 -- sh -c \"cat > /tmp/test_events_live.sh\"\n```\n\n```sh\noc exec -it evtmanager-ncoprimary-0 bash -- sh -c \"chmod +x /tmp/test_events_live.sh\" \n```\n\nRun this script to simulate some live events\n\n```sh\noc exec -it evtmanager-ncoprimary-0 bash -- /tmp/test_events_live.sh\n```\n\nAfter replaying, these events get automatically grouped in Event viewer based on the temporal and seasonal relations learned from historical data. \nWhen looking at the results if using DASH based WebGUI use \"All Events\" Filter and \"Example_IBM_CloudAnalytics\" View.\n\n![](images/ReplayResult.png)\n\nClick on \"Investigate\" to launch details of temporal group with Clock icon \n\n![](images/InvestigateTemporal.png)\n\nLaunch \"More Information\"\n\n![](images/MoreInfoTemporal.png)\n\nSimilarly Events are marked seasonal if they happened at the same time as learned policy. \n\n![](images/InvestigateSeasonal.png)\n\n\n![](images/MoreInfoSeasonal.png)\n\nThat completes the \"Temporal Grouping and Seasonality\" lab. Proceed to the next lab to learn how we build temporal patterns from temporal grouping policies to enhance the grouping to next level.","fileAbsolutePath":"/Volumes/SSD Storage/IBM-DEVELOPMENT/TECHJAM2022/IBM/waiops-tech-jam/src/pages/tutorials/aiops/temporalGrouping/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}