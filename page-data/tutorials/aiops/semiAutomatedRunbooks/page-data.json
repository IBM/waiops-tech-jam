{"componentChunkName":"component---src-pages-tutorials-aiops-semi-automated-runbooks-index-mdx","path":"/tutorials/aiops/semiAutomatedRunbooks/","result":{"pageContext":{"frontmatter":{"title":"Semi-automated Runbook","description":"How to setup Semi-automated runbook"},"relativePagePath":"/tutorials/aiops/semiAutomatedRunbooks/index.mdx","titleType":"page","MdxNode":{"id":"6455ac49-f292-5120-9e9c-78e39c14be07","children":[],"parent":"9e41b563-77a7-5c93-8210-a07d80b8c48a","internal":{"content":"---\ntitle: Semi-automated Runbook\ndescription: How to setup Semi-automated runbook\n---\n\n<AnchorLinks>\n  <AnchorLink>11-1: Overview</AnchorLink>\n  <AnchorLink>11-2: Configure Integration with other systems</AnchorLink>\n  <AnchorLink>11-3: Create Automation </AnchorLink>\n  <AnchorLink>11-4: Create Runbook</AnchorLink>\n  <AnchorLink>11-5: Create Trigger</AnchorLink>\n  <AnchorLink>11-6: Test runbook</AnchorLink>\n</AnchorLinks>\n\n## 11-1: Overview\n\nIBM Runbook Automation can automate procedures that can help IT staff solve everyday operational problems and do not require human interaction, thereby increasing the efficiency of IT operational processes.\n\nRunbooks start as documented procedures on a piece of paper that can become fully automated procedures. \n\nThis module focuses on the creation of a simple Semi-automated runbook. \n\n![](images/RunbookLifeCycle.png)\n\n**Scenario:** There is a apache2 server running on HOST . The apache2 process is monitored and configured to generate an alert when the apache2 API service goes UP/DOWN.\n\n**Objective:** Create a runbook to restart apache2 API service and associate it with “apache2 API Service Down” alert.\n\nBy the end of this module, you will have a fully functional semi-automated runbook ready in the Watson AIOPs Event Manager environment.\n \n\n***\n\n## 11-2: Configure Integration with other systems\n\n**IMPORTANT**:Before starting this tutorial, Please enable Impact Service as follows:  \n\n**Automation -> Netcool Impact (login as icpadmin user)  -> Click on Services -> Start service RBA_EventReader**\n\nFor executing runbooks, users need to choose the type of automation provider from  Ansible Tower, SCRIPT or  BigFix.  A connection must be set up to connect to your target endpoints.\n\nThe SCRIPT automation provider allows to execute scripts (bash, ksh, perl ) on a target system. In this example, we will use the SCRIPT automation provider to establish an ssh session to target the endpoint. To allow RBA to log in without needing to specify a password, we need to copy RBA's public key into the user’s SSH authorized_keys of the target host. We can get the RBA public key by accessing the Watson AIOps — Event Manager User Interface as follows:\n\nNavigate to:  **Administration → Integration with other systems > automation type > script > configure**\n\n![](images/RB_script_conn_configure.png)\n\nCopy the public key to ~/.ssh/authorized_keys  for jammer user on the remote host (control node) where we want to execute the command.\n\nClick on \"Save\", go back to \"Automation type\", the \"Script\" status should be \"Connected\".\n\n**IMPORTTANT**  :  When you add the generated public key to your control node, be very careful not to edit the configured public key or you will lock yourself out of your control node.\n\n***\n\n## 11-3: Create Automation \n\nAutomation is a unit of programmatic instructions in RBA. Automation can be a script that is run through an SSH session on a remote system, an HTTP(s) API call, a BigFix call, or an Ansible tower Job or Job Workflow call.  A Runbook is formed by combining one or more automation. You can create new automation using Watson AIOps — Event Manager UI as follows:\n\nNavigate to:  ** Automations → Runbooks → Automations → Create Automation **\n\n![](images/RB_Create_automation.png)\n\nScript :\n\n```sh\necho \"Restarting the apache2 service\"\nsudo systemctl restart apache2\nsudo systemctl status apache2\n```\n***\nAutomation Parameters:\n\n**target**  and **user** are default parameters are required to execute automation on the remote system. Add another parameter **Identifier** of String type that we can use later for updating alarm based on runbook results.\n\n![](images/RB_Automation_Params.png)\n\nSave the automation. \n\n## 11-4: Create Runbook\n\nNavigate to: ** Automations → Runbooks → Library → Create Runbook **\n\n![](images/RB_Create_RB.png)\n\nAdd automated Step > Select \"Restart API Service\" Automation\n\n![](images/RB_Create_RB_add_auto.png)\n\n\nMap Automation parameters as follows:\n\n![](images/RB_Create_RB_map_params.png)\n\nPublish runbook by clicking ** Actions > Publish **\n\n***\n\n## 11-5: Create Trigger\n\nTriggers are used to associate runbook to the alerts.  It looks for events in which their Summary fields match the string pattern.\nFor more information on triggers : https://www.ibm.com/docs/en/noi/1.6.5?topic=triggers-create-trigger\n\nConnect to Control node.\n\nInstall & start apache2 service on control node.\n\n```sh\nsudo apt install net-tools -y\nsudo apt install apache2 -y\nsudo systemctl start apache2\nsudo systemctl status apache2\n```\n\nLogin to OCP cluster\n\nNow stop apache2 Service and insert some test alert for apache2 Service. (In live monitoring this alert is automatically generated when Service goes down)\n\n```sh\nsudo systemctl stop apache2\nsudo systemctl status apache2\n```\n\n```sh\noc exec -it evtmanager-ncoprimary-0 -- /bin/bash -c '/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -pass $OMNIBUS_ROOT_PWD'\n```\n\nRun \"ifconfig\" to capture eth0 IP address.\n\n```sh\nifconfig\n```\n\nReplace the '\\<HOSTNAME\\>' with the Control Node eth0 IP address in below command.\n\n```sh\ninsert into alerts.status (Identifier,Severity,Type,AlertGroup,Node,FirstOccurrence,LastOccurrence,Manager,Class,Summary) values('Demo API Server <HOSTNAME> 1',5,1,'Demo','<HOSTNAME>',getdate,getdate,'Tivoli EIF Probe',6601,'API Server on <HOSTNAME>:80 is DOWN');\ngo\n```\n\nNavigate to: ** Automations → Runbooks → Triggers → Create Trigger **\n\n![](images/RB_Create_Trigger.png)\n\n\n![](images/RB_Create_Trigger_assign_RB.png)\n\nClick on \"Save\".\n\n***\n\n## 11-6: Test runbook\n\nLaunch Alert Viewer and check alert with Summary = \"API Server on HOST is DOWN\". There should be a runbook associated with this alert automatically.\n\n![](images/RB_Test.png)\n\n\n** Execute runbook > Start Runbook **\n\n![](images/RB_Run_runbook.png)\n\n![](images/RB_exe_result.png)\n\nConnect to control node.\n\nCheck Status of apache2  service on control node.\n\n```sh\nsudo systemctl status apache2\n```\n\nIt should return running status , as runbook automatically started this service \n\n![](images/RB_result_apache2_output.png)\n\n***\n\nFor more details on Runbooks, see the documentation link: https://www.ibm.com/docs/en/noi/1.6.5?topic=systems-managing-runbooks-automations\n\nYou have now completed this module and learned how Semi automated runbooks work in Event Manager. In next module we will cover fully automated runbook with event journal update.\n\n\nProceed to the next section.\n","type":"Mdx","contentDigest":"7a0c757880dc43e3df3bed384747f340","owner":"gatsby-plugin-mdx","counter":3316},"frontmatter":{"title":"Semi-automated Runbook","description":"How to setup Semi-automated runbook"},"exports":{},"rawBody":"---\ntitle: Semi-automated Runbook\ndescription: How to setup Semi-automated runbook\n---\n\n<AnchorLinks>\n  <AnchorLink>11-1: Overview</AnchorLink>\n  <AnchorLink>11-2: Configure Integration with other systems</AnchorLink>\n  <AnchorLink>11-3: Create Automation </AnchorLink>\n  <AnchorLink>11-4: Create Runbook</AnchorLink>\n  <AnchorLink>11-5: Create Trigger</AnchorLink>\n  <AnchorLink>11-6: Test runbook</AnchorLink>\n</AnchorLinks>\n\n## 11-1: Overview\n\nIBM Runbook Automation can automate procedures that can help IT staff solve everyday operational problems and do not require human interaction, thereby increasing the efficiency of IT operational processes.\n\nRunbooks start as documented procedures on a piece of paper that can become fully automated procedures. \n\nThis module focuses on the creation of a simple Semi-automated runbook. \n\n![](images/RunbookLifeCycle.png)\n\n**Scenario:** There is a apache2 server running on HOST . The apache2 process is monitored and configured to generate an alert when the apache2 API service goes UP/DOWN.\n\n**Objective:** Create a runbook to restart apache2 API service and associate it with “apache2 API Service Down” alert.\n\nBy the end of this module, you will have a fully functional semi-automated runbook ready in the Watson AIOPs Event Manager environment.\n \n\n***\n\n## 11-2: Configure Integration with other systems\n\n**IMPORTANT**:Before starting this tutorial, Please enable Impact Service as follows:  \n\n**Automation -> Netcool Impact (login as icpadmin user)  -> Click on Services -> Start service RBA_EventReader**\n\nFor executing runbooks, users need to choose the type of automation provider from  Ansible Tower, SCRIPT or  BigFix.  A connection must be set up to connect to your target endpoints.\n\nThe SCRIPT automation provider allows to execute scripts (bash, ksh, perl ) on a target system. In this example, we will use the SCRIPT automation provider to establish an ssh session to target the endpoint. To allow RBA to log in without needing to specify a password, we need to copy RBA's public key into the user’s SSH authorized_keys of the target host. We can get the RBA public key by accessing the Watson AIOps — Event Manager User Interface as follows:\n\nNavigate to:  **Administration → Integration with other systems > automation type > script > configure**\n\n![](images/RB_script_conn_configure.png)\n\nCopy the public key to ~/.ssh/authorized_keys  for jammer user on the remote host (control node) where we want to execute the command.\n\nClick on \"Save\", go back to \"Automation type\", the \"Script\" status should be \"Connected\".\n\n**IMPORTTANT**  :  When you add the generated public key to your control node, be very careful not to edit the configured public key or you will lock yourself out of your control node.\n\n***\n\n## 11-3: Create Automation \n\nAutomation is a unit of programmatic instructions in RBA. Automation can be a script that is run through an SSH session on a remote system, an HTTP(s) API call, a BigFix call, or an Ansible tower Job or Job Workflow call.  A Runbook is formed by combining one or more automation. You can create new automation using Watson AIOps — Event Manager UI as follows:\n\nNavigate to:  ** Automations → Runbooks → Automations → Create Automation **\n\n![](images/RB_Create_automation.png)\n\nScript :\n\n```sh\necho \"Restarting the apache2 service\"\nsudo systemctl restart apache2\nsudo systemctl status apache2\n```\n***\nAutomation Parameters:\n\n**target**  and **user** are default parameters are required to execute automation on the remote system. Add another parameter **Identifier** of String type that we can use later for updating alarm based on runbook results.\n\n![](images/RB_Automation_Params.png)\n\nSave the automation. \n\n## 11-4: Create Runbook\n\nNavigate to: ** Automations → Runbooks → Library → Create Runbook **\n\n![](images/RB_Create_RB.png)\n\nAdd automated Step > Select \"Restart API Service\" Automation\n\n![](images/RB_Create_RB_add_auto.png)\n\n\nMap Automation parameters as follows:\n\n![](images/RB_Create_RB_map_params.png)\n\nPublish runbook by clicking ** Actions > Publish **\n\n***\n\n## 11-5: Create Trigger\n\nTriggers are used to associate runbook to the alerts.  It looks for events in which their Summary fields match the string pattern.\nFor more information on triggers : https://www.ibm.com/docs/en/noi/1.6.5?topic=triggers-create-trigger\n\nConnect to Control node.\n\nInstall & start apache2 service on control node.\n\n```sh\nsudo apt install net-tools -y\nsudo apt install apache2 -y\nsudo systemctl start apache2\nsudo systemctl status apache2\n```\n\nLogin to OCP cluster\n\nNow stop apache2 Service and insert some test alert for apache2 Service. (In live monitoring this alert is automatically generated when Service goes down)\n\n```sh\nsudo systemctl stop apache2\nsudo systemctl status apache2\n```\n\n```sh\noc exec -it evtmanager-ncoprimary-0 -- /bin/bash -c '/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -pass $OMNIBUS_ROOT_PWD'\n```\n\nRun \"ifconfig\" to capture eth0 IP address.\n\n```sh\nifconfig\n```\n\nReplace the '\\<HOSTNAME\\>' with the Control Node eth0 IP address in below command.\n\n```sh\ninsert into alerts.status (Identifier,Severity,Type,AlertGroup,Node,FirstOccurrence,LastOccurrence,Manager,Class,Summary) values('Demo API Server <HOSTNAME> 1',5,1,'Demo','<HOSTNAME>',getdate,getdate,'Tivoli EIF Probe',6601,'API Server on <HOSTNAME>:80 is DOWN');\ngo\n```\n\nNavigate to: ** Automations → Runbooks → Triggers → Create Trigger **\n\n![](images/RB_Create_Trigger.png)\n\n\n![](images/RB_Create_Trigger_assign_RB.png)\n\nClick on \"Save\".\n\n***\n\n## 11-6: Test runbook\n\nLaunch Alert Viewer and check alert with Summary = \"API Server on HOST is DOWN\". There should be a runbook associated with this alert automatically.\n\n![](images/RB_Test.png)\n\n\n** Execute runbook > Start Runbook **\n\n![](images/RB_Run_runbook.png)\n\n![](images/RB_exe_result.png)\n\nConnect to control node.\n\nCheck Status of apache2  service on control node.\n\n```sh\nsudo systemctl status apache2\n```\n\nIt should return running status , as runbook automatically started this service \n\n![](images/RB_result_apache2_output.png)\n\n***\n\nFor more details on Runbooks, see the documentation link: https://www.ibm.com/docs/en/noi/1.6.5?topic=systems-managing-runbooks-automations\n\nYou have now completed this module and learned how Semi automated runbooks work in Event Manager. In next module we will cover fully automated runbook with event journal update.\n\n\nProceed to the next section.\n","fileAbsolutePath":"/home/amar/workspace/git-repos/github.com/IBM/waiops-tech-jam/src/pages/tutorials/aiops/semiAutomatedRunbooks/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}